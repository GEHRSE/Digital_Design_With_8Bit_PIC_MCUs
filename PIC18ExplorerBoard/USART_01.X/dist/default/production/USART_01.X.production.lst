

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Mar 08 11:36:37 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39  0000                     
    40                           ; Version 1.45
    41                           ; Generated 16/11/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F8722 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75                           	psect	idataCOMRAM
    76  002BE8                     __pidataCOMRAM:
    77                           	opt stack 0
    78                           
    79                           ;initializer for _b
    80  002BE8  10                 	db	16
    81  002BE9  49                 	db	73
    82  002BEA  40                 	db	64
    83                           
    84                           ;initializer for _a
    85  002BEB  1F                 	db	31
    86                           
    87                           ;initializer for _Caracter
    88  002BEC  41                 	db	65
    89                           
    90                           	psect	idataBANK0
    91  002B28                     __pidataBANK0:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _Mensaje
    95  002B28  4D                 	db	77
    96  002B29  69                 	db	105
    97  002B2A  63                 	db	99
    98  002B2B  72                 	db	114
    99  002B2C  6F                 	db	111
   100  002B2D  63                 	db	99
   101  002B2E  6F                 	db	111
   102  002B2F  6E                 	db	110
   103  002B30  74                 	db	116
   104  002B31  72                 	db	114
   105  002B32  6F                 	db	111
   106  002B33  6C                 	db	108
   107  002B34  61                 	db	97
   108  002B35  64                 	db	100
   109  002B36  6F                 	db	111
   110  002B37  72                 	db	114
   111  002B38  65                 	db	101
   112  002B39  73                 	db	115
   113  002B3A  20                 	db	32
   114  002B3B  79                 	db	121
   115  002B3C  20                 	db	32
   116  002B3D  4D                 	db	77
   117  002B3E  69                 	db	105
   118  002B3F  63                 	db	99
   119  002B40  72                 	db	114
   120  002B41  6F                 	db	111
   121  002B42  70                 	db	112
   122  002B43  72                 	db	114
   123  002B44  6F                 	db	111
   124  002B45  63                 	db	99
   125  002B46  65                 	db	101
   126  002B47  73                 	db	115
   127  002B48  61                 	db	97
   128  002B49  64                 	db	100
   129  002B4A  6F                 	db	111
   130  002B4B  72                 	db	114
   131  002B4C  65                 	db	101
   132  002B4D  73                 	db	115
   133  002B4E  00                 	db	0
   134                           
   135                           	psect	smallconst
   136  001000                     __psmallconst:
   137                           	opt stack 0
   138  001000  00                 	db	0
   139  001001                     _dpowers:
   140                           	opt stack 0
   141  001001  0001               	dw	1
   142  001003  0000               	dw	0
   143  001005  000A               	dw	10
   144  001007  0000               	dw	0
   145  001009  0064               	dw	100
   146  00100B  0000               	dw	0
   147  00100D  03E8               	dw	1000
   148  00100F  0000               	dw	0
   149  001011  2710               	dw	10000
   150  001013  0000               	dw	0
   151  001015  86A0               	dw	34464
   152  001017  0001               	dw	1
   153  001019  4240               	dw	16960
   154  00101B  000F               	dw	15
   155  00101D  9680               	dw	38528
   156  00101F  0098               	dw	152
   157  001021  E100               	dw	57600
   158  001023  05F5               	dw	1525
   159  001025  CA00               	dw	51712
   160  001027  3B9A               	dw	15258
   161  001029                     __end_of_dpowers:
   162                           	opt stack 0
   163  001029                     __powers_:
   164                           	opt stack 0
   165  001029  00                 	db	0
   166  00102A  80                 	db	128
   167  00102B  3F                 	db	63
   168  00102C  00                 	db	0
   169  00102D  20                 	db	32
   170  00102E  41                 	db	65
   171  00102F  00                 	db	0
   172  001030  C8                 	db	200
   173  001031  42                 	db	66
   174  001032  00                 	db	0
   175  001033  7A                 	db	122
   176  001034  44                 	db	68
   177  001035  40                 	db	64
   178  001036  1C                 	db	28
   179  001037  46                 	db	70
   180  001038  50                 	db	80
   181  001039  C3                 	db	195
   182  00103A  47                 	db	71
   183  00103B  24                 	db	36
   184  00103C  74                 	db	116
   185  00103D  49                 	db	73
   186  00103E  97                 	db	151
   187  00103F  18                 	db	24
   188  001040  4B                 	db	75
   189  001041  BC                 	db	188
   190  001042  BE                 	db	190
   191  001043  4C                 	db	76
   192  001044  6B                 	db	107
   193  001045  6E                 	db	110
   194  001046  4E                 	db	78
   195  001047  03                 	db	3
   196  001048  15                 	db	21
   197  001049  50                 	db	80
   198  00104A  79                 	db	121
   199  00104B  AD                 	db	173
   200  00104C  60                 	db	96
   201  00104D  F3                 	db	243
   202  00104E  49                 	db	73
   203  00104F  71                 	db	113
   204  001050                     __end_of__powers_:
   205                           	opt stack 0
   206  001050                     __npowers_:
   207                           	opt stack 0
   208  001050  00                 	db	0
   209  001051  80                 	db	128
   210  001052  3F                 	db	63
   211  001053  CD                 	db	205
   212  001054  CC                 	db	204
   213  001055  3D                 	db	61
   214  001056  D7                 	db	215
   215  001057  23                 	db	35
   216  001058  3C                 	db	60
   217  001059  12                 	db	18
   218  00105A  83                 	db	131
   219  00105B  3A                 	db	58
   220  00105C  B7                 	db	183
   221  00105D  D1                 	db	209
   222  00105E  38                 	db	56
   223  00105F  C6                 	db	198
   224  001060  27                 	db	39
   225  001061  37                 	db	55
   226  001062  38                 	db	56
   227  001063  86                 	db	134
   228  001064  35                 	db	53
   229  001065  C0                 	db	192
   230  001066  D6                 	db	214
   231  001067  33                 	db	51
   232  001068  CC                 	db	204
   233  001069  2B                 	db	43
   234  00106A  32                 	db	50
   235  00106B  70                 	db	112
   236  00106C  89                 	db	137
   237  00106D  30                 	db	48
   238  00106E  E7                 	db	231
   239  00106F  DB                 	db	219
   240  001070  2E                 	db	46
   241  001071  E5                 	db	229
   242  001072  3C                 	db	60
   243  001073  1E                 	db	30
   244  001074  42                 	db	66
   245  001075  A2                 	db	162
   246  001076  0D                 	db	13
   247  001077                     __end_of__npowers_:
   248                           	opt stack 0
   249  0000                     _RCSTAbits	set	4011
   250  0000                     _PIR1bits	set	3998
   251  0000                     _RCREG	set	4014
   252  0000                     _TXREG	set	4013
   253  0000                     _SPBRG	set	4015
   254  0000                     _TXSTA	set	4012
   255  0000                     _RCSTA	set	4011
   256  001077                     STR_2:
   257  001077  61                 	db	97	;'a'
   258  001078  3D                 	db	61	;'='
   259  001079  25                 	db	37
   260  00107A  64                 	db	100	;'d'
   261  00107B  2C                 	db	44
   262  00107C  20                 	db	32
   263  00107D  62                 	db	98	;'b'
   264  00107E  3D                 	db	61	;'='
   265  00107F  25                 	db	37
   266  001080  2E                 	db	46
   267  001081  33                 	db	51	;'3'
   268  001082  66                 	db	102	;'f'
   269  001083  20                 	db	32
   270  001084  25                 	db	37
   271  001085  73                 	db	115	;'s'
   272  001086  00                 	db	0
   273  001087                     STR_4:
   274  001087  4C                 	db	76	;'L'
   275  001088  65                 	db	101	;'e'
   276  001089  74                 	db	116	;'t'
   277  00108A  72                 	db	114	;'r'
   278  00108B  61                 	db	97	;'a'
   279  00108C  20                 	db	32
   280  00108D  3D                 	db	61	;'='
   281  00108E  20                 	db	32
   282  00108F  25                 	db	37
   283  001090  63                 	db	99	;'c'
   284  001091  00                 	db	0
   285  001092                     STR_5:
   286  001092  28                 	db	40
   287  001093  6E                 	db	110	;'n'
   288  001094  75                 	db	117	;'u'
   289  001095  6C                 	db	108	;'l'
   290  001096  6C                 	db	108	;'l'
   291  001097  29                 	db	41
   292  001098  00                 	db	0
   293  001099                     STR_1:
   294  001099  0A                 	db	10
   295  00109A  0D                 	db	13
   296  00109B  00                 	db	0
   297  0000                     
   298                           ; #config settings
   299  00109C  00                 	db	0	; dummy byte at the end
   300  0000                     
   301                           	psect	cinit
   302  002AA2                     __pcinit:
   303                           	opt stack 0
   304  002AA2                     start_initialization:
   305                           	opt stack 0
   306  002AA2                     __initialization:
   307                           	opt stack 0
   308                           
   309                           ; Initialize objects allocated to BANK0 (39 bytes)
   310                           ; load TBLPTR registers with __pidataBANK0
   311  002AA2  0E28               	movlw	low __pidataBANK0
   312  002AA4  6EF6               	movwf	tblptrl,c
   313  002AA6  0E2B               	movlw	high __pidataBANK0
   314  002AA8  6EF7               	movwf	tblptrh,c
   315  002AAA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   316  002AAC  6EF8               	movwf	tblptru,c
   317  002AAE  EE00  F060         	lfsr	0,__pdataBANK0
   318  002AB2  EE10 F027          	lfsr	1,39
   319  002AB6                     copy_data0:
   320  002AB6  0009               	tblrd		*+
   321  002AB8  CFF5 FFEE          	movff	tablat,postinc0
   322  002ABC  50E5               	movf	postdec1,w,c
   323  002ABE  50E1               	movf	fsr1l,w,c
   324  002AC0  E1FA               	bnz	copy_data0
   325                           
   326                           ; Initialize objects allocated to COMRAM (5 bytes)
   327                           ; load TBLPTR registers with __pidataCOMRAM
   328  002AC2  0EE8               	movlw	low __pidataCOMRAM
   329  002AC4  6EF6               	movwf	tblptrl,c
   330  002AC6  0E2B               	movlw	high __pidataCOMRAM
   331  002AC8  6EF7               	movwf	tblptrh,c
   332  002ACA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   333  002ACC  6EF8               	movwf	tblptru,c
   334  002ACE  EE00  F04F         	lfsr	0,__pdataCOMRAM
   335  002AD2  EE10 F005          	lfsr	1,5
   336  002AD6                     copy_data1:
   337  002AD6  0009               	tblrd		*+
   338  002AD8  CFF5 FFEE          	movff	tablat,postinc0
   339  002ADC  50E5               	movf	postdec1,w,c
   340  002ADE  50E1               	movf	fsr1l,w,c
   341  002AE0  E1FA               	bnz	copy_data1
   342  002AE2                     end_of_initialization:
   343                           	opt stack 0
   344  002AE2                     __end_of__initialization:
   345                           	opt stack 0
   346  002AE2  0100               	movlb	0
   347  002AE4  EF26  F015         	goto	_main	;jump to C main() function
   348                           tblptru	equ	0xFF8
   349                           tblptrh	equ	0xFF7
   350                           tblptrl	equ	0xFF6
   351                           tablat	equ	0xFF5
   352                           postinc0	equ	0xFEE
   353                           postdec1	equ	0xFE5
   354                           fsr1l	equ	0xFE1
   355                           
   356                           	psect	dataCOMRAM
   357  00004F                     __pdataCOMRAM:
   358                           	opt stack 0
   359  00004F                     _b:
   360                           	opt stack 0
   361  00004F                     	ds	3
   362  000052                     _a:
   363                           	opt stack 0
   364  000052                     	ds	1
   365  000053                     _Caracter:
   366                           	opt stack 0
   367  000053                     	ds	1
   368                           tblptru	equ	0xFF8
   369                           tblptrh	equ	0xFF7
   370                           tblptrl	equ	0xFF6
   371                           tablat	equ	0xFF5
   372                           postinc0	equ	0xFEE
   373                           postdec1	equ	0xFE5
   374                           fsr1l	equ	0xFE1
   375                           
   376                           	psect	dataBANK0
   377  000060                     __pdataBANK0:
   378                           	opt stack 0
   379  000060                     _Mensaje:
   380                           	opt stack 0
   381  000060                     	ds	39
   382                           tblptru	equ	0xFF8
   383                           tblptrh	equ	0xFF7
   384                           tblptrl	equ	0xFF6
   385                           tablat	equ	0xFF5
   386                           postinc0	equ	0xFEE
   387                           postdec1	equ	0xFE5
   388                           fsr1l	equ	0xFE1
   389                           
   390                           	psect	cstackBANK0
   391  000087                     __pcstackBANK0:
   392                           	opt stack 0
   393  000087                     _printf$809:
   394                           	opt stack 0
   395                           
   396                           ; 3 bytes @ 0x0
   397  000087                     	ds	3
   398  00008A                     printf@len:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x3
   402  00008A                     	ds	2
   403  00008C                     printf@cp:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x5
   407  00008C                     	ds	2
   408  00008E                     printf@ap:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x7
   412  00008E                     	ds	2
   413  000090                     printf@flag:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x9
   417  000090                     	ds	2
   418  000092                     printf@exp:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0xB
   422  000092                     	ds	2
   423  000094                     printf@tmpval:
   424                           	opt stack 0
   425                           
   426                           ; 4 bytes @ 0xD
   427  000094                     	ds	4
   428  000098                     printf@val:
   429                           	opt stack 0
   430                           
   431                           ; 4 bytes @ 0x11
   432  000098                     	ds	4
   433  00009C                     printf@fval:
   434                           	opt stack 0
   435                           
   436                           ; 3 bytes @ 0x15
   437  00009C                     	ds	3
   438  00009F                     printf@prec:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x18
   442  00009F                     	ds	2
   443  0000A1                     printf@c:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0x1A
   447  0000A1                     	ds	1
   448                           tblptru	equ	0xFF8
   449                           tblptrh	equ	0xFF7
   450                           tblptrl	equ	0xFF6
   451                           tablat	equ	0xFF5
   452                           postinc0	equ	0xFEE
   453                           postdec1	equ	0xFE5
   454                           fsr1l	equ	0xFE1
   455                           
   456                           	psect	cstackCOMRAM
   457  000001                     __pcstackCOMRAM:
   458                           	opt stack 0
   459  000001                     ??_isdigit:
   460  000001                     ?___awmod:
   461                           	opt stack 0
   462  000001                     ?___ftpack:
   463                           	opt stack 0
   464  000001                     ?___ftneg:
   465                           	opt stack 0
   466  000001                     ?__tdiv_to_l_:
   467                           	opt stack 0
   468  000001                     ?__div_to_l_:
   469                           	opt stack 0
   470  000001                     ?___lldiv:
   471                           	opt stack 0
   472  000001                     EUSART1_Write@txData:
   473                           	opt stack 0
   474  000001                     ___awmod@dividend:
   475                           	opt stack 0
   476  000001                     __div_to_l_@f1:
   477                           	opt stack 0
   478  000001                     ___ftpack@arg:
   479                           	opt stack 0
   480  000001                     __tdiv_to_l_@f1:
   481                           	opt stack 0
   482  000001                     ___ftge@ff1:
   483                           	opt stack 0
   484  000001                     ___ftneg@f1:
   485                           	opt stack 0
   486  000001                     ___lldiv@dividend:
   487                           	opt stack 0
   488                           
   489                           ; 4 bytes @ 0x0
   490  000001                     	ds	1
   491  000002                     putch@txData:
   492                           	opt stack 0
   493  000002                     _isdigit$468:
   494                           	opt stack 0
   495                           
   496                           ; 1 bytes @ 0x1
   497  000002                     	ds	1
   498  000003                     isdigit@c:
   499                           	opt stack 0
   500  000003                     ___awmod@divisor:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x2
   504  000003                     	ds	1
   505  000004                     ___ftpack@exp:
   506                           	opt stack 0
   507  000004                     __div_to_l_@f2:
   508                           	opt stack 0
   509  000004                     __tdiv_to_l_@f2:
   510                           	opt stack 0
   511  000004                     ___ftge@ff2:
   512                           	opt stack 0
   513                           
   514                           ; 3 bytes @ 0x3
   515  000004                     	ds	1
   516  000005                     ___awmod@counter:
   517                           	opt stack 0
   518  000005                     ___ftpack@sign:
   519                           	opt stack 0
   520  000005                     ___lldiv@divisor:
   521                           	opt stack 0
   522                           
   523                           ; 4 bytes @ 0x4
   524  000005                     	ds	1
   525  000006                     ??___ftpack:
   526  000006                     ___awmod@sign:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x5
   530  000006                     	ds	1
   531  000007                     ??__tdiv_to_l_:
   532  000007                     ??___ftge:
   533  000007                     ?___awdiv:
   534                           	opt stack 0
   535  000007                     ___awdiv@dividend:
   536                           	opt stack 0
   537  000007                     __div_to_l_@quot:
   538                           	opt stack 0
   539                           
   540                           ; 4 bytes @ 0x6
   541  000007                     	ds	2
   542  000009                     ?___lltoft:
   543                           	opt stack 0
   544  000009                     ___awdiv@divisor:
   545                           	opt stack 0
   546  000009                     ___lldiv@quotient:
   547                           	opt stack 0
   548  000009                     ___lltoft@c:
   549                           	opt stack 0
   550                           
   551                           ; 4 bytes @ 0x8
   552  000009                     	ds	1
   553  00000A                     __tdiv_to_l_@quot:
   554                           	opt stack 0
   555                           
   556                           ; 4 bytes @ 0x9
   557  00000A                     	ds	1
   558  00000B                     ___awdiv@counter:
   559                           	opt stack 0
   560  00000B                     __div_to_l_@cntr:
   561                           	opt stack 0
   562                           
   563                           ; 1 bytes @ 0xA
   564  00000B                     	ds	1
   565  00000C                     ___awdiv@sign:
   566                           	opt stack 0
   567  00000C                     __div_to_l_@exp1:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0xB
   571  00000C                     	ds	1
   572  00000D                     ??___lltoft:
   573  00000D                     ___lldiv@counter:
   574                           	opt stack 0
   575  00000D                     ___awdiv@quotient:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0xC
   579  00000D                     	ds	1
   580  00000E                     ?___llmod:
   581                           	opt stack 0
   582  00000E                     __tdiv_to_l_@cntr:
   583                           	opt stack 0
   584  00000E                     ___llmod@dividend:
   585                           	opt stack 0
   586                           
   587                           ; 4 bytes @ 0xD
   588  00000E                     	ds	1
   589  00000F                     ?___wmul:
   590                           	opt stack 0
   591  00000F                     __tdiv_to_l_@exp1:
   592                           	opt stack 0
   593  00000F                     ___wmul@multiplier:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0xE
   597  00000F                     	ds	2
   598  000011                     ___lltoft@exp:
   599                           	opt stack 0
   600  000011                     ___wmul@multiplicand:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x10
   604  000011                     	ds	1
   605  000012                     ___llmod@divisor:
   606                           	opt stack 0
   607                           
   608                           ; 4 bytes @ 0x11
   609  000012                     	ds	1
   610  000013                     ___wmul@product:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x12
   614  000013                     	ds	2
   615  000015                     ?___ftmul:
   616                           	opt stack 0
   617  000015                     ___ftmul@f1:
   618                           	opt stack 0
   619                           
   620                           ; 3 bytes @ 0x14
   621  000015                     	ds	1
   622  000016                     ___llmod@counter:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0x15
   626  000016                     	ds	2
   627  000018                     ___ftmul@f2:
   628                           	opt stack 0
   629                           
   630                           ; 3 bytes @ 0x17
   631  000018                     	ds	3
   632  00001B                     ??___ftmul:
   633                           
   634                           ; 1 bytes @ 0x1A
   635  00001B                     	ds	3
   636  00001E                     ___ftmul@exp:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x1D
   640  00001E                     	ds	1
   641  00001F                     ___ftmul@f3_as_product:
   642                           	opt stack 0
   643                           
   644                           ; 3 bytes @ 0x1E
   645  00001F                     	ds	3
   646  000022                     ___ftmul@cntr:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x21
   650  000022                     	ds	1
   651  000023                     ___ftmul@sign:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0x22
   655  000023                     	ds	1
   656  000024                     ?_fround:
   657                           	opt stack 0
   658  000024                     ?_scale:
   659                           	opt stack 0
   660                           
   661                           ; 3 bytes @ 0x23
   662  000024                     	ds	3
   663  000027                     _fround$807:
   664                           	opt stack 0
   665  000027                     _scale$808:
   666                           	opt stack 0
   667                           
   668                           ; 3 bytes @ 0x26
   669  000027                     	ds	3
   670  00002A                     scale@scl:
   671                           	opt stack 0
   672  00002A                     _fround$806:
   673                           	opt stack 0
   674                           
   675                           ; 3 bytes @ 0x29
   676  00002A                     	ds	1
   677  00002B                     ?___fttol:
   678                           	opt stack 0
   679  00002B                     ___fttol@f1:
   680                           	opt stack 0
   681                           
   682                           ; 3 bytes @ 0x2A
   683  00002B                     	ds	2
   684  00002D                     fround@prec:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0x2C
   688  00002D                     	ds	1
   689  00002E                     ?___ftadd:
   690                           	opt stack 0
   691  00002E                     ___ftadd@f1:
   692                           	opt stack 0
   693                           
   694                           ; 3 bytes @ 0x2D
   695  00002E                     	ds	1
   696  00002F                     ??___fttol:
   697                           
   698                           ; 1 bytes @ 0x2E
   699  00002F                     	ds	2
   700  000031                     ___ftadd@f2:
   701                           	opt stack 0
   702                           
   703                           ; 3 bytes @ 0x30
   704  000031                     	ds	3
   705  000034                     ??___ftadd:
   706  000034                     ___fttol@sign1:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0x33
   710  000034                     	ds	1
   711  000035                     ___fttol@lval:
   712                           	opt stack 0
   713                           
   714                           ; 4 bytes @ 0x34
   715  000035                     	ds	2
   716  000037                     ___ftadd@sign:
   717                           	opt stack 0
   718                           
   719                           ; 1 bytes @ 0x36
   720  000037                     	ds	1
   721  000038                     ___ftadd@exp2:
   722                           	opt stack 0
   723                           
   724                           ; 1 bytes @ 0x37
   725  000038                     	ds	1
   726  000039                     ___ftadd@exp1:
   727                           	opt stack 0
   728  000039                     ___fttol@exp1:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0x38
   732  000039                     	ds	1
   733  00003A                     ?___ftsub:
   734                           	opt stack 0
   735  00003A                     ___ftsub@f1:
   736                           	opt stack 0
   737                           
   738                           ; 3 bytes @ 0x39
   739  00003A                     	ds	3
   740  00003D                     ___ftsub@f2:
   741                           	opt stack 0
   742                           
   743                           ; 3 bytes @ 0x3C
   744  00003D                     	ds	3
   745  000040                     ?_printf:
   746                           	opt stack 0
   747  000040                     printf@f:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0x3F
   751  000040                     	ds	9
   752  000049                     ??_printf:
   753                           
   754                           ; 1 bytes @ 0x48
   755  000049                     	ds	6
   756  00004F                     tblptru	equ	0xFF8
   757                           tblptrh	equ	0xFF7
   758                           tblptrl	equ	0xFF6
   759                           tablat	equ	0xFF5
   760                           postinc0	equ	0xFEE
   761                           postdec1	equ	0xFE5
   762                           fsr1l	equ	0xFE1
   763                           
   764                           ; 1 bytes @ 0x4E
   765 ;;
   766 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   767 ;;
   768 ;; *************** function _main *****************
   769 ;; Defined at:
   770 ;;		line 22 in file "main.c"
   771 ;; Parameters:    Size  Location     Type
   772 ;;		None
   773 ;; Auto vars:     Size  Location     Type
   774 ;;		None
   775 ;; Return value:  Size  Location     Type
   776 ;;                  1    wreg      void 
   777 ;; Registers used:
   778 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   779 ;; Tracked objects:
   780 ;;		On entry : 0/0
   781 ;;		On exit  : 0/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   788 ;;Total ram usage:        0 bytes
   789 ;; Hardware stack levels required when called:    4
   790 ;; This function calls:
   791 ;;		_SystemInitialize
   792 ;;		_printf
   793 ;; This function is called by:
   794 ;;		Startup code after reset
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           	psect	text0
   799  002A4C                     __ptext0:
   800                           	opt stack 0
   801  002A4C                     _main:
   802                           	opt stack 27
   803                           
   804                           ;main.c: 24: SystemInitialize();
   805                           
   806                           ;incstack = 0
   807  002A4C  ECF1  F015         	call	_SystemInitialize	;wreg free
   808                           
   809                           ;main.c: 26: printf(Mensaje);
   810  002A50  0E60               	movlw	low _Mensaje
   811  002A52  6E40               	movwf	printf@f,c
   812  002A54  0E00               	movlw	high _Mensaje
   813  002A56  6E41               	movwf	printf@f+1,c
   814  002A58  EC4F  F008         	call	_printf	;wreg free
   815                           
   816                           ;main.c: 27: printf("\n\r");
   817  002A5C  0E99               	movlw	low STR_1
   818  002A5E  6E40               	movwf	printf@f,c
   819  002A60  0E10               	movlw	high STR_1
   820  002A62  6E41               	movwf	printf@f+1,c
   821  002A64  EC4F  F008         	call	_printf	;wreg free
   822                           
   823                           ;main.c: 28: printf("a=%d, b=%.3f %s",a,b,"\n\r");
   824  002A68  0E77               	movlw	low STR_2
   825  002A6A  6E40               	movwf	printf@f,c
   826  002A6C  0E10               	movlw	high STR_2
   827  002A6E  6E41               	movwf	printf@f+1,c
   828  002A70  C052  F042         	movff	_a,?_printf+2
   829  002A74  6A43               	clrf	?_printf+3,c
   830  002A76  C04F  F044         	movff	_b,?_printf+4
   831  002A7A  C050  F045         	movff	_b+1,?_printf+5
   832  002A7E  C051  F046         	movff	_b+2,?_printf+6
   833  002A82  0E99               	movlw	low STR_1
   834  002A84  6E47               	movwf	?_printf+7,c
   835  002A86  0E10               	movlw	high STR_1
   836  002A88  6E48               	movwf	?_printf+8,c
   837  002A8A  EC4F  F008         	call	_printf	;wreg free
   838                           
   839                           ;main.c: 29: printf("Letra = %c",Caracter);
   840  002A8E  0E87               	movlw	low STR_4
   841  002A90  6E40               	movwf	printf@f,c
   842  002A92  0E10               	movlw	high STR_4
   843  002A94  6E41               	movwf	printf@f+1,c
   844  002A96  C053  F042         	movff	_Caracter,?_printf+2
   845  002A9A  6A43               	clrf	?_printf+3,c
   846  002A9C  EC4F  F008         	call	_printf	;wreg free
   847  002AA0                     l55:
   848  002AA0  D7FF               	goto	l55
   849  002AA2                     __end_of_main:
   850                           	opt stack 0
   851                           tblptru	equ	0xFF8
   852                           tblptrh	equ	0xFF7
   853                           tblptrl	equ	0xFF6
   854                           tablat	equ	0xFF5
   855                           postinc0	equ	0xFEE
   856                           postdec1	equ	0xFE5
   857                           fsr1l	equ	0xFE1
   858                           
   859 ;; *************** function _printf *****************
   860 ;; Defined at:
   861 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
   862 ;; Parameters:    Size  Location     Type
   863 ;;  f               2   63[COMRAM] PTR const unsigned char 
   864 ;;		 -> STR_4(11), STR_2(16), STR_1(3), Mensaje(39), 
   865 ;; Auto vars:     Size  Location     Type
   866 ;;  val             4   17[BANK0 ] unsigned long 
   867 ;;  tmpval          4   13[BANK0 ] struct .
   868 ;;  fval            3   21[BANK0 ] struct .
   869 ;;  prec            2   24[BANK0 ] int 
   870 ;;  exp             2   11[BANK0 ] int 
   871 ;;  flag            2    9[BANK0 ] unsigned short 
   872 ;;  ap              2    7[BANK0 ] PTR void [1]
   873 ;;		 -> ?_printf(2), 
   874 ;;  cp              2    5[BANK0 ] PTR const unsigned char 
   875 ;;		 -> STR_5(7), printf@c(1), STR_3(3), 
   876 ;;  len             2    3[BANK0 ] unsigned int 
   877 ;;  width           2    0        int 
   878 ;;  c               1   26[BANK0 ] char 
   879 ;;  d               1    0        unsigned char 
   880 ;; Return value:  Size  Location     Type
   881 ;;                  2   63[COMRAM] int 
   882 ;; Registers used:
   883 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   884 ;; Tracked objects:
   885 ;;		On entry : 0/0
   886 ;;		On exit  : 0/0
   887 ;;		Unchanged: 0/0
   888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   889 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   890 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   891 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   892 ;;      Totals:        15      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   893 ;;Total ram usage:       42 bytes
   894 ;; Hardware stack levels used:    1
   895 ;; Hardware stack levels required when called:    3
   896 ;; This function calls:
   897 ;;		___awdiv
   898 ;;		___ftadd
   899 ;;		___ftge
   900 ;;		___ftmul
   901 ;;		___ftneg
   902 ;;		___ftsub
   903 ;;		___fttol
   904 ;;		___lldiv
   905 ;;		___llmod
   906 ;;		___lltoft
   907 ;;		___wmul
   908 ;;		__div_to_l_
   909 ;;		__tdiv_to_l_
   910 ;;		_fround
   911 ;;		_isdigit
   912 ;;		_putch
   913 ;;		_scale
   914 ;; This function is called by:
   915 ;;		_main
   916 ;; This function uses a non-reentrant model
   917 ;;
   918                           
   919                           	psect	text1
   920  00109E                     __ptext1:
   921                           	opt stack 0
   922  00109E                     _printf:
   923                           	opt stack 27
   924                           
   925                           ;doprnt.c: 466: va_list ap;
   926                           ;doprnt.c: 499: signed char c;
   927                           ;doprnt.c: 501: int width;
   928                           ;doprnt.c: 504: int prec;
   929                           ;doprnt.c: 508: unsigned short flag;
   930                           ;doprnt.c: 515: char d;
   931                           ;doprnt.c: 516: double fval;
   932                           ;doprnt.c: 517: int exp;
   933                           ;doprnt.c: 523: union {
   934                           ;doprnt.c: 524: unsigned long vd;
   935                           ;doprnt.c: 525: double integ;
   936                           ;doprnt.c: 526: } tmpval;
   937                           ;doprnt.c: 528: unsigned long val;
   938                           ;doprnt.c: 529: unsigned len;
   939                           ;doprnt.c: 530: const char * cp;
   940                           ;doprnt.c: 533: *ap = __va_start();
   941                           
   942                           ;incstack = 0
   943  00109E  0E42               	movlw	low (?_printf+2)
   944  0010A0  0100               	movlb	0	; () banked
   945  0010A2  6F8E               	movwf	printf@ap& (0+255),b
   946  0010A4  0E00               	movlw	high (?_printf+2)
   947  0010A6  6F8F               	movwf	(printf@ap+1)& (0+255),b
   948                           
   949                           ;doprnt.c: 536: while(c = *f++) {
   950  0010A8  EFF3  F00C         	goto	u2860
   951  0010AC                     
   952                           ; BSR set to: 0
   953                           ;doprnt.c: 538: if(c != '%')
   954                           
   955                           ; BSR set to: 0
   956  0010AC  0E25               	movlw	37
   957  0010AE  19A1               	xorwf	printf@c& (0+255),w,b
   958  0010B0  B4D8               	btfsc	status,2,c
   959  0010B2  D005               	goto	l100
   960                           
   961                           ; BSR set to: 0
   962                           ;doprnt.c: 540: {
   963                           ;doprnt.c: 541: (putch(c) );
   964  0010B4  51A1               	movf	printf@c& (0+255),w,b
   965  0010B6  ECEC  F015         	call	_putch
   966                           
   967                           ;doprnt.c: 542: continue;
   968  0010BA  EFF3  F00C         	goto	u2860
   969  0010BE                     l100:
   970                           
   971                           ;doprnt.c: 543: }
   972                           ;doprnt.c: 548: flag = 0;
   973  0010BE  0E00               	movlw	0
   974  0010C0  0100               	movlb	0	; () banked
   975  0010C2  6F91               	movwf	(printf@flag+1)& (0+255),b
   976  0010C4  0E00               	movlw	0
   977  0010C6  6F90               	movwf	printf@flag& (0+255),b
   978                           
   979                           ; BSR set to: 0
   980                           ;doprnt.c: 611: if(*f == '.') {
   981  0010C8  C040  FFF6         	movff	printf@f,tblptrl
   982  0010CC  C041  FFF7         	movff	printf@f+1,tblptrh
   983  0010D0  0E00               	movlw	low (__smallconst shr (0+16))
   984  0010D2  6EF8               	movwf	tblptru,c
   985  0010D4  0E0F               	movlw	(high __ramtop+-1)
   986  0010D6  64F7               	cpfsgt	tblptrh,c
   987  0010D8  D003               	bra	u2407
   988  0010DA  0008               	tblrd		*
   989  0010DC  50F5               	movf	tablat,w,c
   990  0010DE  D005               	bra	u2400
   991  0010E0                     u2407:
   992  0010E0  CFF6 FFE9          	movff	tblptrl,fsr0l
   993  0010E4  CFF7 FFEA          	movff	tblptrh,fsr0h
   994  0010E8  50EF               	movf	indf0,w,c
   995  0010EA                     u2400:
   996  0010EA  0A2E               	xorlw	46
   997  0010EC  A4D8               	btfss	status,2,c
   998  0010EE  D048               	goto	l101
   999                           
  1000                           ;doprnt.c: 612: flag |= 0x4000;
  1001  0010F0  0100               	movlb	0	; () banked
  1002  0010F2  8D91               	bsf	(printf@flag+1)& (0+255),6,b
  1003                           
  1004                           ;doprnt.c: 613: f++;
  1005  0010F4  4A40               	infsnz	printf@f,f,c
  1006  0010F6  2A41               	incf	printf@f+1,f,c
  1007                           
  1008                           ; BSR set to: 0
  1009                           ;doprnt.c: 620: {
  1010                           ;doprnt.c: 621: prec = 0;
  1011  0010F8  0E00               	movlw	0
  1012  0010FA  6FA0               	movwf	(printf@prec+1)& (0+255),b
  1013  0010FC  0E00               	movlw	0
  1014  0010FE  6F9F               	movwf	printf@prec& (0+255),b
  1015                           
  1016                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1017  001100  D029               	goto	l102
  1018  001102                     
  1019                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1020                           
  1021                           ; BSR set to: 0
  1022  001102  C09F  F00F         	movff	printf@prec,___wmul@multiplier
  1023  001106  C0A0  F010         	movff	printf@prec+1,___wmul@multiplier+1
  1024  00110A  0E00               	movlw	0
  1025  00110C  6E12               	movwf	___wmul@multiplicand+1,c
  1026  00110E  0E0A               	movlw	10
  1027  001110  6E11               	movwf	___wmul@multiplicand,c
  1028  001112  ECA8  F015         	call	___wmul	;wreg free
  1029  001116  C040  FFF6         	movff	printf@f,tblptrl
  1030  00111A  C041  FFF7         	movff	printf@f+1,tblptrh
  1031  00111E  0E00               	movlw	low (__smallconst shr (0+16))
  1032  001120  6EF8               	movwf	tblptru,c
  1033  001122  0E0F               	movlw	(high __ramtop+-1)
  1034  001124  64F7               	cpfsgt	tblptrh,c
  1035  001126  D003               	bra	u2427
  1036  001128  0008               	tblrd		*
  1037  00112A  50F5               	movf	tablat,w,c
  1038  00112C  D005               	bra	u2420
  1039  00112E                     u2427:
  1040  00112E  CFF6 FFE9          	movff	tblptrl,fsr0l
  1041  001132  CFF7 FFEA          	movff	tblptrh,fsr0h
  1042  001136  50EF               	movf	indf0,w,c
  1043  001138                     u2420:
  1044  001138  6E49               	movwf	??_printf& (0+255),c
  1045  00113A  5049               	movf	??_printf,w,c
  1046  00113C  260F               	addwf	?___wmul,f,c
  1047  00113E  0E00               	movlw	0
  1048  001140  2210               	addwfc	?___wmul+1,f,c
  1049  001142  0ED0               	movlw	208
  1050  001144  240F               	addwf	?___wmul,w,c
  1051  001146  0100               	movlb	0	; () banked
  1052  001148  6F9F               	movwf	printf@prec& (0+255),b
  1053  00114A  0EFF               	movlw	255
  1054  00114C  2010               	addwfc	?___wmul+1,w,c
  1055  00114E  6FA0               	movwf	(printf@prec+1)& (0+255),b
  1056                           
  1057                           ; BSR set to: 0
  1058  001150  4A40               	infsnz	printf@f,f,c
  1059  001152  2A41               	incf	printf@f+1,f,c
  1060  001154                     l102:
  1061                           
  1062                           ; BSR set to: 0
  1063                           
  1064                           ; BSR set to: 0
  1065  001154  C040  FFF6         	movff	printf@f,tblptrl
  1066  001158  C041  FFF7         	movff	printf@f+1,tblptrh
  1067  00115C  0E00               	movlw	low (__smallconst shr (0+16))
  1068  00115E  6EF8               	movwf	tblptru,c
  1069  001160  0E0F               	movlw	(high __ramtop+-1)
  1070  001162  64F7               	cpfsgt	tblptrh,c
  1071  001164  D003               	bra	u2437
  1072  001166  0008               	tblrd		*
  1073  001168  50F5               	movf	tablat,w,c
  1074  00116A  D005               	bra	u2430
  1075  00116C                     u2437:
  1076  00116C  CFF6 FFE9          	movff	tblptrl,fsr0l
  1077  001170  CFF7 FFEA          	movff	tblptrh,fsr0h
  1078  001174  50EF               	movf	indf0,w,c
  1079  001176                     u2430:
  1080  001176  ECCD  F015         	call	_isdigit
  1081  00117A  A0D8               	btfss	status,0,c
  1082  00117C  D082               	goto	l106
  1083  00117E  D7C1               	goto	l103
  1084  001180                     l101:
  1085                           
  1086                           ;doprnt.c: 626: prec = 0;
  1087  001180  0E00               	movlw	0
  1088  001182  0100               	movlb	0	; () banked
  1089  001184  6FA0               	movwf	(printf@prec+1)& (0+255),b
  1090  001186  0E00               	movlw	0
  1091  001188  6F9F               	movwf	printf@prec& (0+255),b
  1092                           
  1093                           ; BSR set to: 0
  1094                           ;doprnt.c: 628: flag |= 0x1000;
  1095  00118A  8991               	bsf	(printf@flag+1)& (0+255),4,b
  1096                           
  1097                           ; BSR set to: 0
  1098                           ;doprnt.c: 630: }
  1099                           ;doprnt.c: 635: switch(c = *f++) {
  1100  00118C  D07A               	goto	l106
  1101  00118E                     
  1102                           ; BSR set to: 0
  1103                           ;doprnt.c: 663: flag |= 0x400;
  1104                           
  1105                           ; BSR set to: 0
  1106  00118E  8591               	bsf	(printf@flag+1)& (0+255),2,b
  1107                           
  1108                           ; BSR set to: 0
  1109                           ;doprnt.c: 698: case 'i':
  1110                           ;doprnt.c: 699: break;
  1111                           
  1112                           ; BSR set to: 0
  1113                           
  1114                           ;doprnt.c: 697: case 'd':
  1115                           
  1116                           ;doprnt.c: 664: break;
  1117  001190  D0A5               	goto	l110
  1118  001192                     
  1119                           ; BSR set to: 0
  1120                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1121                           
  1122                           ; BSR set to: 0
  1123  001192  C08E  FFD9         	movff	printf@ap,fsr2l
  1124  001196  C08F  FFDA         	movff	printf@ap+1,fsr2h
  1125  00119A  CFDE F08C          	movff	postinc2,printf@cp
  1126  00119E  CFDD F08D          	movff	postdec2,printf@cp+1
  1127                           
  1128                           ; BSR set to: 0
  1129  0011A2  0E02               	movlw	2
  1130  0011A4  278E               	addwf	printf@ap& (0+255),f,b
  1131  0011A6  0E00               	movlw	0
  1132  0011A8  238F               	addwfc	(printf@ap+1)& (0+255),f,b
  1133                           
  1134                           ; BSR set to: 0
  1135                           ;doprnt.c: 740: if(!cp)
  1136  0011AA  518C               	movf	printf@cp& (0+255),w,b
  1137  0011AC  118D               	iorwf	(printf@cp+1)& (0+255),w,b
  1138  0011AE  A4D8               	btfss	status,2,c
  1139  0011B0  D004               	goto	l114
  1140                           
  1141                           ; BSR set to: 0
  1142                           ;doprnt.c: 741: cp = "(null)";
  1143  0011B2  0E92               	movlw	low STR_5
  1144  0011B4  6F8C               	movwf	printf@cp& (0+255),b
  1145  0011B6  0E10               	movlw	high STR_5
  1146  0011B8  6F8D               	movwf	(printf@cp+1)& (0+255),b
  1147  0011BA                     l114:
  1148                           
  1149                           ; BSR set to: 0
  1150                           ;doprnt.c: 745: len = 0;
  1151                           
  1152                           ; BSR set to: 0
  1153  0011BA  0E00               	movlw	0
  1154  0011BC  6F8B               	movwf	(printf@len+1)& (0+255),b
  1155  0011BE  0E00               	movlw	0
  1156  0011C0  6F8A               	movwf	printf@len& (0+255),b
  1157                           
  1158                           ;doprnt.c: 746: while(cp[len])
  1159  0011C2  D003               	goto	l115
  1160  0011C4                     
  1161                           ;doprnt.c: 747: len++;
  1162                           
  1163                           ; BSR set to: 0
  1164  0011C4  0100               	movlb	0	; () banked
  1165  0011C6  4B8A               	infsnz	printf@len& (0+255),f,b
  1166  0011C8  2B8B               	incf	(printf@len+1)& (0+255),f,b
  1167  0011CA                     l115:
  1168                           
  1169                           ; BSR set to: 0
  1170                           
  1171                           ; BSR set to: 0
  1172  0011CA  518A               	movf	printf@len& (0+255),w,b
  1173  0011CC  258C               	addwf	printf@cp& (0+255),w,b
  1174  0011CE  6E49               	movwf	??_printf& (0+255),c
  1175  0011D0  518B               	movf	(printf@len+1)& (0+255),w,b
  1176  0011D2  218D               	addwfc	(printf@cp+1)& (0+255),w,b
  1177  0011D4  6E4A               	movwf	(??_printf+1)& (0+255),c
  1178  0011D6  C049  FFF6         	movff	??_printf,tblptrl
  1179  0011DA  C04A  FFF7         	movff	??_printf+1,tblptrh
  1180  0011DE  0E00               	movlw	low (__smallconst shr (0+16))
  1181  0011E0  6EF8               	movwf	tblptru,c
  1182  0011E2  0E0F               	movlw	(high __ramtop+-1)
  1183  0011E4  64F7               	cpfsgt	tblptrh,c
  1184  0011E6  D003               	bra	u2467
  1185  0011E8  0008               	tblrd		*
  1186  0011EA  50F5               	movf	tablat,w,c
  1187  0011EC  D005               	bra	u2460
  1188  0011EE                     u2467:
  1189  0011EE  CFF6 FFE9          	movff	tblptrl,fsr0l
  1190  0011F2  CFF7 FFEA          	movff	tblptrh,fsr0h
  1191  0011F6  50EF               	movf	indf0,w,c
  1192  0011F8                     u2460:
  1193  0011F8  0900               	iorlw	0
  1194  0011FA  A4D8               	btfss	status,2,c
  1195  0011FC  D7E3               	goto	l116
  1196  0011FE                     u2470:
  1197                           
  1198                           ;doprnt.c: 753: if(prec && prec < len)
  1199                           
  1200                           ;doprnt.c: 750: dostring:
  1201  0011FE  0100               	movlb	0	; () banked
  1202  001200  519F               	movf	printf@prec& (0+255),w,b
  1203  001202  11A0               	iorwf	(printf@prec+1)& (0+255),w,b
  1204  001204  B4D8               	btfsc	status,2,c
  1205  001206  D021               	goto	l120
  1206                           
  1207                           ; BSR set to: 0
  1208  001208  518A               	movf	printf@len& (0+255),w,b
  1209  00120A  5D9F               	subwf	printf@prec& (0+255),w,b
  1210  00120C  518B               	movf	(printf@len+1)& (0+255),w,b
  1211  00120E  59A0               	subwfb	(printf@prec+1)& (0+255),w,b
  1212  001210  B0D8               	btfsc	status,0,c
  1213  001212  D01B               	goto	l120
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;doprnt.c: 754: len = prec;
  1217  001214  C09F  F08A         	movff	printf@prec,printf@len
  1218  001218  C0A0  F08B         	movff	printf@prec+1,printf@len+1
  1219                           
  1220                           ; BSR set to: 0
  1221                           ;doprnt.c: 767: while(len--)
  1222  00121C  D016               	goto	l120
  1223  00121E                     l2305:
  1224                           
  1225                           ; BSR set to: 0
  1226                           ;doprnt.c: 768: (putch(*cp++) );
  1227  00121E  C08C  FFF6         	movff	printf@cp,tblptrl
  1228  001222  C08D  FFF7         	movff	printf@cp+1,tblptrh
  1229  001226  0E00               	movlw	low (__smallconst shr (0+16))
  1230  001228  6EF8               	movwf	tblptru,c
  1231  00122A  0E0F               	movlw	(high __ramtop+-1)
  1232  00122C  64F7               	cpfsgt	tblptrh,c
  1233  00122E  D003               	bra	u2507
  1234  001230  0008               	tblrd		*
  1235  001232  50F5               	movf	tablat,w,c
  1236  001234  D005               	bra	u2500
  1237  001236                     u2507:
  1238  001236  CFF6 FFE9          	movff	tblptrl,fsr0l
  1239  00123A  CFF7 FFEA          	movff	tblptrh,fsr0h
  1240  00123E  50EF               	movf	indf0,w,c
  1241  001240                     u2500:
  1242  001240  ECEC  F015         	call	_putch
  1243  001244  0100               	movlb	0	; () banked
  1244  001246  4B8C               	infsnz	printf@cp& (0+255),f,b
  1245  001248  2B8D               	incf	(printf@cp+1)& (0+255),f,b
  1246  00124A                     l120:
  1247                           
  1248                           ; BSR set to: 0
  1249                           
  1250                           ; BSR set to: 0
  1251  00124A  078A               	decf	printf@len& (0+255),f,b
  1252  00124C  A0D8               	btfss	status,0,c
  1253  00124E  078B               	decf	(printf@len+1)& (0+255),f,b
  1254  001250  298A               	incf	printf@len& (0+255),w,b
  1255  001252  E1E5               	bnz	l2305
  1256  001254  298B               	incf	(printf@len+1)& (0+255),w,b
  1257  001256  B4D8               	btfsc	status,2,c
  1258  001258  D3C6               	goto	u2860
  1259  00125A  D7E1               	goto	l121
  1260  00125C                     
  1261                           ; BSR set to: 0
  1262                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  1263                           
  1264                           ; BSR set to: 0
  1265  00125C  C08E  FFD9         	movff	printf@ap,fsr2l
  1266  001260  C08F  FFDA         	movff	printf@ap+1,fsr2h
  1267  001264  50DF               	movf	indf2,w,c
  1268  001266  6FA1               	movwf	printf@c& (0+255),b
  1269                           
  1270                           ; BSR set to: 0
  1271  001268  0E02               	movlw	2
  1272  00126A  278E               	addwf	printf@ap& (0+255),f,b
  1273  00126C  0E00               	movlw	0
  1274  00126E  238F               	addwfc	(printf@ap+1)& (0+255),f,b
  1275  001270                     
  1276                           ; BSR set to: 0
  1277                           ;doprnt.c: 805: cp = (char *)&c;
  1278                           
  1279                           ; BSR set to: 0
  1280  001270  0EA1               	movlw	low printf@c
  1281  001272  6F8C               	movwf	printf@cp& (0+255),b
  1282  001274  0E00               	movlw	high printf@c
  1283  001276  6F8D               	movwf	(printf@cp+1)& (0+255),b
  1284                           
  1285                           ; BSR set to: 0
  1286                           ;doprnt.c: 806: len = 1;
  1287  001278  0E00               	movlw	0
  1288  00127A  6F8B               	movwf	(printf@len+1)& (0+255),b
  1289  00127C  0E01               	movlw	1
  1290  00127E  6F8A               	movwf	printf@len& (0+255),b
  1291                           
  1292                           ;doprnt.c: 807: goto dostring;
  1293  001280  D7BE               	goto	u2470
  1294  001282                     l106:
  1295                           
  1296                           ; BSR set to: 0
  1297  001282  5040               	movf	printf@f,w,c
  1298  001284  6E49               	movwf	??_printf& (0+255),c
  1299  001286  5041               	movf	printf@f+1,w,c
  1300  001288  6E4A               	movwf	(??_printf+1)& (0+255),c
  1301  00128A  4A40               	infsnz	printf@f,f,c
  1302  00128C  2A41               	incf	printf@f+1,f,c
  1303  00128E  C049  FFF6         	movff	??_printf,tblptrl
  1304  001292  C04A  FFF7         	movff	??_printf+1,tblptrh
  1305  001296  0E00               	movlw	low (__smallconst shr (0+16))
  1306  001298  6EF8               	movwf	tblptru,c
  1307  00129A  0E0F               	movlw	(high __ramtop+-1)
  1308  00129C  64F7               	cpfsgt	tblptrh,c
  1309  00129E  D003               	bra	u2527
  1310  0012A0  0008               	tblrd		*
  1311  0012A2  50F5               	movf	tablat,w,c
  1312  0012A4  D005               	bra	u2520
  1313  0012A6                     u2527:
  1314  0012A6  CFF6 FFE9          	movff	tblptrl,fsr0l
  1315  0012AA  CFF7 FFEA          	movff	tblptrh,fsr0h
  1316  0012AE  50EF               	movf	indf0,w,c
  1317  0012B0                     u2520:
  1318  0012B0  0100               	movlb	0	; () banked
  1319  0012B2  6FA1               	movwf	printf@c& (0+255),b
  1320  0012B4  51A1               	movf	printf@c& (0+255),w,b
  1321                           
  1322                           ; Switch size 1, requested type "space"
  1323                           ; Number of cases is 6, Range of values is 0 to 115
  1324                           ; switch strategies available:
  1325                           ; Name         Instructions Cycles
  1326                           ; simple_byte           19    10 (average)
  1327                           ;	Chosen strategy is simple_byte
  1328  0012B6  0A00               	xorlw	0	; case 0
  1329  0012B8  B4D8               	btfsc	status,2,c
  1330  0012BA  0012               	return	
  1331  0012BC  0A63               	xorlw	99	; case 99
  1332  0012BE  B4D8               	btfsc	status,2,c
  1333  0012C0  D7CD               	goto	l123
  1334  0012C2  0A07               	xorlw	7	; case 100
  1335  0012C4  B4D8               	btfsc	status,2,c
  1336  0012C6  D00A               	goto	l110
  1337  0012C8  0A02               	xorlw	2	; case 102
  1338  0012CA  B4D8               	btfsc	status,2,c
  1339  0012CC  D760               	goto	l109
  1340  0012CE  0A0F               	xorlw	15	; case 105
  1341  0012D0  B4D8               	btfsc	status,2,c
  1342  0012D2  D004               	goto	l110
  1343  0012D4  0A1A               	xorlw	26	; case 115
  1344  0012D6  B4D8               	btfsc	status,2,c
  1345  0012D8  D75C               	goto	l113
  1346  0012DA  D7CA               	goto	l124
  1347  0012DC                     l110:
  1348                           
  1349                           ; BSR set to: 0
  1350                           ;doprnt.c: 825: if(flag & (0x700)) {
  1351                           
  1352                           ; BSR set to: 0
  1353  0012DC  0E07               	movlw	7
  1354  0012DE  1591               	andwf	(printf@flag+1)& (0+255),w,b
  1355  0012E0  B4D8               	btfsc	status,2,c
  1356  0012E2  D2C0               	goto	l125
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;doprnt.c: 827: if(flag & 0x1000)
  1360  0012E4  A991               	btfss	(printf@flag+1)& (0+255),4,b
  1361  0012E6  D004               	goto	l126
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;doprnt.c: 829: prec = 6;
  1365  0012E8  0E00               	movlw	0
  1366  0012EA  6FA0               	movwf	(printf@prec+1)& (0+255),b
  1367  0012EC  0E06               	movlw	6
  1368  0012EE  6F9F               	movwf	printf@prec& (0+255),b
  1369  0012F0                     l126:
  1370                           
  1371                           ; BSR set to: 0
  1372                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1373                           
  1374                           ; BSR set to: 0
  1375  0012F0  C08E  FFD9         	movff	printf@ap,fsr2l
  1376  0012F4  C08F  FFDA         	movff	printf@ap+1,fsr2h
  1377  0012F8  CFDE F09C          	movff	postinc2,printf@fval
  1378  0012FC  CFDE F09D          	movff	postinc2,printf@fval+1
  1379  001300  CFDD F09E          	movff	postdec2,printf@fval+2
  1380                           
  1381                           ; BSR set to: 0
  1382  001304  0E03               	movlw	3
  1383  001306  278E               	addwf	printf@ap& (0+255),f,b
  1384  001308  0E00               	movlw	0
  1385  00130A  238F               	addwfc	(printf@ap+1)& (0+255),f,b
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;doprnt.c: 831: if(fval < 0.0) {
  1389  00130C  AF9E               	btfss	(printf@fval+2)& (0+255),7,b
  1390  00130E  D011               	goto	l127
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;doprnt.c: 832: fval = -fval;
  1394  001310  C09C  F001         	movff	printf@fval,___ftneg@f1
  1395  001314  C09D  F002         	movff	printf@fval+1,___ftneg@f1+1
  1396  001318  C09E  F003         	movff	printf@fval+2,___ftneg@f1+2
  1397  00131C  ECBB  F015         	call	___ftneg	;wreg free
  1398  001320  C001  F09C         	movff	?___ftneg,printf@fval
  1399  001324  C002  F09D         	movff	?___ftneg+1,printf@fval+1
  1400  001328  C003  F09E         	movff	?___ftneg+2,printf@fval+2
  1401                           
  1402                           ;doprnt.c: 833: flag |= 0x03;
  1403  00132C  0E03               	movlw	3
  1404  00132E  0100               	movlb	0	; () banked
  1405  001330  1390               	iorwf	printf@flag& (0+255),f,b
  1406  001332                     l127:
  1407                           
  1408                           ; BSR set to: 0
  1409                           ;doprnt.c: 834: }
  1410                           ;doprnt.c: 835: exp = 0;
  1411                           
  1412                           ; BSR set to: 0
  1413  001332  0E00               	movlw	0
  1414  001334  6F93               	movwf	(printf@exp+1)& (0+255),b
  1415  001336  0E00               	movlw	0
  1416  001338  6F92               	movwf	printf@exp& (0+255),b
  1417                           
  1418                           ; BSR set to: 0
  1419                           ;doprnt.c: 836: if( fval!=0) {
  1420  00133A  519C               	movf	printf@fval& (0+255),w,b
  1421  00133C  119D               	iorwf	(printf@fval+1)& (0+255),w,b
  1422  00133E  119E               	iorwf	(printf@fval+2)& (0+255),w,b
  1423  001340  B4D8               	btfsc	status,2,c
  1424  001342  D086               	goto	l132
  1425                           
  1426                           ; BSR set to: 0
  1427                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1428  001344  0E82               	movlw	130
  1429  001346  6E49               	movwf	??_printf& (0+255),c
  1430  001348  0EFF               	movlw	255
  1431  00134A  6E4A               	movwf	(??_printf+1)& (0+255),c
  1432  00134C  C09C  F04B         	movff	printf@fval,??_printf+2
  1433  001350  C09D  F04C         	movff	printf@fval+1,??_printf+3
  1434  001354  C09E  F04D         	movff	printf@fval+2,??_printf+4
  1435  001358  C09F  F04E         	movff	printf@fval+3,??_printf+5
  1436  00135C  0E10               	movlw	16
  1437  00135E  D005               	goto	u2570
  1438  001360                     u2575:
  1439  001360  90D8               	bcf	status,0,c
  1440  001362  324E               	rrcf	??_printf+5,f,c
  1441  001364  324D               	rrcf	??_printf+4,f,c
  1442  001366  324C               	rrcf	??_printf+3,f,c
  1443  001368  324B               	rrcf	??_printf+2,f,c
  1444  00136A                     u2570:
  1445  00136A  2EE8               	decfsz	wreg,f,c
  1446  00136C  D7F9               	goto	u2575
  1447  00136E  504B               	movf	??_printf+2,w,c
  1448  001370  2449               	addwf	??_printf,w,c
  1449  001372  6F92               	movwf	printf@exp& (0+255),b
  1450  001374  0E00               	movlw	0
  1451  001376  204A               	addwfc	??_printf+1,w,c
  1452  001378  6F93               	movwf	(printf@exp+1)& (0+255),b
  1453                           
  1454                           ; BSR set to: 0
  1455                           ;doprnt.c: 838: exp--;
  1456  00137A  0792               	decf	printf@exp& (0+255),f,b
  1457  00137C  A0D8               	btfss	status,0,c
  1458  00137E  0793               	decf	(printf@exp+1)& (0+255),f,b
  1459                           
  1460                           ; BSR set to: 0
  1461                           ;doprnt.c: 839: exp *= 3;
  1462  001380  C092  F00F         	movff	printf@exp,___wmul@multiplier
  1463  001384  C093  F010         	movff	printf@exp+1,___wmul@multiplier+1
  1464  001388  0E00               	movlw	0
  1465  00138A  6E12               	movwf	___wmul@multiplicand+1,c
  1466  00138C  0E03               	movlw	3
  1467  00138E  6E11               	movwf	___wmul@multiplicand,c
  1468  001390  ECA8  F015         	call	___wmul	;wreg free
  1469  001394  C00F  F092         	movff	?___wmul,printf@exp
  1470  001398  C010  F093         	movff	?___wmul+1,printf@exp+1
  1471                           
  1472                           ;doprnt.c: 840: exp /= 10;
  1473  00139C  C092  F007         	movff	printf@exp,___awdiv@dividend
  1474  0013A0  C093  F008         	movff	printf@exp+1,___awdiv@dividend+1
  1475  0013A4  0E00               	movlw	0
  1476  0013A6  6E0A               	movwf	___awdiv@divisor+1,c
  1477  0013A8  0E0A               	movlw	10
  1478  0013AA  6E09               	movwf	___awdiv@divisor,c
  1479  0013AC  EC0A  F014         	call	___awdiv	;wreg free
  1480  0013B0  C007  F092         	movff	?___awdiv,printf@exp
  1481  0013B4  C008  F093         	movff	?___awdiv+1,printf@exp+1
  1482                           
  1483                           ;doprnt.c: 841: if(exp < 0)
  1484  0013B8  0100               	movlb	0	; () banked
  1485  0013BA  AF93               	btfss	(printf@exp+1)& (0+255),7,b
  1486  0013BC  D003               	goto	l129
  1487                           
  1488                           ; BSR set to: 0
  1489                           ;doprnt.c: 842: exp--;
  1490  0013BE  0792               	decf	printf@exp& (0+255),f,b
  1491  0013C0  A0D8               	btfss	status,0,c
  1492  0013C2  0793               	decf	(printf@exp+1)& (0+255),f,b
  1493  0013C4                     l129:
  1494                           
  1495                           ; BSR set to: 0
  1496                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1497                           
  1498                           ; BSR set to: 0
  1499  0013C4  5192               	movf	printf@exp& (0+255),w,b
  1500  0013C6  0800               	sublw	0
  1501  0013C8  EC11  F00D         	call	_scale
  1502  0013CC  C024  F094         	movff	?_scale,printf@tmpval
  1503  0013D0  C025  F095         	movff	?_scale+1,printf@tmpval+1
  1504  0013D4  C026  F096         	movff	?_scale+2,printf@tmpval+2
  1505                           
  1506                           ;doprnt.c: 847: tmpval.integ *= fval;
  1507  0013D8  C094  F015         	movff	printf@tmpval,___ftmul@f1
  1508  0013DC  C095  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  1509  0013E0  C096  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  1510  0013E4  C09C  F018         	movff	printf@fval,___ftmul@f2
  1511  0013E8  C09D  F019         	movff	printf@fval+1,___ftmul@f2+1
  1512  0013EC  C09E  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1513  0013F0  EC77  F012         	call	___ftmul	;wreg free
  1514  0013F4  C015  F094         	movff	?___ftmul,printf@tmpval
  1515  0013F8  C016  F095         	movff	?___ftmul+1,printf@tmpval+1
  1516  0013FC  C017  F096         	movff	?___ftmul+2,printf@tmpval+2
  1517                           
  1518                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1519  001400  C094  F001         	movff	printf@tmpval,___ftge@ff1
  1520  001404  C095  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1521  001408  C096  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1522  00140C  0E00               	movlw	0
  1523  00140E  6E04               	movwf	___ftge@ff2,c
  1524  001410  0E80               	movlw	128
  1525  001412  6E05               	movwf	___ftge@ff2+1,c
  1526  001414  0E3F               	movlw	63
  1527  001416  6E06               	movwf	___ftge@ff2+2,c
  1528  001418  ECC2  F013         	call	___ftge	;wreg free
  1529  00141C  B0D8               	btfsc	status,0,c
  1530  00141E  D005               	goto	l130
  1531                           
  1532                           ;doprnt.c: 849: exp--;
  1533  001420  0100               	movlb	0	; () banked
  1534  001422  0792               	decf	printf@exp& (0+255),f,b
  1535  001424  A0D8               	btfss	status,0,c
  1536  001426  0793               	decf	(printf@exp+1)& (0+255),f,b
  1537  001428  D013               	goto	l132
  1538  00142A                     l130:
  1539                           
  1540                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1541                           
  1542                           ; BSR set to: 0
  1543  00142A  C094  F001         	movff	printf@tmpval,___ftge@ff1
  1544  00142E  C095  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1545  001432  C096  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1546  001436  0E00               	movlw	0
  1547  001438  6E04               	movwf	___ftge@ff2,c
  1548  00143A  0E20               	movlw	32
  1549  00143C  6E05               	movwf	___ftge@ff2+1,c
  1550  00143E  0E41               	movlw	65
  1551  001440  6E06               	movwf	___ftge@ff2+2,c
  1552  001442  ECC2  F013         	call	___ftge	;wreg free
  1553  001446  A0D8               	btfss	status,0,c
  1554  001448  D003               	goto	l132
  1555                           
  1556                           ;doprnt.c: 851: exp++;
  1557  00144A  0100               	movlb	0	; () banked
  1558  00144C  4B92               	infsnz	printf@exp& (0+255),f,b
  1559  00144E  2B93               	incf	(printf@exp+1)& (0+255),f,b
  1560  001450                     l132:
  1561                           
  1562                           ;doprnt.c: 852: }
  1563                           ;doprnt.c: 1112: if(prec <= 12)
  1564                           
  1565                           ; BSR set to: 0
  1566                           
  1567                           ; BSR set to: 0
  1568                           
  1569                           ; BSR set to: 0
  1570  001450  0100               	movlb	0	; () banked
  1571  001452  BFA0               	btfsc	(printf@prec+1)& (0+255),7,b
  1572  001454  D006               	goto	u2610
  1573  001456  51A0               	movf	(printf@prec+1)& (0+255),w,b
  1574  001458  E11B               	bnz	l2371
  1575  00145A  0E0D               	movlw	13
  1576  00145C  5D9F               	subwf	printf@prec& (0+255),w,b
  1577  00145E  B0D8               	btfsc	status,0,c
  1578  001460  D017               	goto	l133
  1579  001462                     u2610:
  1580                           
  1581                           ; BSR set to: 0
  1582                           ;doprnt.c: 1113: fval += fround(prec);
  1583  001462  C09C  F02E         	movff	printf@fval,___ftadd@f1
  1584  001466  C09D  F02F         	movff	printf@fval+1,___ftadd@f1+1
  1585  00146A  C09E  F030         	movff	printf@fval+2,___ftadd@f1+2
  1586  00146E  519F               	movf	printf@prec& (0+255),w,b
  1587  001470  EC39  F00F         	call	_fround
  1588  001474  C024  F031         	movff	?_fround,___ftadd@f2
  1589  001478  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1590  00147C  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1591  001480  EC74  F010         	call	___ftadd	;wreg free
  1592  001484  C02E  F09C         	movff	?___ftadd,printf@fval
  1593  001488  C02F  F09D         	movff	?___ftadd+1,printf@fval+1
  1594  00148C  C030  F09E         	movff	?___ftadd+2,printf@fval+2
  1595  001490                     l133:
  1596  001490                     l2371:
  1597                           
  1598                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1599  001490  0100               	movlb	0	; () banked
  1600  001492  BF93               	btfsc	(printf@exp+1)& (0+255),7,b
  1601  001494  D006               	goto	u2620
  1602  001496  5193               	movf	(printf@exp+1)& (0+255),w,b
  1603  001498  E120               	bnz	l2379
  1604  00149A  0E0A               	movlw	10
  1605  00149C  5D92               	subwf	printf@exp& (0+255),w,b
  1606  00149E  B0D8               	btfsc	status,0,c
  1607  0014A0  D01C               	goto	u2650
  1608  0014A2                     u2620:
  1609                           
  1610                           ; BSR set to: 0
  1611  0014A2  519C               	movf	printf@fval& (0+255),w,b
  1612  0014A4  119D               	iorwf	(printf@fval+1)& (0+255),w,b
  1613  0014A6  119E               	iorwf	(printf@fval+2)& (0+255),w,b
  1614  0014A8  B4D8               	btfsc	status,2,c
  1615  0014AA  D056               	goto	l134
  1616                           
  1617                           ; BSR set to: 0
  1618  0014AC  C09C  F02B         	movff	printf@fval,___fttol@f1
  1619  0014B0  C09D  F02C         	movff	printf@fval+1,___fttol@f1+1
  1620  0014B4  C09E  F02D         	movff	printf@fval+2,___fttol@f1+2
  1621  0014B8  ECF1  F012         	call	___fttol	;wreg free
  1622  0014BC  502B               	movf	?___fttol,w,c
  1623  0014BE  102C               	iorwf	?___fttol+1,w,c
  1624  0014C0  102D               	iorwf	?___fttol+2,w,c
  1625  0014C2  102E               	iorwf	?___fttol+3,w,c
  1626  0014C4  A4D8               	btfss	status,2,c
  1627  0014C6  D048               	goto	l134
  1628  0014C8  0100               	movlb	0	; () banked
  1629  0014CA  BF93               	btfsc	(printf@exp+1)& (0+255),7,b
  1630  0014CC  D045               	goto	l134
  1631  0014CE  5193               	movf	(printf@exp+1)& (0+255),w,b
  1632  0014D0  E104               	bnz	l2379
  1633  0014D2  0E02               	movlw	2
  1634  0014D4  5D92               	subwf	printf@exp& (0+255),w,b
  1635  0014D6  A0D8               	btfss	status,0,c
  1636  0014D8  D03F               	goto	l134
  1637  0014DA                     u2650:
  1638  0014DA                     l2379:
  1639                           
  1640                           ; BSR set to: 0
  1641                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1642  0014DA  C094  F001         	movff	printf@tmpval,___ftge@ff1
  1643  0014DE  C095  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1644  0014E2  C096  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1645  0014E6  0E70               	movlw	112
  1646  0014E8  6E04               	movwf	___ftge@ff2,c
  1647  0014EA  0E89               	movlw	137
  1648  0014EC  6E05               	movwf	___ftge@ff2+1,c
  1649  0014EE  0E40               	movlw	64
  1650  0014F0  6E06               	movwf	___ftge@ff2+2,c
  1651  0014F2  ECC2  F013         	call	___ftge	;wreg free
  1652  0014F6  B0D8               	btfsc	status,0,c
  1653  0014F8  D003               	goto	l137
  1654                           
  1655                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1656  0014FA  0100               	movlb	0	; () banked
  1657  0014FC  0EF7               	movlw	247
  1658  0014FE  D002               	goto	L1
  1659  001500                     l137:
  1660                           
  1661                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1662                           
  1663                           ; BSR set to: 0
  1664  001500  0100               	movlb	0	; () banked
  1665  001502  0EF8               	movlw	248
  1666  001504                     L1:
  1667  001504  2792               	addwf	printf@exp& (0+255),f,b
  1668  001506  0EFF               	movlw	255
  1669  001508  2393               	addwfc	(printf@exp+1)& (0+255),f,b
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;doprnt.c: 1124: }
  1673                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1674                           
  1675                           ; BSR set to: 0
  1676  00150A  5192               	movf	printf@exp& (0+255),w,b
  1677  00150C  EC11  F00D         	call	_scale
  1678  001510  C024  F094         	movff	?_scale,printf@tmpval
  1679  001514  C025  F095         	movff	?_scale+1,printf@tmpval+1
  1680  001518  C026  F096         	movff	?_scale+2,printf@tmpval+2
  1681                           
  1682                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1683  00151C  C09C  F001         	movff	printf@fval,__tdiv_to_l_@f1
  1684  001520  C09D  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1685  001524  C09E  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1686  001528  C094  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  1687  00152C  C095  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1688  001530  C096  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1689  001534  EC4A  F011         	call	__tdiv_to_l_	;wreg free
  1690  001538  C001  F098         	movff	?__tdiv_to_l_,printf@val
  1691  00153C  C002  F099         	movff	?__tdiv_to_l_+1,printf@val+1
  1692  001540  C003  F09A         	movff	?__tdiv_to_l_+2,printf@val+2
  1693  001544  C004  F09B         	movff	?__tdiv_to_l_+3,printf@val+3
  1694                           
  1695                           ;doprnt.c: 1129: fval = 0.0;
  1696  001548  0E00               	movlw	0
  1697  00154A  0100               	movlb	0	; () banked
  1698  00154C  6F9C               	movwf	printf@fval& (0+255),b
  1699  00154E  0E00               	movlw	0
  1700  001550  6F9D               	movwf	(printf@fval+1)& (0+255),b
  1701  001552  0E00               	movlw	0
  1702  001554  6F9E               	movwf	(printf@fval+2)& (0+255),b
  1703                           
  1704                           ;doprnt.c: 1130: } else {
  1705  001556  D033               	goto	l143
  1706  001558                     l134:
  1707                           
  1708                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1709                           
  1710                           ; BSR set to: 0
  1711  001558  C09C  F02B         	movff	printf@fval,___fttol@f1
  1712  00155C  C09D  F02C         	movff	printf@fval+1,___fttol@f1+1
  1713  001560  C09E  F02D         	movff	printf@fval+2,___fttol@f1+2
  1714  001564  ECF1  F012         	call	___fttol	;wreg free
  1715  001568  C02B  F098         	movff	?___fttol,printf@val
  1716  00156C  C02C  F099         	movff	?___fttol+1,printf@val+1
  1717  001570  C02D  F09A         	movff	?___fttol+2,printf@val+2
  1718  001574  C02E  F09B         	movff	?___fttol+3,printf@val+3
  1719                           
  1720                           ;doprnt.c: 1132: fval -= (double)val;
  1721  001578  C09C  F03A         	movff	printf@fval,___ftsub@f1
  1722  00157C  C09D  F03B         	movff	printf@fval+1,___ftsub@f1+1
  1723  001580  C09E  F03C         	movff	printf@fval+2,___ftsub@f1+2
  1724  001584  C098  F009         	movff	printf@val,___lltoft@c
  1725  001588  C099  F00A         	movff	printf@val+1,___lltoft@c+1
  1726  00158C  C09A  F00B         	movff	printf@val+2,___lltoft@c+2
  1727  001590  C09B  F00C         	movff	printf@val+3,___lltoft@c+3
  1728  001594  ECF8  F014         	call	___lltoft	;wreg free
  1729  001598  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1730  00159C  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1731  0015A0  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1732  0015A4  EC74  F015         	call	___ftsub	;wreg free
  1733  0015A8  C03A  F09C         	movff	?___ftsub,printf@fval
  1734  0015AC  C03B  F09D         	movff	?___ftsub+1,printf@fval+1
  1735  0015B0  C03C  F09E         	movff	?___ftsub+2,printf@fval+2
  1736                           
  1737                           ;doprnt.c: 1133: exp = 0;
  1738  0015B4  0E00               	movlw	0
  1739  0015B6  0100               	movlb	0	; () banked
  1740  0015B8  6F93               	movwf	(printf@exp+1)& (0+255),b
  1741  0015BA  0E00               	movlw	0
  1742  0015BC  6F92               	movwf	printf@exp& (0+255),b
  1743  0015BE                     l143:
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;doprnt.c: 1134: }
  1747                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1748                           
  1749                           ; BSR set to: 0
  1750  0015BE  0E01               	movlw	1
  1751  0015C0  6FA1               	movwf	printf@c& (0+255),b
  1752  0015C2                     l2399:
  1753                           
  1754                           ; BSR set to: 0
  1755  0015C2  0E0A               	movlw	10
  1756  0015C4  19A1               	xorwf	printf@c& (0+255),w,b
  1757  0015C6  B4D8               	btfsc	status,2,c
  1758  0015C8  D01B               	goto	u2690
  1759                           
  1760                           ; BSR set to: 0
  1761                           ;doprnt.c: 1137: if(val < dpowers[c])
  1762                           
  1763                           ; BSR set to: 0
  1764                           
  1765                           ; BSR set to: 0
  1766  0015CA  51A1               	movf	printf@c& (0+255),w,b
  1767  0015CC  0D04               	mullw	4
  1768  0015CE  0E01               	movlw	low _dpowers
  1769  0015D0  24F3               	addwf	prodl,w,c
  1770  0015D2  6EF6               	movwf	tblptrl,c
  1771  0015D4  0E10               	movlw	high _dpowers
  1772  0015D6  20F4               	addwfc	prodh,w,c
  1773  0015D8  6EF7               	movwf	tblptrh,c
  1774  0015DA                     	if	1	;There are 3 active tblptr bytes
  1775  0015DA  6AF8               	clrf	tblptru,c
  1776  0015DC  0E00               	movlw	low (__mediumconst shr (0+16))
  1777  0015DE  22F8               	addwfc	tblptru,f,c
  1778  0015E0                     	endif
  1779  0015E0  0009               	tblrd		*+
  1780  0015E2  50F5               	movf	tablat,w,c
  1781  0015E4  5D98               	subwf	printf@val& (0+255),w,b
  1782  0015E6  0009               	tblrd		*+
  1783  0015E8  50F5               	movf	tablat,w,c
  1784  0015EA  5999               	subwfb	(printf@val+1)& (0+255),w,b
  1785  0015EC  0009               	tblrd		*+
  1786  0015EE  50F5               	movf	tablat,w,c
  1787  0015F0  599A               	subwfb	(printf@val+2)& (0+255),w,b
  1788  0015F2  0009               	tblrd		*+
  1789  0015F4  50F5               	movf	tablat,w,c
  1790  0015F6  599B               	subwfb	(printf@val+3)& (0+255),w,b
  1791  0015F8  A0D8               	btfss	status,0,c
  1792  0015FA  D002               	goto	u2690
  1793                           
  1794                           ; BSR set to: 0
  1795                           
  1796                           ; BSR set to: 0
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;doprnt.c: 1138: break;
  1800  0015FC  2BA1               	incf	printf@c& (0+255),f,b
  1801  0015FE  D7E1               	goto	l2399
  1802  001600                     u2690:
  1803                           
  1804                           ; BSR set to: 0
  1805                           ;doprnt.c: 1175: {
  1806                           ;doprnt.c: 1188: if(flag & 0x03)
  1807                           
  1808                           ; BSR set to: 0
  1809  001600  0E03               	movlw	3
  1810  001602  1590               	andwf	printf@flag& (0+255),w,b
  1811  001604  6E49               	movwf	??_printf& (0+255),c
  1812  001606  0E00               	movlw	0
  1813  001608  1591               	andwf	(printf@flag+1)& (0+255),w,b
  1814  00160A  6E4A               	movwf	(??_printf+1)& (0+255),c
  1815  00160C  5049               	movf	??_printf,w,c
  1816  00160E  104A               	iorwf	??_printf+1,w,c
  1817  001610  B4D8               	btfsc	status,2,c
  1818  001612  D04D               	goto	l148
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;doprnt.c: 1190: (putch('-') );
  1822  001614  0E2D               	movlw	45
  1823  001616  ECEC  F015         	call	_putch
  1824                           
  1825                           ;doprnt.c: 1195: }
  1826                           ;doprnt.c: 1196: while(c--) {
  1827  00161A  D049               	goto	l148
  1828  00161C                     
  1829                           ;doprnt.c: 1200: {
  1830                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1831  00161C  C098  F001         	movff	printf@val,___lldiv@dividend
  1832  001620  C099  F002         	movff	printf@val+1,___lldiv@dividend+1
  1833  001624  C09A  F003         	movff	printf@val+2,___lldiv@dividend+2
  1834  001628  C09B  F004         	movff	printf@val+3,___lldiv@dividend+3
  1835  00162C  0100               	movlb	0	; () banked
  1836  00162E  51A1               	movf	printf@c& (0+255),w,b
  1837  001630  0D04               	mullw	4
  1838  001632  0E01               	movlw	low _dpowers
  1839  001634  24F3               	addwf	prodl,w,c
  1840  001636  6EF6               	movwf	tblptrl,c
  1841  001638  0E10               	movlw	high _dpowers
  1842  00163A  20F4               	addwfc	prodh,w,c
  1843  00163C  6EF7               	movwf	tblptrh,c
  1844  00163E                     	if	1	;There are 3 active tblptr bytes
  1845  00163E  6AF8               	clrf	tblptru,c
  1846  001640  0E00               	movlw	low (__mediumconst shr (0+16))
  1847  001642  22F8               	addwfc	tblptru,f,c
  1848  001644                     	endif
  1849  001644  0009               	tblrd		*+
  1850  001646  CFF5 F005          	movff	tablat,___lldiv@divisor
  1851  00164A  0009               	tblrd		*+
  1852  00164C  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1853  001650  0009               	tblrd		*+
  1854  001652  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1855  001656  000A               	tblrd		*-
  1856  001658  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1857  00165C  EC4C  F014         	call	___lldiv	;wreg free
  1858  001660  C001  F094         	movff	?___lldiv,printf@tmpval
  1859  001664  C002  F095         	movff	?___lldiv+1,printf@tmpval+1
  1860  001668  C003  F096         	movff	?___lldiv+2,printf@tmpval+2
  1861  00166C  C004  F097         	movff	?___lldiv+3,printf@tmpval+3
  1862                           
  1863                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1864  001670  C094  F00E         	movff	printf@tmpval,___llmod@dividend
  1865  001674  C095  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  1866  001678  C096  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  1867  00167C  C097  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  1868  001680  0E0A               	movlw	10
  1869  001682  6E12               	movwf	___llmod@divisor,c
  1870  001684  0E00               	movlw	0
  1871  001686  6E13               	movwf	___llmod@divisor+1,c
  1872  001688  0E00               	movlw	0
  1873  00168A  6E14               	movwf	___llmod@divisor+2,c
  1874  00168C  0E00               	movlw	0
  1875  00168E  6E15               	movwf	___llmod@divisor+3,c
  1876  001690  ECC5  F014         	call	___llmod	;wreg free
  1877  001694  C00E  F094         	movff	?___llmod,printf@tmpval
  1878  001698  C00F  F095         	movff	?___llmod+1,printf@tmpval+1
  1879  00169C  C010  F096         	movff	?___llmod+2,printf@tmpval+2
  1880  0016A0  C011  F097         	movff	?___llmod+3,printf@tmpval+3
  1881                           
  1882                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  1883  0016A4  0100               	movlb	0	; () banked
  1884  0016A6  5194               	movf	printf@tmpval& (0+255),w,b
  1885  0016A8  0F30               	addlw	48
  1886  0016AA  ECEC  F015         	call	_putch
  1887  0016AE                     l148:
  1888  0016AE  0100               	movlb	0	; () banked
  1889  0016B0  07A1               	decf	printf@c& (0+255),f,b
  1890  0016B2  29A1               	incf	printf@c& (0+255),w,b
  1891  0016B4  B4D8               	btfsc	status,2,c
  1892  0016B6  D008               	goto	l151
  1893  0016B8  D7B1               	goto	l149
  1894  0016BA                     l2423:
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;doprnt.c: 1208: (putch('0') );
  1898  0016BA  0E30               	movlw	48
  1899  0016BC  ECEC  F015         	call	_putch
  1900                           
  1901                           ;doprnt.c: 1209: exp--;
  1902  0016C0  0100               	movlb	0	; () banked
  1903  0016C2  0792               	decf	printf@exp& (0+255),f,b
  1904  0016C4  A0D8               	btfss	status,0,c
  1905  0016C6  0793               	decf	(printf@exp+1)& (0+255),f,b
  1906  0016C8                     l151:
  1907                           
  1908                           ; BSR set to: 0
  1909                           
  1910                           ; BSR set to: 0
  1911  0016C8  BF93               	btfsc	(printf@exp+1)& (0+255),7,b
  1912  0016CA  D005               	goto	u2720
  1913  0016CC  5193               	movf	(printf@exp+1)& (0+255),w,b
  1914  0016CE  E1F5               	bnz	l2423
  1915  0016D0  0592               	decf	printf@exp& (0+255),w,b
  1916  0016D2  B0D8               	btfsc	status,0,c
  1917  0016D4  D7F2               	goto	l152
  1918  0016D6                     u2720:
  1919                           
  1920                           ; BSR set to: 0
  1921                           ;doprnt.c: 1210: }
  1922                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1923                           
  1924                           ; BSR set to: 0
  1925  0016D6  BFA0               	btfsc	(printf@prec+1)& (0+255),7,b
  1926  0016D8  D009               	goto	l154
  1927  0016DA  51A0               	movf	(printf@prec+1)& (0+255),w,b
  1928  0016DC  E104               	bnz	u2730
  1929  0016DE  0E09               	movlw	9
  1930  0016E0  5D9F               	subwf	printf@prec& (0+255),w,b
  1931  0016E2  A0D8               	btfss	status,0,c
  1932  0016E4  D003               	goto	l154
  1933  0016E6                     u2730:
  1934                           
  1935                           ; BSR set to: 0
  1936                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1937  0016E6  0E08               	movlw	8
  1938  0016E8  6FA1               	movwf	printf@c& (0+255),b
  1939  0016EA  D002               	goto	l155
  1940  0016EC                     l154:
  1941                           
  1942                           ; BSR set to: 0
  1943                           ;doprnt.c: 1213: else
  1944                           ;doprnt.c: 1214: c = prec;
  1945  0016EC  C09F  F0A1         	movff	printf@prec,printf@c
  1946  0016F0                     l155:
  1947                           
  1948                           ; BSR set to: 0
  1949                           ;doprnt.c: 1215: prec -= c;
  1950                           
  1951                           ; BSR set to: 0
  1952  0016F0  51A1               	movf	printf@c& (0+255),w,b
  1953  0016F2  5F9F               	subwf	printf@prec& (0+255),f,b
  1954  0016F4  0E00               	movlw	0
  1955  0016F6  BFA1               	btfsc	printf@c& (0+255),7,b
  1956  0016F8  0EFF               	movlw	255
  1957  0016FA  5BA0               	subwfb	(printf@prec+1)& (0+255),f,b
  1958                           
  1959                           ; BSR set to: 0
  1960                           ;doprnt.c: 1219: if(c)
  1961  0016FC  51A1               	movf	printf@c& (0+255),w,b
  1962  0016FE  B4D8               	btfsc	status,2,c
  1963  001700  D003               	goto	l156
  1964                           
  1965                           ; BSR set to: 0
  1966                           ;doprnt.c: 1221: (putch('.') );
  1967  001702  0E2E               	movlw	46
  1968  001704  ECEC  F015         	call	_putch
  1969  001708                     l156:
  1970                           
  1971                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1972  001708  0100               	movlb	0	; () banked
  1973  00170A  51A1               	movf	printf@c& (0+255),w,b
  1974  00170C  EC11  F00D         	call	_scale
  1975  001710  C024  F087         	movff	?_scale,_printf$809
  1976  001714  C025  F088         	movff	?_scale+1,_printf$809+1
  1977  001718  C026  F089         	movff	?_scale+2,_printf$809+2
  1978                           
  1979                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1980  00171C  C09C  F018         	movff	printf@fval,___ftmul@f2
  1981  001720  C09D  F019         	movff	printf@fval+1,___ftmul@f2+1
  1982  001724  C09E  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1983  001728  C087  F015         	movff	_printf$809,___ftmul@f1
  1984  00172C  C088  F016         	movff	_printf$809+1,___ftmul@f1+1
  1985  001730  C089  F017         	movff	_printf$809+2,___ftmul@f1+2
  1986  001734  EC77  F012         	call	___ftmul	;wreg free
  1987  001738  C015  F02B         	movff	?___ftmul,___fttol@f1
  1988  00173C  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  1989  001740  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  1990  001744  ECF1  F012         	call	___fttol	;wreg free
  1991  001748  C02B  F098         	movff	?___fttol,printf@val
  1992  00174C  C02C  F099         	movff	?___fttol+1,printf@val+1
  1993  001750  C02D  F09A         	movff	?___fttol+2,printf@val+2
  1994  001754  C02E  F09B         	movff	?___fttol+3,printf@val+3
  1995                           
  1996                           ;doprnt.c: 1228: while(c--) {
  1997  001758  D073               	goto	l157
  1998  00175A                     
  1999                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2000  00175A  C098  F001         	movff	printf@val,___lldiv@dividend
  2001  00175E  C099  F002         	movff	printf@val+1,___lldiv@dividend+1
  2002  001762  C09A  F003         	movff	printf@val+2,___lldiv@dividend+2
  2003  001766  C09B  F004         	movff	printf@val+3,___lldiv@dividend+3
  2004  00176A  0100               	movlb	0	; () banked
  2005  00176C  51A1               	movf	printf@c& (0+255),w,b
  2006  00176E  0D04               	mullw	4
  2007  001770  0E01               	movlw	low _dpowers
  2008  001772  24F3               	addwf	prodl,w,c
  2009  001774  6EF6               	movwf	tblptrl,c
  2010  001776  0E10               	movlw	high _dpowers
  2011  001778  20F4               	addwfc	prodh,w,c
  2012  00177A  6EF7               	movwf	tblptrh,c
  2013  00177C                     	if	1	;There are 3 active tblptr bytes
  2014  00177C  6AF8               	clrf	tblptru,c
  2015  00177E  0E00               	movlw	low (__mediumconst shr (0+16))
  2016  001780  22F8               	addwfc	tblptru,f,c
  2017  001782                     	endif
  2018  001782  0009               	tblrd		*+
  2019  001784  CFF5 F005          	movff	tablat,___lldiv@divisor
  2020  001788  0009               	tblrd		*+
  2021  00178A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2022  00178E  0009               	tblrd		*+
  2023  001790  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2024  001794  000A               	tblrd		*-
  2025  001796  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2026  00179A  EC4C  F014         	call	___lldiv	;wreg free
  2027  00179E  C001  F094         	movff	?___lldiv,printf@tmpval
  2028  0017A2  C002  F095         	movff	?___lldiv+1,printf@tmpval+1
  2029  0017A6  C003  F096         	movff	?___lldiv+2,printf@tmpval+2
  2030  0017AA  C004  F097         	movff	?___lldiv+3,printf@tmpval+3
  2031                           
  2032                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2033  0017AE  C094  F00E         	movff	printf@tmpval,___llmod@dividend
  2034  0017B2  C095  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  2035  0017B6  C096  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  2036  0017BA  C097  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  2037  0017BE  0E0A               	movlw	10
  2038  0017C0  6E12               	movwf	___llmod@divisor,c
  2039  0017C2  0E00               	movlw	0
  2040  0017C4  6E13               	movwf	___llmod@divisor+1,c
  2041  0017C6  0E00               	movlw	0
  2042  0017C8  6E14               	movwf	___llmod@divisor+2,c
  2043  0017CA  0E00               	movlw	0
  2044  0017CC  6E15               	movwf	___llmod@divisor+3,c
  2045  0017CE  ECC5  F014         	call	___llmod	;wreg free
  2046  0017D2  C00E  F094         	movff	?___llmod,printf@tmpval
  2047  0017D6  C00F  F095         	movff	?___llmod+1,printf@tmpval+1
  2048  0017DA  C010  F096         	movff	?___llmod+2,printf@tmpval+2
  2049  0017DE  C011  F097         	movff	?___llmod+3,printf@tmpval+3
  2050                           
  2051                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  2052  0017E2  0100               	movlb	0	; () banked
  2053  0017E4  5194               	movf	printf@tmpval& (0+255),w,b
  2054  0017E6  0F30               	addlw	48
  2055  0017E8  ECEC  F015         	call	_putch
  2056                           
  2057                           ;doprnt.c: 1232: val %= dpowers[c];
  2058  0017EC  C098  F00E         	movff	printf@val,___llmod@dividend
  2059  0017F0  C099  F00F         	movff	printf@val+1,___llmod@dividend+1
  2060  0017F4  C09A  F010         	movff	printf@val+2,___llmod@dividend+2
  2061  0017F8  C09B  F011         	movff	printf@val+3,___llmod@dividend+3
  2062  0017FC  0100               	movlb	0	; () banked
  2063  0017FE  51A1               	movf	printf@c& (0+255),w,b
  2064  001800  0D04               	mullw	4
  2065  001802  0E01               	movlw	low _dpowers
  2066  001804  24F3               	addwf	prodl,w,c
  2067  001806  6EF6               	movwf	tblptrl,c
  2068  001808  0E10               	movlw	high _dpowers
  2069  00180A  20F4               	addwfc	prodh,w,c
  2070  00180C  6EF7               	movwf	tblptrh,c
  2071  00180E                     	if	1	;There are 3 active tblptr bytes
  2072  00180E  6AF8               	clrf	tblptru,c
  2073  001810  0E00               	movlw	low (__mediumconst shr (0+16))
  2074  001812  22F8               	addwfc	tblptru,f,c
  2075  001814                     	endif
  2076  001814  0009               	tblrd		*+
  2077  001816  CFF5 F012          	movff	tablat,___llmod@divisor
  2078  00181A  0009               	tblrd		*+
  2079  00181C  CFF5 F013          	movff	tablat,___llmod@divisor+1
  2080  001820  0009               	tblrd		*+
  2081  001822  CFF5 F014          	movff	tablat,___llmod@divisor+2
  2082  001826  000A               	tblrd		*-
  2083  001828  CFF5 F015          	movff	tablat,___llmod@divisor+3
  2084  00182C  ECC5  F014         	call	___llmod	;wreg free
  2085  001830  C00E  F098         	movff	?___llmod,printf@val
  2086  001834  C00F  F099         	movff	?___llmod+1,printf@val+1
  2087  001838  C010  F09A         	movff	?___llmod+2,printf@val+2
  2088  00183C  C011  F09B         	movff	?___llmod+3,printf@val+3
  2089  001840                     l157:
  2090  001840  0100               	movlb	0	; () banked
  2091  001842  07A1               	decf	printf@c& (0+255),f,b
  2092  001844  29A1               	incf	printf@c& (0+255),w,b
  2093  001846  B4D8               	btfsc	status,2,c
  2094  001848  D008               	goto	l160
  2095  00184A  D787               	goto	l158
  2096  00184C                     
  2097                           ; BSR set to: 0
  2098                           ;doprnt.c: 1236: (putch('0') );
  2099                           
  2100                           ; BSR set to: 0
  2101  00184C  0E30               	movlw	48
  2102  00184E  ECEC  F015         	call	_putch
  2103                           
  2104                           ;doprnt.c: 1237: prec--;
  2105  001852  0100               	movlb	0	; () banked
  2106  001854  079F               	decf	printf@prec& (0+255),f,b
  2107  001856  A0D8               	btfss	status,0,c
  2108  001858  07A0               	decf	(printf@prec+1)& (0+255),f,b
  2109  00185A                     l160:
  2110                           
  2111                           ; BSR set to: 0
  2112                           
  2113                           ; BSR set to: 0
  2114  00185A  519F               	movf	printf@prec& (0+255),w,b
  2115  00185C  11A0               	iorwf	(printf@prec+1)& (0+255),w,b
  2116  00185E  B4D8               	btfsc	status,2,c
  2117  001860  D0C2               	goto	u2860
  2118  001862  D7F4               	goto	l161
  2119  001864                     l125:
  2120                           
  2121                           ; BSR set to: 0
  2122                           ;doprnt.c: 1246: }
  2123                           ;doprnt.c: 1253: {
  2124                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2125                           
  2126                           ; BSR set to: 0
  2127  001864  C08E  FFD9         	movff	printf@ap,fsr2l
  2128  001868  C08F  FFDA         	movff	printf@ap+1,fsr2h
  2129  00186C  CFDE F098          	movff	postinc2,printf@val
  2130  001870  CFDD F099          	movff	postdec2,printf@val+1
  2131  001874  0E00               	movlw	0
  2132  001876  BF99               	btfsc	(printf@val+1)& (0+255),7,b
  2133  001878  0EFF               	movlw	-1
  2134  00187A  6F9A               	movwf	(printf@val+2)& (0+255),b
  2135  00187C  6F9B               	movwf	(printf@val+3)& (0+255),b
  2136                           
  2137                           ; BSR set to: 0
  2138  00187E  0E02               	movlw	2
  2139  001880  278E               	addwf	printf@ap& (0+255),f,b
  2140  001882  0E00               	movlw	0
  2141  001884  238F               	addwfc	(printf@ap+1)& (0+255),f,b
  2142                           
  2143                           ; BSR set to: 0
  2144                           ;doprnt.c: 1261: if((long)val < 0) {
  2145  001886  AF9B               	btfss	(printf@val+3)& (0+255),7,b
  2146  001888  D00A               	goto	l163
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;doprnt.c: 1262: flag |= 0x03;
  2150  00188A  0E03               	movlw	3
  2151  00188C  1390               	iorwf	printf@flag& (0+255),f,b
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;doprnt.c: 1263: val = -val;
  2155  00188E  1F9B               	comf	(printf@val+3)& (0+255),f,b
  2156  001890  1F9A               	comf	(printf@val+2)& (0+255),f,b
  2157  001892  1F99               	comf	(printf@val+1)& (0+255),f,b
  2158  001894  6D98               	negf	printf@val& (0+255),b
  2159  001896  0E00               	movlw	0
  2160  001898  2399               	addwfc	(printf@val+1)& (0+255),f,b
  2161  00189A  239A               	addwfc	(printf@val+2)& (0+255),f,b
  2162  00189C  239B               	addwfc	(printf@val+3)& (0+255),f,b
  2163  00189E                     l163:
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;doprnt.c: 1264: }
  2167                           ;doprnt.c: 1266: }
  2168                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2169                           
  2170                           ; BSR set to: 0
  2171  00189E  519F               	movf	printf@prec& (0+255),w,b
  2172  0018A0  11A0               	iorwf	(printf@prec+1)& (0+255),w,b
  2173  0018A2  A4D8               	btfss	status,2,c
  2174  0018A4  D008               	goto	l164
  2175                           
  2176                           ; BSR set to: 0
  2177  0018A6  5198               	movf	printf@val& (0+255),w,b
  2178  0018A8  1199               	iorwf	(printf@val+1)& (0+255),w,b
  2179  0018AA  119A               	iorwf	(printf@val+2)& (0+255),w,b
  2180  0018AC  119B               	iorwf	(printf@val+3)& (0+255),w,b
  2181  0018AE  A4D8               	btfss	status,2,c
  2182  0018B0  D002               	goto	l164
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;doprnt.c: 1291: prec++;
  2186  0018B2  4B9F               	infsnz	printf@prec& (0+255),f,b
  2187  0018B4  2BA0               	incf	(printf@prec+1)& (0+255),f,b
  2188  0018B6                     l164:
  2189                           
  2190                           ; BSR set to: 0
  2191                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2192                           
  2193                           ; BSR set to: 0
  2194  0018B6  0E01               	movlw	1
  2195  0018B8  6FA1               	movwf	printf@c& (0+255),b
  2196  0018BA                     l2475:
  2197                           
  2198                           ; BSR set to: 0
  2199  0018BA  0E0A               	movlw	10
  2200  0018BC  19A1               	xorwf	printf@c& (0+255),w,b
  2201  0018BE  B4D8               	btfsc	status,2,c
  2202  0018C0  D01B               	goto	u2820
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;doprnt.c: 1306: if(val < dpowers[c])
  2206                           
  2207                           ; BSR set to: 0
  2208                           
  2209                           ; BSR set to: 0
  2210  0018C2  51A1               	movf	printf@c& (0+255),w,b
  2211  0018C4  0D04               	mullw	4
  2212  0018C6  0E01               	movlw	low _dpowers
  2213  0018C8  24F3               	addwf	prodl,w,c
  2214  0018CA  6EF6               	movwf	tblptrl,c
  2215  0018CC  0E10               	movlw	high _dpowers
  2216  0018CE  20F4               	addwfc	prodh,w,c
  2217  0018D0  6EF7               	movwf	tblptrh,c
  2218  0018D2                     	if	1	;There are 3 active tblptr bytes
  2219  0018D2  6AF8               	clrf	tblptru,c
  2220  0018D4  0E00               	movlw	low (__mediumconst shr (0+16))
  2221  0018D6  22F8               	addwfc	tblptru,f,c
  2222  0018D8                     	endif
  2223  0018D8  0009               	tblrd		*+
  2224  0018DA  50F5               	movf	tablat,w,c
  2225  0018DC  5D98               	subwf	printf@val& (0+255),w,b
  2226  0018DE  0009               	tblrd		*+
  2227  0018E0  50F5               	movf	tablat,w,c
  2228  0018E2  5999               	subwfb	(printf@val+1)& (0+255),w,b
  2229  0018E4  0009               	tblrd		*+
  2230  0018E6  50F5               	movf	tablat,w,c
  2231  0018E8  599A               	subwfb	(printf@val+2)& (0+255),w,b
  2232  0018EA  0009               	tblrd		*+
  2233  0018EC  50F5               	movf	tablat,w,c
  2234  0018EE  599B               	subwfb	(printf@val+3)& (0+255),w,b
  2235  0018F0  A0D8               	btfss	status,0,c
  2236  0018F2  D002               	goto	u2820
  2237                           
  2238                           ; BSR set to: 0
  2239                           
  2240                           ; BSR set to: 0
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;doprnt.c: 1307: break;
  2244  0018F4  2BA1               	incf	printf@c& (0+255),f,b
  2245  0018F6  D7E1               	goto	l2475
  2246  0018F8                     u2820:
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;doprnt.c: 1339: if(c < prec)
  2250                           
  2251                           ; BSR set to: 0
  2252  0018F8  0E80               	movlw	128
  2253  0018FA  BFA1               	btfsc	printf@c& (0+255),7,b
  2254  0018FC  0E7F               	movlw	127
  2255  0018FE  6E49               	movwf	??_printf& (0+255),c
  2256  001900  519F               	movf	printf@prec& (0+255),w,b
  2257  001902  5DA1               	subwf	printf@c& (0+255),w,b
  2258  001904  51A0               	movf	(printf@prec+1)& (0+255),w,b
  2259  001906  0A80               	xorlw	128
  2260  001908  5849               	subwfb	??_printf& (0+255),w,c
  2261  00190A  B0D8               	btfsc	status,0,c
  2262  00190C  D003               	goto	l168
  2263                           
  2264                           ; BSR set to: 0
  2265                           ;doprnt.c: 1340: c = prec;
  2266  00190E  C09F  F0A1         	movff	printf@prec,printf@c
  2267  001912  D010               	goto	l170
  2268  001914                     l168:
  2269                           
  2270                           ; BSR set to: 0
  2271                           ;doprnt.c: 1341: else if(prec < c)
  2272                           
  2273                           ; BSR set to: 0
  2274  001914  51A0               	movf	(printf@prec+1)& (0+255),w,b
  2275  001916  0A80               	xorlw	128
  2276  001918  6E49               	movwf	??_printf& (0+255),c
  2277  00191A  51A1               	movf	printf@c& (0+255),w,b
  2278  00191C  5D9F               	subwf	printf@prec& (0+255),w,b
  2279  00191E  0E80               	movlw	128
  2280  001920  BFA1               	btfsc	printf@c& (0+255),7,b
  2281  001922  0E7F               	movlw	127
  2282  001924  5849               	subwfb	??_printf& (0+255),w,c
  2283  001926  B0D8               	btfsc	status,0,c
  2284  001928  D005               	goto	l170
  2285                           
  2286                           ; BSR set to: 0
  2287                           ;doprnt.c: 1342: prec = c;
  2288  00192A  51A1               	movf	printf@c& (0+255),w,b
  2289  00192C  6F9F               	movwf	printf@prec& (0+255),b
  2290  00192E  6BA0               	clrf	(printf@prec+1)& (0+255),b
  2291  001930  BF9F               	btfsc	printf@prec& (0+255),7,b
  2292  001932  07A0               	decf	(printf@prec+1)& (0+255),f,b
  2293  001934                     l170:
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;doprnt.c: 1422: {
  2297                           ;doprnt.c: 1438: if(flag & 0x03)
  2298                           
  2299                           ; BSR set to: 0
  2300                           
  2301                           ; BSR set to: 0
  2302  001934  0E03               	movlw	3
  2303  001936  1590               	andwf	printf@flag& (0+255),w,b
  2304  001938  6E49               	movwf	??_printf& (0+255),c
  2305  00193A  0E00               	movlw	0
  2306  00193C  1591               	andwf	(printf@flag+1)& (0+255),w,b
  2307  00193E  6E4A               	movwf	(??_printf+1)& (0+255),c
  2308  001940  5049               	movf	??_printf,w,c
  2309  001942  104A               	iorwf	??_printf+1,w,c
  2310  001944  B4D8               	btfsc	status,2,c
  2311  001946  D046               	goto	l172
  2312                           
  2313                           ; BSR set to: 0
  2314                           ;doprnt.c: 1439: (putch('-') );
  2315  001948  0E2D               	movlw	45
  2316  00194A  ECEC  F015         	call	_putch
  2317                           
  2318                           ;doprnt.c: 1469: }
  2319                           ;doprnt.c: 1474: while(prec--) {
  2320  00194E  D042               	goto	l172
  2321  001950                     l2499:
  2322                           
  2323                           ;doprnt.c: 1478: {
  2324                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2325  001950  C09F  F049         	movff	printf@prec,??_printf
  2326  001954  C0A0  F04A         	movff	printf@prec+1,??_printf+1
  2327  001958  90D8               	bcf	status,0,c
  2328  00195A  3649               	rlcf	??_printf,f,c
  2329  00195C  364A               	rlcf	??_printf+1,f,c
  2330  00195E  90D8               	bcf	status,0,c
  2331  001960  3649               	rlcf	??_printf,f,c
  2332  001962  364A               	rlcf	??_printf+1,f,c
  2333  001964  0E01               	movlw	low _dpowers
  2334  001966  2449               	addwf	??_printf,w,c
  2335  001968  6EF6               	movwf	tblptrl,c
  2336  00196A  0E10               	movlw	high _dpowers
  2337  00196C  204A               	addwfc	??_printf+1,w,c
  2338  00196E  6EF7               	movwf	tblptrh,c
  2339  001970                     	if	1	;There are 3 active tblptr bytes
  2340  001970  6AF8               	clrf	tblptru,c
  2341  001972  0E00               	movlw	low (__mediumconst shr (0+16))
  2342  001974  22F8               	addwfc	tblptru,f,c
  2343  001976                     	endif
  2344  001976  0009               	tblrd		*+
  2345  001978  CFF5 F005          	movff	tablat,___lldiv@divisor
  2346  00197C  0009               	tblrd		*+
  2347  00197E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2348  001982  0009               	tblrd		*+
  2349  001984  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2350  001988  000A               	tblrd		*-
  2351  00198A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2352  00198E  C098  F001         	movff	printf@val,___lldiv@dividend
  2353  001992  C099  F002         	movff	printf@val+1,___lldiv@dividend+1
  2354  001996  C09A  F003         	movff	printf@val+2,___lldiv@dividend+2
  2355  00199A  C09B  F004         	movff	printf@val+3,___lldiv@dividend+3
  2356  00199E  EC4C  F014         	call	___lldiv	;wreg free
  2357  0019A2  C001  F00E         	movff	?___lldiv,___llmod@dividend
  2358  0019A6  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  2359  0019AA  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  2360  0019AE  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  2361  0019B2  0E0A               	movlw	10
  2362  0019B4  6E12               	movwf	___llmod@divisor,c
  2363  0019B6  0E00               	movlw	0
  2364  0019B8  6E13               	movwf	___llmod@divisor+1,c
  2365  0019BA  0E00               	movlw	0
  2366  0019BC  6E14               	movwf	___llmod@divisor+2,c
  2367  0019BE  0E00               	movlw	0
  2368  0019C0  6E15               	movwf	___llmod@divisor+3,c
  2369  0019C2  ECC5  F014         	call	___llmod	;wreg free
  2370  0019C6  500E               	movf	?___llmod,w,c
  2371  0019C8  0F30               	addlw	48
  2372  0019CA  0100               	movlb	0	; () banked
  2373  0019CC  6FA1               	movwf	printf@c& (0+255),b
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;doprnt.c: 1523: }
  2377                           ;doprnt.c: 1524: (putch(c) );
  2378  0019CE  51A1               	movf	printf@c& (0+255),w,b
  2379  0019D0  ECEC  F015         	call	_putch
  2380  0019D4                     l172:
  2381  0019D4  0100               	movlb	0	; () banked
  2382  0019D6  079F               	decf	printf@prec& (0+255),f,b
  2383  0019D8  A0D8               	btfss	status,0,c
  2384  0019DA  07A0               	decf	(printf@prec+1)& (0+255),f,b
  2385  0019DC  299F               	incf	printf@prec& (0+255),w,b
  2386  0019DE  E1B8               	bnz	l2499
  2387  0019E0  29A0               	incf	(printf@prec+1)& (0+255),w,b
  2388  0019E2  A4D8               	btfss	status,2,c
  2389  0019E4  D7B5               	goto	l173
  2390  0019E6                     u2860:
  2391                           
  2392                           ; BSR set to: 0
  2393                           
  2394                           ; BSR set to: 0
  2395  0019E6  5040               	movf	printf@f,w,c
  2396  0019E8  6E49               	movwf	??_printf& (0+255),c
  2397  0019EA  5041               	movf	printf@f+1,w,c
  2398  0019EC  6E4A               	movwf	(??_printf+1)& (0+255),c
  2399  0019EE  4A40               	infsnz	printf@f,f,c
  2400  0019F0  2A41               	incf	printf@f+1,f,c
  2401  0019F2  C049  FFF6         	movff	??_printf,tblptrl
  2402  0019F6  C04A  FFF7         	movff	??_printf+1,tblptrh
  2403  0019FA  0E00               	movlw	low (__smallconst shr (0+16))
  2404  0019FC  6EF8               	movwf	tblptru,c
  2405  0019FE  0E0F               	movlw	(high __ramtop+-1)
  2406  001A00  64F7               	cpfsgt	tblptrh,c
  2407  001A02  D003               	bra	u2877
  2408  001A04  0008               	tblrd		*
  2409  001A06  50F5               	movf	tablat,w,c
  2410  001A08  D005               	bra	u2870
  2411  001A0A                     u2877:
  2412  001A0A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2413  001A0E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2414  001A12  50EF               	movf	indf0,w,c
  2415  001A14                     u2870:
  2416  001A14  0100               	movlb	0	; () banked
  2417  001A16  6FA1               	movwf	printf@c& (0+255),b
  2418  001A18  51A1               	movf	printf@c& (0+255),w,b
  2419  001A1A  B4D8               	btfsc	status,2,c
  2420  001A1C  0012               	return	
  2421  001A1E  EF56  F008         	goto	l99
  2422  001A22                     __end_of_printf:
  2423                           	opt stack 0
  2424                           tblptru	equ	0xFF8
  2425                           tblptrh	equ	0xFF7
  2426                           tblptrl	equ	0xFF6
  2427                           tablat	equ	0xFF5
  2428                           prodh	equ	0xFF4
  2429                           prodl	equ	0xFF3
  2430                           indf0	equ	0xFEF
  2431                           postinc0	equ	0xFEE
  2432                           fsr0h	equ	0xFEA
  2433                           fsr0l	equ	0xFE9
  2434                           wreg	equ	0xFE8
  2435                           postdec1	equ	0xFE5
  2436                           fsr1l	equ	0xFE1
  2437                           indf2	equ	0xFDF
  2438                           postinc2	equ	0xFDE
  2439                           postdec2	equ	0xFDD
  2440                           fsr2h	equ	0xFDA
  2441                           fsr2l	equ	0xFD9
  2442                           status	equ	0xFD8
  2443                           
  2444 ;; *************** function _scale *****************
  2445 ;; Defined at:
  2446 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2447 ;; Parameters:    Size  Location     Type
  2448 ;;  scl             1    wreg     char 
  2449 ;; Auto vars:     Size  Location     Type
  2450 ;;  scl             1   41[COMRAM] char 
  2451 ;; Return value:  Size  Location     Type
  2452 ;;                  3   35[COMRAM] char 
  2453 ;; Registers used:
  2454 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2455 ;; Tracked objects:
  2456 ;;		On entry : 0/0
  2457 ;;		On exit  : 0/0
  2458 ;;		Unchanged: 0/0
  2459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2460 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2461 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2463 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2464 ;;Total ram usage:        7 bytes
  2465 ;; Hardware stack levels used:    1
  2466 ;; Hardware stack levels required when called:    2
  2467 ;; This function calls:
  2468 ;;		___awdiv
  2469 ;;		___awmod
  2470 ;;		___ftmul
  2471 ;;		___wmul
  2472 ;; This function is called by:
  2473 ;;		_printf
  2474 ;; This function uses a non-reentrant model
  2475 ;;
  2476                           
  2477                           	psect	text2
  2478  001A22                     __ptext2:
  2479                           	opt stack 0
  2480  001A22                     _scale:
  2481                           	opt stack 27
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;incstack = 0
  2485                           ;scale@scl stored from wreg
  2486  001A22  6E2A               	movwf	scale@scl,c
  2487                           
  2488                           ;doprnt.c: 428: if(scl < 0) {
  2489  001A24  AE2A               	btfss	scale@scl,7,c
  2490  001A26  D113               	goto	l88
  2491                           
  2492                           ;doprnt.c: 429: scl = -scl;
  2493  001A28  6C2A               	negf	scale@scl,c
  2494                           
  2495                           ;doprnt.c: 430: if(scl>=110)
  2496  001A2A  502A               	movf	scale@scl,w,c
  2497  001A2C  0A80               	xorlw	128
  2498  001A2E  0F12               	addlw	-238
  2499  001A30  A0D8               	btfss	status,0,c
  2500  001A32  D09A               	goto	l89
  2501                           
  2502                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2503  001A34  0E00               	movlw	0
  2504  001A36  6E12               	movwf	___wmul@multiplicand+1,c
  2505  001A38  0E03               	movlw	3
  2506  001A3A  6E11               	movwf	___wmul@multiplicand,c
  2507  001A3C  0E00               	movlw	0
  2508  001A3E  6E0A               	movwf	___awdiv@divisor+1,c
  2509  001A40  0E0A               	movlw	10
  2510  001A42  6E09               	movwf	___awdiv@divisor,c
  2511  001A44  0E00               	movlw	0
  2512  001A46  6E04               	movwf	___awmod@divisor+1,c
  2513  001A48  0E64               	movlw	100
  2514  001A4A  6E03               	movwf	___awmod@divisor,c
  2515  001A4C  502A               	movf	scale@scl,w,c
  2516  001A4E  6E01               	movwf	___awmod@dividend,c
  2517  001A50  6A02               	clrf	___awmod@dividend+1,c
  2518  001A52  BE01               	btfsc	___awmod@dividend,7,c
  2519  001A54  0602               	decf	___awmod@dividend+1,f,c
  2520  001A56  EC8D  F014         	call	___awmod	;wreg free
  2521  001A5A  C001  F007         	movff	?___awmod,___awdiv@dividend
  2522  001A5E  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2523  001A62  EC0A  F014         	call	___awdiv	;wreg free
  2524  001A66  0E09               	movlw	9
  2525  001A68  2407               	addwf	?___awdiv,w,c
  2526  001A6A  6E0F               	movwf	___wmul@multiplier,c
  2527  001A6C  0E00               	movlw	0
  2528  001A6E  2008               	addwfc	?___awdiv+1,w,c
  2529  001A70  6E10               	movwf	___wmul@multiplier+1,c
  2530  001A72  ECA8  F015         	call	___wmul	;wreg free
  2531  001A76  0E50               	movlw	low __npowers_
  2532  001A78  240F               	addwf	?___wmul,w,c
  2533  001A7A  6EF6               	movwf	tblptrl,c
  2534  001A7C  0E10               	movlw	high __npowers_
  2535  001A7E  2010               	addwfc	?___wmul+1,w,c
  2536  001A80  6EF7               	movwf	tblptrh,c
  2537  001A82                     	if	1	;There are 3 active tblptr bytes
  2538  001A82  6AF8               	clrf	tblptru,c
  2539  001A84  0E00               	movlw	low (__mediumconst shr (0+16))
  2540  001A86  22F8               	addwfc	tblptru,f,c
  2541  001A88                     	endif
  2542  001A88  0009               	tblrd		*+
  2543  001A8A  CFF5 F018          	movff	tablat,___ftmul@f2
  2544  001A8E  0009               	tblrd		*+
  2545  001A90  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2546  001A94  000A               	tblrd		*-
  2547  001A96  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2548  001A9A  0E00               	movlw	0
  2549  001A9C  6E0A               	movwf	___awdiv@divisor+1,c
  2550  001A9E  0E64               	movlw	100
  2551  001AA0  6E09               	movwf	___awdiv@divisor,c
  2552  001AA2  502A               	movf	scale@scl,w,c
  2553  001AA4  6E07               	movwf	___awdiv@dividend,c
  2554  001AA6  6A08               	clrf	___awdiv@dividend+1,c
  2555  001AA8  BE07               	btfsc	___awdiv@dividend,7,c
  2556  001AAA  0608               	decf	___awdiv@dividend+1,f,c
  2557  001AAC  EC0A  F014         	call	___awdiv	;wreg free
  2558  001AB0  0E12               	movlw	18
  2559  001AB2  2407               	addwf	?___awdiv,w,c
  2560  001AB4  6E0F               	movwf	___wmul@multiplier,c
  2561  001AB6  0E00               	movlw	0
  2562  001AB8  2008               	addwfc	?___awdiv+1,w,c
  2563  001ABA  6E10               	movwf	___wmul@multiplier+1,c
  2564  001ABC  0E00               	movlw	0
  2565  001ABE  6E12               	movwf	___wmul@multiplicand+1,c
  2566  001AC0  0E03               	movlw	3
  2567  001AC2  6E11               	movwf	___wmul@multiplicand,c
  2568  001AC4  ECA8  F015         	call	___wmul	;wreg free
  2569  001AC8  0E50               	movlw	low __npowers_
  2570  001ACA  240F               	addwf	?___wmul,w,c
  2571  001ACC  6EF6               	movwf	tblptrl,c
  2572  001ACE  0E10               	movlw	high __npowers_
  2573  001AD0  2010               	addwfc	?___wmul+1,w,c
  2574  001AD2  6EF7               	movwf	tblptrh,c
  2575  001AD4                     	if	1	;There are 3 active tblptr bytes
  2576  001AD4  6AF8               	clrf	tblptru,c
  2577  001AD6  0E00               	movlw	low (__mediumconst shr (0+16))
  2578  001AD8  22F8               	addwfc	tblptru,f,c
  2579  001ADA                     	endif
  2580  001ADA  0009               	tblrd		*+
  2581  001ADC  CFF5 F015          	movff	tablat,___ftmul@f1
  2582  001AE0  0009               	tblrd		*+
  2583  001AE2  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2584  001AE6  000A               	tblrd		*-
  2585  001AE8  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2586  001AEC  EC77  F012         	call	___ftmul	;wreg free
  2587  001AF0  C015  F027         	movff	?___ftmul,_scale$808
  2588  001AF4  C016  F028         	movff	?___ftmul+1,_scale$808+1
  2589  001AF8  C017  F029         	movff	?___ftmul+2,_scale$808+2
  2590                           
  2591                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2592  001AFC  C027  F015         	movff	_scale$808,___ftmul@f1
  2593  001B00  C028  F016         	movff	_scale$808+1,___ftmul@f1+1
  2594  001B04  C029  F017         	movff	_scale$808+2,___ftmul@f1+2
  2595  001B08  0E00               	movlw	0
  2596  001B0A  6E12               	movwf	___wmul@multiplicand+1,c
  2597  001B0C  0E03               	movlw	3
  2598  001B0E  6E11               	movwf	___wmul@multiplicand,c
  2599  001B10  0E00               	movlw	0
  2600  001B12  6E04               	movwf	___awmod@divisor+1,c
  2601  001B14  0E0A               	movlw	10
  2602  001B16  6E03               	movwf	___awmod@divisor,c
  2603  001B18  502A               	movf	scale@scl,w,c
  2604  001B1A  6E01               	movwf	___awmod@dividend,c
  2605  001B1C  6A02               	clrf	___awmod@dividend+1,c
  2606  001B1E  BE01               	btfsc	___awmod@dividend,7,c
  2607  001B20  0602               	decf	___awmod@dividend+1,f,c
  2608  001B22  EC8D  F014         	call	___awmod	;wreg free
  2609  001B26  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2610  001B2A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2611  001B2E  ECA8  F015         	call	___wmul	;wreg free
  2612  001B32  0E50               	movlw	low __npowers_
  2613  001B34  240F               	addwf	?___wmul,w,c
  2614  001B36  6EF6               	movwf	tblptrl,c
  2615  001B38  0E10               	movlw	high __npowers_
  2616  001B3A  2010               	addwfc	?___wmul+1,w,c
  2617  001B3C  6EF7               	movwf	tblptrh,c
  2618  001B3E                     	if	1	;There are 3 active tblptr bytes
  2619  001B3E  6AF8               	clrf	tblptru,c
  2620  001B40  0E00               	movlw	low (__mediumconst shr (0+16))
  2621  001B42  22F8               	addwfc	tblptru,f,c
  2622  001B44                     	endif
  2623  001B44  0009               	tblrd		*+
  2624  001B46  CFF5 F018          	movff	tablat,___ftmul@f2
  2625  001B4A  0009               	tblrd		*+
  2626  001B4C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2627  001B50  000A               	tblrd		*-
  2628  001B52  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2629  001B56  EC77  F012         	call	___ftmul	;wreg free
  2630  001B5A  C015  F024         	movff	?___ftmul,?_scale
  2631  001B5E  C016  F025         	movff	?___ftmul+1,?_scale+1
  2632  001B62  C017  F026         	movff	?___ftmul+2,?_scale+2
  2633  001B66  0012               	return	
  2634  001B68                     l89:
  2635                           
  2636                           ;doprnt.c: 432: else if(scl > 10)
  2637  001B68  502A               	movf	scale@scl,w,c
  2638  001B6A  0A80               	xorlw	128
  2639  001B6C  0F75               	addlw	-139
  2640  001B6E  A0D8               	btfss	status,0,c
  2641  001B70  D059               	goto	l92
  2642                           
  2643                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2644  001B72  0E00               	movlw	0
  2645  001B74  6E0A               	movwf	___awdiv@divisor+1,c
  2646  001B76  0E0A               	movlw	10
  2647  001B78  6E09               	movwf	___awdiv@divisor,c
  2648  001B7A  502A               	movf	scale@scl,w,c
  2649  001B7C  6E07               	movwf	___awdiv@dividend,c
  2650  001B7E  6A08               	clrf	___awdiv@dividend+1,c
  2651  001B80  BE07               	btfsc	___awdiv@dividend,7,c
  2652  001B82  0608               	decf	___awdiv@dividend+1,f,c
  2653  001B84  EC0A  F014         	call	___awdiv	;wreg free
  2654  001B88  0E09               	movlw	9
  2655  001B8A  2407               	addwf	?___awdiv,w,c
  2656  001B8C  6E0F               	movwf	___wmul@multiplier,c
  2657  001B8E  0E00               	movlw	0
  2658  001B90  2008               	addwfc	?___awdiv+1,w,c
  2659  001B92  6E10               	movwf	___wmul@multiplier+1,c
  2660  001B94  0E00               	movlw	0
  2661  001B96  6E12               	movwf	___wmul@multiplicand+1,c
  2662  001B98  0E03               	movlw	3
  2663  001B9A  6E11               	movwf	___wmul@multiplicand,c
  2664  001B9C  ECA8  F015         	call	___wmul	;wreg free
  2665  001BA0  0E50               	movlw	low __npowers_
  2666  001BA2  240F               	addwf	?___wmul,w,c
  2667  001BA4  6EF6               	movwf	tblptrl,c
  2668  001BA6  0E10               	movlw	high __npowers_
  2669  001BA8  2010               	addwfc	?___wmul+1,w,c
  2670  001BAA  6EF7               	movwf	tblptrh,c
  2671  001BAC                     	if	1	;There are 3 active tblptr bytes
  2672  001BAC  6AF8               	clrf	tblptru,c
  2673  001BAE  0E00               	movlw	low (__mediumconst shr (0+16))
  2674  001BB0  22F8               	addwfc	tblptru,f,c
  2675  001BB2                     	endif
  2676  001BB2  0009               	tblrd		*+
  2677  001BB4  CFF5 F015          	movff	tablat,___ftmul@f1
  2678  001BB8  0009               	tblrd		*+
  2679  001BBA  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2680  001BBE  000A               	tblrd		*-
  2681  001BC0  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2682  001BC4  0E00               	movlw	0
  2683  001BC6  6E12               	movwf	___wmul@multiplicand+1,c
  2684  001BC8  0E03               	movlw	3
  2685  001BCA  6E11               	movwf	___wmul@multiplicand,c
  2686  001BCC  0E00               	movlw	0
  2687  001BCE  6E04               	movwf	___awmod@divisor+1,c
  2688  001BD0  0E0A               	movlw	10
  2689  001BD2  6E03               	movwf	___awmod@divisor,c
  2690  001BD4  502A               	movf	scale@scl,w,c
  2691  001BD6  6E01               	movwf	___awmod@dividend,c
  2692  001BD8  6A02               	clrf	___awmod@dividend+1,c
  2693  001BDA  BE01               	btfsc	___awmod@dividend,7,c
  2694  001BDC  0602               	decf	___awmod@dividend+1,f,c
  2695  001BDE  EC8D  F014         	call	___awmod	;wreg free
  2696  001BE2  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2697  001BE6  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2698  001BEA  ECA8  F015         	call	___wmul	;wreg free
  2699  001BEE  0E50               	movlw	low __npowers_
  2700  001BF0  240F               	addwf	?___wmul,w,c
  2701  001BF2  6EF6               	movwf	tblptrl,c
  2702  001BF4  0E10               	movlw	high __npowers_
  2703  001BF6  2010               	addwfc	?___wmul+1,w,c
  2704  001BF8  6EF7               	movwf	tblptrh,c
  2705  001BFA                     	if	1	;There are 3 active tblptr bytes
  2706  001BFA  6AF8               	clrf	tblptru,c
  2707  001BFC  0E00               	movlw	low (__mediumconst shr (0+16))
  2708  001BFE  22F8               	addwfc	tblptru,f,c
  2709  001C00                     	endif
  2710  001C00  0009               	tblrd		*+
  2711  001C02  CFF5 F018          	movff	tablat,___ftmul@f2
  2712  001C06  0009               	tblrd		*+
  2713  001C08  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2714  001C0C  000A               	tblrd		*-
  2715  001C0E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2716  001C12  EC77  F012         	call	___ftmul	;wreg free
  2717  001C16  C015  F024         	movff	?___ftmul,?_scale
  2718  001C1A  C016  F025         	movff	?___ftmul+1,?_scale+1
  2719  001C1E  C017  F026         	movff	?___ftmul+2,?_scale+2
  2720  001C22  0012               	return	
  2721  001C24                     l92:
  2722                           
  2723                           ;doprnt.c: 434: return _npowers_[scl];
  2724  001C24  502A               	movf	scale@scl,w,c
  2725  001C26  0D03               	mullw	3
  2726  001C28  0E50               	movlw	low __npowers_
  2727  001C2A  24F3               	addwf	prodl,w,c
  2728  001C2C  6EF6               	movwf	tblptrl,c
  2729  001C2E  0E10               	movlw	high __npowers_
  2730  001C30  20F4               	addwfc	prodh,w,c
  2731  001C32  6EF7               	movwf	tblptrh,c
  2732  001C34                     	if	1	;There are 3 active tblptr bytes
  2733  001C34  6AF8               	clrf	tblptru,c
  2734  001C36  0E00               	movlw	low (__mediumconst shr (0+16))
  2735  001C38  22F8               	addwfc	tblptru,f,c
  2736  001C3A                     	endif
  2737  001C3A  0009               	tblrd		*+
  2738  001C3C  CFF5 F024          	movff	tablat,?_scale
  2739  001C40  0009               	tblrd		*+
  2740  001C42  CFF5 F025          	movff	tablat,?_scale+1
  2741  001C46  000A               	tblrd		*-
  2742  001C48  CFF5 F026          	movff	tablat,?_scale+2
  2743  001C4C  0012               	return	
  2744  001C4E                     l88:
  2745                           
  2746                           ;doprnt.c: 435: }
  2747                           ;doprnt.c: 436: if(scl>=110)
  2748  001C4E  502A               	movf	scale@scl,w,c
  2749  001C50  0A80               	xorlw	128
  2750  001C52  0F12               	addlw	-238
  2751  001C54  A0D8               	btfss	status,0,c
  2752  001C56  D09A               	goto	l93
  2753                           
  2754                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2755  001C58  0E00               	movlw	0
  2756  001C5A  6E12               	movwf	___wmul@multiplicand+1,c
  2757  001C5C  0E03               	movlw	3
  2758  001C5E  6E11               	movwf	___wmul@multiplicand,c
  2759  001C60  0E00               	movlw	0
  2760  001C62  6E0A               	movwf	___awdiv@divisor+1,c
  2761  001C64  0E0A               	movlw	10
  2762  001C66  6E09               	movwf	___awdiv@divisor,c
  2763  001C68  0E00               	movlw	0
  2764  001C6A  6E04               	movwf	___awmod@divisor+1,c
  2765  001C6C  0E64               	movlw	100
  2766  001C6E  6E03               	movwf	___awmod@divisor,c
  2767  001C70  502A               	movf	scale@scl,w,c
  2768  001C72  6E01               	movwf	___awmod@dividend,c
  2769  001C74  6A02               	clrf	___awmod@dividend+1,c
  2770  001C76  BE01               	btfsc	___awmod@dividend,7,c
  2771  001C78  0602               	decf	___awmod@dividend+1,f,c
  2772  001C7A  EC8D  F014         	call	___awmod	;wreg free
  2773  001C7E  C001  F007         	movff	?___awmod,___awdiv@dividend
  2774  001C82  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2775  001C86  EC0A  F014         	call	___awdiv	;wreg free
  2776  001C8A  0E09               	movlw	9
  2777  001C8C  2407               	addwf	?___awdiv,w,c
  2778  001C8E  6E0F               	movwf	___wmul@multiplier,c
  2779  001C90  0E00               	movlw	0
  2780  001C92  2008               	addwfc	?___awdiv+1,w,c
  2781  001C94  6E10               	movwf	___wmul@multiplier+1,c
  2782  001C96  ECA8  F015         	call	___wmul	;wreg free
  2783  001C9A  0E29               	movlw	low __powers_
  2784  001C9C  240F               	addwf	?___wmul,w,c
  2785  001C9E  6EF6               	movwf	tblptrl,c
  2786  001CA0  0E10               	movlw	high __powers_
  2787  001CA2  2010               	addwfc	?___wmul+1,w,c
  2788  001CA4  6EF7               	movwf	tblptrh,c
  2789  001CA6                     	if	1	;There are 3 active tblptr bytes
  2790  001CA6  6AF8               	clrf	tblptru,c
  2791  001CA8  0E00               	movlw	low (__mediumconst shr (0+16))
  2792  001CAA  22F8               	addwfc	tblptru,f,c
  2793  001CAC                     	endif
  2794  001CAC  0009               	tblrd		*+
  2795  001CAE  CFF5 F018          	movff	tablat,___ftmul@f2
  2796  001CB2  0009               	tblrd		*+
  2797  001CB4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2798  001CB8  000A               	tblrd		*-
  2799  001CBA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2800  001CBE  0E00               	movlw	0
  2801  001CC0  6E0A               	movwf	___awdiv@divisor+1,c
  2802  001CC2  0E64               	movlw	100
  2803  001CC4  6E09               	movwf	___awdiv@divisor,c
  2804  001CC6  502A               	movf	scale@scl,w,c
  2805  001CC8  6E07               	movwf	___awdiv@dividend,c
  2806  001CCA  6A08               	clrf	___awdiv@dividend+1,c
  2807  001CCC  BE07               	btfsc	___awdiv@dividend,7,c
  2808  001CCE  0608               	decf	___awdiv@dividend+1,f,c
  2809  001CD0  EC0A  F014         	call	___awdiv	;wreg free
  2810  001CD4  0E12               	movlw	18
  2811  001CD6  2407               	addwf	?___awdiv,w,c
  2812  001CD8  6E0F               	movwf	___wmul@multiplier,c
  2813  001CDA  0E00               	movlw	0
  2814  001CDC  2008               	addwfc	?___awdiv+1,w,c
  2815  001CDE  6E10               	movwf	___wmul@multiplier+1,c
  2816  001CE0  0E00               	movlw	0
  2817  001CE2  6E12               	movwf	___wmul@multiplicand+1,c
  2818  001CE4  0E03               	movlw	3
  2819  001CE6  6E11               	movwf	___wmul@multiplicand,c
  2820  001CE8  ECA8  F015         	call	___wmul	;wreg free
  2821  001CEC  0E29               	movlw	low __powers_
  2822  001CEE  240F               	addwf	?___wmul,w,c
  2823  001CF0  6EF6               	movwf	tblptrl,c
  2824  001CF2  0E10               	movlw	high __powers_
  2825  001CF4  2010               	addwfc	?___wmul+1,w,c
  2826  001CF6  6EF7               	movwf	tblptrh,c
  2827  001CF8                     	if	1	;There are 3 active tblptr bytes
  2828  001CF8  6AF8               	clrf	tblptru,c
  2829  001CFA  0E00               	movlw	low (__mediumconst shr (0+16))
  2830  001CFC  22F8               	addwfc	tblptru,f,c
  2831  001CFE                     	endif
  2832  001CFE  0009               	tblrd		*+
  2833  001D00  CFF5 F015          	movff	tablat,___ftmul@f1
  2834  001D04  0009               	tblrd		*+
  2835  001D06  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2836  001D0A  000A               	tblrd		*-
  2837  001D0C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2838  001D10  EC77  F012         	call	___ftmul	;wreg free
  2839  001D14  C015  F027         	movff	?___ftmul,_scale$808
  2840  001D18  C016  F028         	movff	?___ftmul+1,_scale$808+1
  2841  001D1C  C017  F029         	movff	?___ftmul+2,_scale$808+2
  2842                           
  2843                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2844  001D20  C027  F015         	movff	_scale$808,___ftmul@f1
  2845  001D24  C028  F016         	movff	_scale$808+1,___ftmul@f1+1
  2846  001D28  C029  F017         	movff	_scale$808+2,___ftmul@f1+2
  2847  001D2C  0E00               	movlw	0
  2848  001D2E  6E12               	movwf	___wmul@multiplicand+1,c
  2849  001D30  0E03               	movlw	3
  2850  001D32  6E11               	movwf	___wmul@multiplicand,c
  2851  001D34  0E00               	movlw	0
  2852  001D36  6E04               	movwf	___awmod@divisor+1,c
  2853  001D38  0E0A               	movlw	10
  2854  001D3A  6E03               	movwf	___awmod@divisor,c
  2855  001D3C  502A               	movf	scale@scl,w,c
  2856  001D3E  6E01               	movwf	___awmod@dividend,c
  2857  001D40  6A02               	clrf	___awmod@dividend+1,c
  2858  001D42  BE01               	btfsc	___awmod@dividend,7,c
  2859  001D44  0602               	decf	___awmod@dividend+1,f,c
  2860  001D46  EC8D  F014         	call	___awmod	;wreg free
  2861  001D4A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2862  001D4E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2863  001D52  ECA8  F015         	call	___wmul	;wreg free
  2864  001D56  0E29               	movlw	low __powers_
  2865  001D58  240F               	addwf	?___wmul,w,c
  2866  001D5A  6EF6               	movwf	tblptrl,c
  2867  001D5C  0E10               	movlw	high __powers_
  2868  001D5E  2010               	addwfc	?___wmul+1,w,c
  2869  001D60  6EF7               	movwf	tblptrh,c
  2870  001D62                     	if	1	;There are 3 active tblptr bytes
  2871  001D62  6AF8               	clrf	tblptru,c
  2872  001D64  0E00               	movlw	low (__mediumconst shr (0+16))
  2873  001D66  22F8               	addwfc	tblptru,f,c
  2874  001D68                     	endif
  2875  001D68  0009               	tblrd		*+
  2876  001D6A  CFF5 F018          	movff	tablat,___ftmul@f2
  2877  001D6E  0009               	tblrd		*+
  2878  001D70  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2879  001D74  000A               	tblrd		*-
  2880  001D76  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2881  001D7A  EC77  F012         	call	___ftmul	;wreg free
  2882  001D7E  C015  F024         	movff	?___ftmul,?_scale
  2883  001D82  C016  F025         	movff	?___ftmul+1,?_scale+1
  2884  001D86  C017  F026         	movff	?___ftmul+2,?_scale+2
  2885  001D8A  0012               	return	
  2886  001D8C                     l93:
  2887                           
  2888                           ;doprnt.c: 438: else if(scl > 10)
  2889  001D8C  502A               	movf	scale@scl,w,c
  2890  001D8E  0A80               	xorlw	128
  2891  001D90  0F75               	addlw	-139
  2892  001D92  A0D8               	btfss	status,0,c
  2893  001D94  D059               	goto	l95
  2894                           
  2895                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2896  001D96  0E00               	movlw	0
  2897  001D98  6E0A               	movwf	___awdiv@divisor+1,c
  2898  001D9A  0E0A               	movlw	10
  2899  001D9C  6E09               	movwf	___awdiv@divisor,c
  2900  001D9E  502A               	movf	scale@scl,w,c
  2901  001DA0  6E07               	movwf	___awdiv@dividend,c
  2902  001DA2  6A08               	clrf	___awdiv@dividend+1,c
  2903  001DA4  BE07               	btfsc	___awdiv@dividend,7,c
  2904  001DA6  0608               	decf	___awdiv@dividend+1,f,c
  2905  001DA8  EC0A  F014         	call	___awdiv	;wreg free
  2906  001DAC  0E09               	movlw	9
  2907  001DAE  2407               	addwf	?___awdiv,w,c
  2908  001DB0  6E0F               	movwf	___wmul@multiplier,c
  2909  001DB2  0E00               	movlw	0
  2910  001DB4  2008               	addwfc	?___awdiv+1,w,c
  2911  001DB6  6E10               	movwf	___wmul@multiplier+1,c
  2912  001DB8  0E00               	movlw	0
  2913  001DBA  6E12               	movwf	___wmul@multiplicand+1,c
  2914  001DBC  0E03               	movlw	3
  2915  001DBE  6E11               	movwf	___wmul@multiplicand,c
  2916  001DC0  ECA8  F015         	call	___wmul	;wreg free
  2917  001DC4  0E29               	movlw	low __powers_
  2918  001DC6  240F               	addwf	?___wmul,w,c
  2919  001DC8  6EF6               	movwf	tblptrl,c
  2920  001DCA  0E10               	movlw	high __powers_
  2921  001DCC  2010               	addwfc	?___wmul+1,w,c
  2922  001DCE  6EF7               	movwf	tblptrh,c
  2923  001DD0                     	if	1	;There are 3 active tblptr bytes
  2924  001DD0  6AF8               	clrf	tblptru,c
  2925  001DD2  0E00               	movlw	low (__mediumconst shr (0+16))
  2926  001DD4  22F8               	addwfc	tblptru,f,c
  2927  001DD6                     	endif
  2928  001DD6  0009               	tblrd		*+
  2929  001DD8  CFF5 F015          	movff	tablat,___ftmul@f1
  2930  001DDC  0009               	tblrd		*+
  2931  001DDE  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2932  001DE2  000A               	tblrd		*-
  2933  001DE4  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2934  001DE8  0E00               	movlw	0
  2935  001DEA  6E12               	movwf	___wmul@multiplicand+1,c
  2936  001DEC  0E03               	movlw	3
  2937  001DEE  6E11               	movwf	___wmul@multiplicand,c
  2938  001DF0  0E00               	movlw	0
  2939  001DF2  6E04               	movwf	___awmod@divisor+1,c
  2940  001DF4  0E0A               	movlw	10
  2941  001DF6  6E03               	movwf	___awmod@divisor,c
  2942  001DF8  502A               	movf	scale@scl,w,c
  2943  001DFA  6E01               	movwf	___awmod@dividend,c
  2944  001DFC  6A02               	clrf	___awmod@dividend+1,c
  2945  001DFE  BE01               	btfsc	___awmod@dividend,7,c
  2946  001E00  0602               	decf	___awmod@dividend+1,f,c
  2947  001E02  EC8D  F014         	call	___awmod	;wreg free
  2948  001E06  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2949  001E0A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2950  001E0E  ECA8  F015         	call	___wmul	;wreg free
  2951  001E12  0E29               	movlw	low __powers_
  2952  001E14  240F               	addwf	?___wmul,w,c
  2953  001E16  6EF6               	movwf	tblptrl,c
  2954  001E18  0E10               	movlw	high __powers_
  2955  001E1A  2010               	addwfc	?___wmul+1,w,c
  2956  001E1C  6EF7               	movwf	tblptrh,c
  2957  001E1E                     	if	1	;There are 3 active tblptr bytes
  2958  001E1E  6AF8               	clrf	tblptru,c
  2959  001E20  0E00               	movlw	low (__mediumconst shr (0+16))
  2960  001E22  22F8               	addwfc	tblptru,f,c
  2961  001E24                     	endif
  2962  001E24  0009               	tblrd		*+
  2963  001E26  CFF5 F018          	movff	tablat,___ftmul@f2
  2964  001E2A  0009               	tblrd		*+
  2965  001E2C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2966  001E30  000A               	tblrd		*-
  2967  001E32  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2968  001E36  EC77  F012         	call	___ftmul	;wreg free
  2969  001E3A  C015  F024         	movff	?___ftmul,?_scale
  2970  001E3E  C016  F025         	movff	?___ftmul+1,?_scale+1
  2971  001E42  C017  F026         	movff	?___ftmul+2,?_scale+2
  2972  001E46  0012               	return	
  2973  001E48                     l95:
  2974                           
  2975                           ;doprnt.c: 440: return _powers_[scl];
  2976  001E48  502A               	movf	scale@scl,w,c
  2977  001E4A  0D03               	mullw	3
  2978  001E4C  0E29               	movlw	low __powers_
  2979  001E4E  24F3               	addwf	prodl,w,c
  2980  001E50  6EF6               	movwf	tblptrl,c
  2981  001E52  0E10               	movlw	high __powers_
  2982  001E54  20F4               	addwfc	prodh,w,c
  2983  001E56  6EF7               	movwf	tblptrh,c
  2984  001E58                     	if	1	;There are 3 active tblptr bytes
  2985  001E58  6AF8               	clrf	tblptru,c
  2986  001E5A  0E00               	movlw	low (__mediumconst shr (0+16))
  2987  001E5C  22F8               	addwfc	tblptru,f,c
  2988  001E5E                     	endif
  2989  001E5E  0009               	tblrd		*+
  2990  001E60  CFF5 F024          	movff	tablat,?_scale
  2991  001E64  0009               	tblrd		*+
  2992  001E66  CFF5 F025          	movff	tablat,?_scale+1
  2993  001E6A  000A               	tblrd		*-
  2994  001E6C  CFF5 F026          	movff	tablat,?_scale+2
  2995  001E70  0012               	return	
  2996  001E72                     __end_of_scale:
  2997                           	opt stack 0
  2998                           tblptru	equ	0xFF8
  2999                           tblptrh	equ	0xFF7
  3000                           tblptrl	equ	0xFF6
  3001                           tablat	equ	0xFF5
  3002                           prodh	equ	0xFF4
  3003                           prodl	equ	0xFF3
  3004                           indf0	equ	0xFEF
  3005                           postinc0	equ	0xFEE
  3006                           fsr0h	equ	0xFEA
  3007                           fsr0l	equ	0xFE9
  3008                           wreg	equ	0xFE8
  3009                           postdec1	equ	0xFE5
  3010                           fsr1l	equ	0xFE1
  3011                           indf2	equ	0xFDF
  3012                           postinc2	equ	0xFDE
  3013                           postdec2	equ	0xFDD
  3014                           fsr2h	equ	0xFDA
  3015                           fsr2l	equ	0xFD9
  3016                           status	equ	0xFD8
  3017                           
  3018 ;; *************** function _putch *****************
  3019 ;; Defined at:
  3020 ;;		line 115 in file "eusart1.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;  txData          1    wreg     unsigned char 
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;  txData          1    1[COMRAM] unsigned char 
  3025 ;; Return value:  Size  Location     Type
  3026 ;;                  1    wreg      void 
  3027 ;; Registers used:
  3028 ;;		wreg, status,2, cstack
  3029 ;; Tracked objects:
  3030 ;;		On entry : 0/0
  3031 ;;		On exit  : 0/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3037 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3038 ;;Total ram usage:        1 bytes
  3039 ;; Hardware stack levels used:    1
  3040 ;; Hardware stack levels required when called:    1
  3041 ;; This function calls:
  3042 ;;		_EUSART1_Write
  3043 ;; This function is called by:
  3044 ;;		_printf
  3045 ;; This function uses a non-reentrant model
  3046 ;;
  3047                           
  3048                           	psect	text3
  3049  002BD8                     __ptext3:
  3050                           	opt stack 0
  3051  002BD8                     _putch:
  3052                           	opt stack 28
  3053                           
  3054                           ;incstack = 0
  3055                           ;putch@txData stored from wreg
  3056  002BD8  6E02               	movwf	putch@txData,c
  3057                           
  3058                           ;eusart1.c: 117: EUSART1_Write(txData);
  3059  002BDA  5002               	movf	putch@txData,w,c
  3060  002BDC  ECE6  F015         	call	_EUSART1_Write
  3061  002BE0  0012               	return		;funcret
  3062  002BE2                     __end_of_putch:
  3063                           	opt stack 0
  3064                           tblptru	equ	0xFF8
  3065                           tblptrh	equ	0xFF7
  3066                           tblptrl	equ	0xFF6
  3067                           tablat	equ	0xFF5
  3068                           prodh	equ	0xFF4
  3069                           prodl	equ	0xFF3
  3070                           indf0	equ	0xFEF
  3071                           postinc0	equ	0xFEE
  3072                           fsr0h	equ	0xFEA
  3073                           fsr0l	equ	0xFE9
  3074                           wreg	equ	0xFE8
  3075                           postdec1	equ	0xFE5
  3076                           fsr1l	equ	0xFE1
  3077                           indf2	equ	0xFDF
  3078                           postinc2	equ	0xFDE
  3079                           postdec2	equ	0xFDD
  3080                           fsr2h	equ	0xFDA
  3081                           fsr2l	equ	0xFD9
  3082                           status	equ	0xFD8
  3083                           
  3084 ;; *************** function _EUSART1_Write *****************
  3085 ;; Defined at:
  3086 ;;		line 101 in file "eusart1.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;  txData          1    wreg     unsigned char 
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;  txData          1    0[COMRAM] unsigned char 
  3091 ;; Return value:  Size  Location     Type
  3092 ;;                  1    wreg      void 
  3093 ;; Registers used:
  3094 ;;		wreg
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : 0/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3101 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3103 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3104 ;;Total ram usage:        1 bytes
  3105 ;; Hardware stack levels used:    1
  3106 ;; This function calls:
  3107 ;;		Nothing
  3108 ;; This function is called by:
  3109 ;;		_putch
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113                           	psect	text4
  3114  002BCC                     __ptext4:
  3115                           	opt stack 0
  3116  002BCC                     _EUSART1_Write:
  3117                           	opt stack 28
  3118                           
  3119                           ;incstack = 0
  3120                           ;EUSART1_Write@txData stored from wreg
  3121  002BCC  6E01               	movwf	EUSART1_Write@txData,c
  3122  002BCE                     
  3123                           ;eusart1.c: 104: {
  3124                           
  3125                           ;eusart1.c: 103: while(0 == PIR1bits.TX1IF)
  3126  002BCE  A89E               	btfss	3998,4,c	;volatile
  3127  002BD0  D7FE               	goto	l1729
  3128                           
  3129                           ;eusart1.c: 105: }
  3130                           ;eusart1.c: 107: TXREG = txData;
  3131  002BD2  C001  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  3132  002BD6  0012               	return		;funcret
  3133  002BD8                     __end_of_EUSART1_Write:
  3134                           	opt stack 0
  3135                           tblptru	equ	0xFF8
  3136                           tblptrh	equ	0xFF7
  3137                           tblptrl	equ	0xFF6
  3138                           tablat	equ	0xFF5
  3139                           prodh	equ	0xFF4
  3140                           prodl	equ	0xFF3
  3141                           indf0	equ	0xFEF
  3142                           postinc0	equ	0xFEE
  3143                           fsr0h	equ	0xFEA
  3144                           fsr0l	equ	0xFE9
  3145                           wreg	equ	0xFE8
  3146                           postdec1	equ	0xFE5
  3147                           fsr1l	equ	0xFE1
  3148                           indf2	equ	0xFDF
  3149                           postinc2	equ	0xFDE
  3150                           postdec2	equ	0xFDD
  3151                           fsr2h	equ	0xFDA
  3152                           fsr2l	equ	0xFD9
  3153                           status	equ	0xFD8
  3154                           
  3155 ;; *************** function _isdigit *****************
  3156 ;; Defined at:
  3157 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3158 ;; Parameters:    Size  Location     Type
  3159 ;;  c               1    wreg     unsigned char 
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;  c               1    2[COMRAM] unsigned char 
  3162 ;; Return value:  Size  Location     Type
  3163 ;;		None               void
  3164 ;; Registers used:
  3165 ;;		wreg, status,2, status,0
  3166 ;; Tracked objects:
  3167 ;;		On entry : 0/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3172 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3173 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3174 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3175 ;;Total ram usage:        3 bytes
  3176 ;; Hardware stack levels used:    1
  3177 ;; This function calls:
  3178 ;;		Nothing
  3179 ;; This function is called by:
  3180 ;;		_printf
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183                           
  3184                           	psect	text5
  3185  002B9A                     __ptext5:
  3186                           	opt stack 0
  3187  002B9A                     _isdigit:
  3188                           	opt stack 29
  3189                           
  3190                           ;incstack = 0
  3191                           ;isdigit@c stored from wreg
  3192  002B9A  6E03               	movwf	isdigit@c,c
  3193  002B9C  0E00               	movlw	0
  3194  002B9E  6E02               	movwf	_isdigit$468,c
  3195  002BA0  0E3A               	movlw	58
  3196  002BA2  6003               	cpfslt	isdigit@c,c
  3197  002BA4  D005               	goto	l540
  3198  002BA6  0E2F               	movlw	47
  3199  002BA8  6403               	cpfsgt	isdigit@c,c
  3200  002BAA  D002               	goto	l540
  3201  002BAC  0E01               	movlw	1
  3202  002BAE  6E02               	movwf	_isdigit$468,c
  3203  002BB0                     l540:
  3204  002BB0  C002  F001         	movff	_isdigit$468,??_isdigit
  3205  002BB4  3001               	rrcf	??_isdigit,w,c
  3206  002BB6  0012               	return	
  3207  002BB8                     __end_of_isdigit:
  3208                           	opt stack 0
  3209                           tblptru	equ	0xFF8
  3210                           tblptrh	equ	0xFF7
  3211                           tblptrl	equ	0xFF6
  3212                           tablat	equ	0xFF5
  3213                           prodh	equ	0xFF4
  3214                           prodl	equ	0xFF3
  3215                           indf0	equ	0xFEF
  3216                           postinc0	equ	0xFEE
  3217                           fsr0h	equ	0xFEA
  3218                           fsr0l	equ	0xFE9
  3219                           wreg	equ	0xFE8
  3220                           postdec1	equ	0xFE5
  3221                           fsr1l	equ	0xFE1
  3222                           indf2	equ	0xFDF
  3223                           postinc2	equ	0xFDE
  3224                           postdec2	equ	0xFDD
  3225                           fsr2h	equ	0xFDA
  3226                           fsr2l	equ	0xFD9
  3227                           status	equ	0xFD8
  3228                           
  3229 ;; *************** function _fround *****************
  3230 ;; Defined at:
  3231 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3232 ;; Parameters:    Size  Location     Type
  3233 ;;  prec            1    wreg     unsigned char 
  3234 ;; Auto vars:     Size  Location     Type
  3235 ;;  prec            1   44[COMRAM] unsigned char 
  3236 ;; Return value:  Size  Location     Type
  3237 ;;                  3   35[COMRAM] unsigned char 
  3238 ;; Registers used:
  3239 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3240 ;; Tracked objects:
  3241 ;;		On entry : 0/0
  3242 ;;		On exit  : 0/0
  3243 ;;		Unchanged: 0/0
  3244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3245 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3246 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3248 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3249 ;;Total ram usage:       10 bytes
  3250 ;; Hardware stack levels used:    1
  3251 ;; Hardware stack levels required when called:    2
  3252 ;; This function calls:
  3253 ;;		___awdiv
  3254 ;;		___awmod
  3255 ;;		___ftmul
  3256 ;;		___wmul
  3257 ;; This function is called by:
  3258 ;;		_printf
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           	psect	text6
  3263  001E72                     __ptext6:
  3264                           	opt stack 0
  3265  001E72                     _fround:
  3266                           	opt stack 27
  3267                           
  3268                           ;incstack = 0
  3269                           ;fround@prec stored from wreg
  3270  001E72  6E2D               	movwf	fround@prec,c
  3271                           
  3272                           ;doprnt.c: 413: if(prec>=110)
  3273  001E74  0E6D               	movlw	109
  3274  001E76  642D               	cpfsgt	fround@prec,c
  3275  001E78  D0A8               	goto	l82
  3276                           
  3277                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3278  001E7A  0E00               	movlw	0
  3279  001E7C  6E12               	movwf	___wmul@multiplicand+1,c
  3280  001E7E  0E03               	movlw	3
  3281  001E80  6E11               	movwf	___wmul@multiplicand,c
  3282  001E82  0E00               	movlw	0
  3283  001E84  6E0A               	movwf	___awdiv@divisor+1,c
  3284  001E86  0E0A               	movlw	10
  3285  001E88  6E09               	movwf	___awdiv@divisor,c
  3286  001E8A  0E00               	movlw	0
  3287  001E8C  6E04               	movwf	___awmod@divisor+1,c
  3288  001E8E  0E64               	movlw	100
  3289  001E90  6E03               	movwf	___awmod@divisor,c
  3290  001E92  C02D  F001         	movff	fround@prec,___awmod@dividend
  3291  001E96  6A02               	clrf	___awmod@dividend+1,c
  3292  001E98  EC8D  F014         	call	___awmod	;wreg free
  3293  001E9C  C001  F007         	movff	?___awmod,___awdiv@dividend
  3294  001EA0  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3295  001EA4  EC0A  F014         	call	___awdiv	;wreg free
  3296  001EA8  0E09               	movlw	9
  3297  001EAA  2407               	addwf	?___awdiv,w,c
  3298  001EAC  6E0F               	movwf	___wmul@multiplier,c
  3299  001EAE  0E00               	movlw	0
  3300  001EB0  2008               	addwfc	?___awdiv+1,w,c
  3301  001EB2  6E10               	movwf	___wmul@multiplier+1,c
  3302  001EB4  ECA8  F015         	call	___wmul	;wreg free
  3303  001EB8  0E50               	movlw	low __npowers_
  3304  001EBA  240F               	addwf	?___wmul,w,c
  3305  001EBC  6EF6               	movwf	tblptrl,c
  3306  001EBE  0E10               	movlw	high __npowers_
  3307  001EC0  2010               	addwfc	?___wmul+1,w,c
  3308  001EC2  6EF7               	movwf	tblptrh,c
  3309  001EC4                     	if	1	;There are 3 active tblptr bytes
  3310  001EC4  6AF8               	clrf	tblptru,c
  3311  001EC6  0E00               	movlw	low (__mediumconst shr (0+16))
  3312  001EC8  22F8               	addwfc	tblptru,f,c
  3313  001ECA                     	endif
  3314  001ECA  0009               	tblrd		*+
  3315  001ECC  CFF5 F018          	movff	tablat,___ftmul@f2
  3316  001ED0  0009               	tblrd		*+
  3317  001ED2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3318  001ED6  000A               	tblrd		*-
  3319  001ED8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3320  001EDC  0E00               	movlw	0
  3321  001EDE  6E0A               	movwf	___awdiv@divisor+1,c
  3322  001EE0  0E64               	movlw	100
  3323  001EE2  6E09               	movwf	___awdiv@divisor,c
  3324  001EE4  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3325  001EE8  6A08               	clrf	___awdiv@dividend+1,c
  3326  001EEA  EC0A  F014         	call	___awdiv	;wreg free
  3327  001EEE  0E12               	movlw	18
  3328  001EF0  2407               	addwf	?___awdiv,w,c
  3329  001EF2  6E0F               	movwf	___wmul@multiplier,c
  3330  001EF4  0E00               	movlw	0
  3331  001EF6  2008               	addwfc	?___awdiv+1,w,c
  3332  001EF8  6E10               	movwf	___wmul@multiplier+1,c
  3333  001EFA  0E00               	movlw	0
  3334  001EFC  6E12               	movwf	___wmul@multiplicand+1,c
  3335  001EFE  0E03               	movlw	3
  3336  001F00  6E11               	movwf	___wmul@multiplicand,c
  3337  001F02  ECA8  F015         	call	___wmul	;wreg free
  3338  001F06  0E50               	movlw	low __npowers_
  3339  001F08  240F               	addwf	?___wmul,w,c
  3340  001F0A  6EF6               	movwf	tblptrl,c
  3341  001F0C  0E10               	movlw	high __npowers_
  3342  001F0E  2010               	addwfc	?___wmul+1,w,c
  3343  001F10  6EF7               	movwf	tblptrh,c
  3344  001F12                     	if	1	;There are 3 active tblptr bytes
  3345  001F12  6AF8               	clrf	tblptru,c
  3346  001F14  0E00               	movlw	low (__mediumconst shr (0+16))
  3347  001F16  22F8               	addwfc	tblptru,f,c
  3348  001F18                     	endif
  3349  001F18  0009               	tblrd		*+
  3350  001F1A  CFF5 F015          	movff	tablat,___ftmul@f1
  3351  001F1E  0009               	tblrd		*+
  3352  001F20  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3353  001F24  000A               	tblrd		*-
  3354  001F26  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3355  001F2A  EC77  F012         	call	___ftmul	;wreg free
  3356  001F2E  C015  F02A         	movff	?___ftmul,_fround$806
  3357  001F32  C016  F02B         	movff	?___ftmul+1,_fround$806+1
  3358  001F36  C017  F02C         	movff	?___ftmul+2,_fround$806+2
  3359                           
  3360                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3361  001F3A  0E00               	movlw	0
  3362  001F3C  6E12               	movwf	___wmul@multiplicand+1,c
  3363  001F3E  0E03               	movlw	3
  3364  001F40  6E11               	movwf	___wmul@multiplicand,c
  3365  001F42  0E00               	movlw	0
  3366  001F44  6E04               	movwf	___awmod@divisor+1,c
  3367  001F46  0E0A               	movlw	10
  3368  001F48  6E03               	movwf	___awmod@divisor,c
  3369  001F4A  C02D  F001         	movff	fround@prec,___awmod@dividend
  3370  001F4E  6A02               	clrf	___awmod@dividend+1,c
  3371  001F50  EC8D  F014         	call	___awmod	;wreg free
  3372  001F54  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3373  001F58  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3374  001F5C  ECA8  F015         	call	___wmul	;wreg free
  3375  001F60  0E50               	movlw	low __npowers_
  3376  001F62  240F               	addwf	?___wmul,w,c
  3377  001F64  6EF6               	movwf	tblptrl,c
  3378  001F66  0E10               	movlw	high __npowers_
  3379  001F68  2010               	addwfc	?___wmul+1,w,c
  3380  001F6A  6EF7               	movwf	tblptrh,c
  3381  001F6C                     	if	1	;There are 3 active tblptr bytes
  3382  001F6C  6AF8               	clrf	tblptru,c
  3383  001F6E  0E00               	movlw	low (__mediumconst shr (0+16))
  3384  001F70  22F8               	addwfc	tblptru,f,c
  3385  001F72                     	endif
  3386  001F72  0009               	tblrd		*+
  3387  001F74  CFF5 F018          	movff	tablat,___ftmul@f2
  3388  001F78  0009               	tblrd		*+
  3389  001F7A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3390  001F7E  000A               	tblrd		*-
  3391  001F80  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3392  001F84  C02A  F015         	movff	_fround$806,___ftmul@f1
  3393  001F88  C02B  F016         	movff	_fround$806+1,___ftmul@f1+1
  3394  001F8C  C02C  F017         	movff	_fround$806+2,___ftmul@f1+2
  3395  001F90  EC77  F012         	call	___ftmul	;wreg free
  3396  001F94  C015  F027         	movff	?___ftmul,_fround$807
  3397  001F98  C016  F028         	movff	?___ftmul+1,_fround$807+1
  3398  001F9C  C017  F029         	movff	?___ftmul+2,_fround$807+2
  3399                           
  3400                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3401  001FA0  C027  F015         	movff	_fround$807,___ftmul@f1
  3402  001FA4  C028  F016         	movff	_fround$807+1,___ftmul@f1+1
  3403  001FA8  C029  F017         	movff	_fround$807+2,___ftmul@f1+2
  3404  001FAC  0E00               	movlw	0
  3405  001FAE  6E18               	movwf	___ftmul@f2,c
  3406  001FB0  0E00               	movlw	0
  3407  001FB2  6E19               	movwf	___ftmul@f2+1,c
  3408  001FB4  0E3F               	movlw	63
  3409  001FB6  6E1A               	movwf	___ftmul@f2+2,c
  3410  001FB8  EC77  F012         	call	___ftmul	;wreg free
  3411  001FBC  C015  F024         	movff	?___ftmul,?_fround
  3412  001FC0  C016  F025         	movff	?___ftmul+1,?_fround+1
  3413  001FC4  C017  F026         	movff	?___ftmul+2,?_fround+2
  3414  001FC8  0012               	return	
  3415  001FCA                     l82:
  3416                           
  3417                           ;doprnt.c: 415: else if(prec > 10)
  3418  001FCA  0E0A               	movlw	10
  3419  001FCC  642D               	cpfsgt	fround@prec,c
  3420  001FCE  D069               	goto	l85
  3421                           
  3422                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3423  001FD0  0E00               	movlw	0
  3424  001FD2  6E12               	movwf	___wmul@multiplicand+1,c
  3425  001FD4  0E03               	movlw	3
  3426  001FD6  6E11               	movwf	___wmul@multiplicand,c
  3427  001FD8  0E00               	movlw	0
  3428  001FDA  6E04               	movwf	___awmod@divisor+1,c
  3429  001FDC  0E0A               	movlw	10
  3430  001FDE  6E03               	movwf	___awmod@divisor,c
  3431  001FE0  C02D  F001         	movff	fround@prec,___awmod@dividend
  3432  001FE4  6A02               	clrf	___awmod@dividend+1,c
  3433  001FE6  EC8D  F014         	call	___awmod	;wreg free
  3434  001FEA  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3435  001FEE  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3436  001FF2  ECA8  F015         	call	___wmul	;wreg free
  3437  001FF6  0E50               	movlw	low __npowers_
  3438  001FF8  240F               	addwf	?___wmul,w,c
  3439  001FFA  6EF6               	movwf	tblptrl,c
  3440  001FFC  0E10               	movlw	high __npowers_
  3441  001FFE  2010               	addwfc	?___wmul+1,w,c
  3442  002000  6EF7               	movwf	tblptrh,c
  3443  002002                     	if	1	;There are 3 active tblptr bytes
  3444  002002  6AF8               	clrf	tblptru,c
  3445  002004  0E00               	movlw	low (__mediumconst shr (0+16))
  3446  002006  22F8               	addwfc	tblptru,f,c
  3447  002008                     	endif
  3448  002008  0009               	tblrd		*+
  3449  00200A  CFF5 F018          	movff	tablat,___ftmul@f2
  3450  00200E  0009               	tblrd		*+
  3451  002010  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3452  002014  000A               	tblrd		*-
  3453  002016  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3454  00201A  0E00               	movlw	0
  3455  00201C  6E0A               	movwf	___awdiv@divisor+1,c
  3456  00201E  0E0A               	movlw	10
  3457  002020  6E09               	movwf	___awdiv@divisor,c
  3458  002022  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3459  002026  6A08               	clrf	___awdiv@dividend+1,c
  3460  002028  EC0A  F014         	call	___awdiv	;wreg free
  3461  00202C  0E09               	movlw	9
  3462  00202E  2407               	addwf	?___awdiv,w,c
  3463  002030  6E0F               	movwf	___wmul@multiplier,c
  3464  002032  0E00               	movlw	0
  3465  002034  2008               	addwfc	?___awdiv+1,w,c
  3466  002036  6E10               	movwf	___wmul@multiplier+1,c
  3467  002038  0E00               	movlw	0
  3468  00203A  6E12               	movwf	___wmul@multiplicand+1,c
  3469  00203C  0E03               	movlw	3
  3470  00203E  6E11               	movwf	___wmul@multiplicand,c
  3471  002040  ECA8  F015         	call	___wmul	;wreg free
  3472  002044  0E50               	movlw	low __npowers_
  3473  002046  240F               	addwf	?___wmul,w,c
  3474  002048  6EF6               	movwf	tblptrl,c
  3475  00204A  0E10               	movlw	high __npowers_
  3476  00204C  2010               	addwfc	?___wmul+1,w,c
  3477  00204E  6EF7               	movwf	tblptrh,c
  3478  002050                     	if	1	;There are 3 active tblptr bytes
  3479  002050  6AF8               	clrf	tblptru,c
  3480  002052  0E00               	movlw	low (__mediumconst shr (0+16))
  3481  002054  22F8               	addwfc	tblptru,f,c
  3482  002056                     	endif
  3483  002056  0009               	tblrd		*+
  3484  002058  CFF5 F015          	movff	tablat,___ftmul@f1
  3485  00205C  0009               	tblrd		*+
  3486  00205E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3487  002062  000A               	tblrd		*-
  3488  002064  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3489  002068  EC77  F012         	call	___ftmul	;wreg free
  3490  00206C  C015  F02A         	movff	?___ftmul,_fround$806
  3491  002070  C016  F02B         	movff	?___ftmul+1,_fround$806+1
  3492  002074  C017  F02C         	movff	?___ftmul+2,_fround$806+2
  3493                           
  3494                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3495  002078  C02A  F015         	movff	_fround$806,___ftmul@f1
  3496  00207C  C02B  F016         	movff	_fround$806+1,___ftmul@f1+1
  3497  002080  C02C  F017         	movff	_fround$806+2,___ftmul@f1+2
  3498  002084  0E00               	movlw	0
  3499  002086  6E18               	movwf	___ftmul@f2,c
  3500  002088  0E00               	movlw	0
  3501  00208A  6E19               	movwf	___ftmul@f2+1,c
  3502  00208C  0E3F               	movlw	63
  3503  00208E  6E1A               	movwf	___ftmul@f2+2,c
  3504  002090  EC77  F012         	call	___ftmul	;wreg free
  3505  002094  C015  F024         	movff	?___ftmul,?_fround
  3506  002098  C016  F025         	movff	?___ftmul+1,?_fround+1
  3507  00209C  C017  F026         	movff	?___ftmul+2,?_fround+2
  3508  0020A0  0012               	return	
  3509  0020A2                     l85:
  3510                           
  3511                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3512  0020A2  502D               	movf	fround@prec,w,c
  3513  0020A4  0D03               	mullw	3
  3514  0020A6  0E50               	movlw	low __npowers_
  3515  0020A8  24F3               	addwf	prodl,w,c
  3516  0020AA  6EF6               	movwf	tblptrl,c
  3517  0020AC  0E10               	movlw	high __npowers_
  3518  0020AE  20F4               	addwfc	prodh,w,c
  3519  0020B0  6EF7               	movwf	tblptrh,c
  3520  0020B2                     	if	1	;There are 3 active tblptr bytes
  3521  0020B2  6AF8               	clrf	tblptru,c
  3522  0020B4  0E00               	movlw	low (__mediumconst shr (0+16))
  3523  0020B6  22F8               	addwfc	tblptru,f,c
  3524  0020B8                     	endif
  3525  0020B8  0009               	tblrd		*+
  3526  0020BA  CFF5 F015          	movff	tablat,___ftmul@f1
  3527  0020BE  0009               	tblrd		*+
  3528  0020C0  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3529  0020C4  000A               	tblrd		*-
  3530  0020C6  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3531  0020CA  0E00               	movlw	0
  3532  0020CC  6E18               	movwf	___ftmul@f2,c
  3533  0020CE  0E00               	movlw	0
  3534  0020D0  6E19               	movwf	___ftmul@f2+1,c
  3535  0020D2  0E3F               	movlw	63
  3536  0020D4  6E1A               	movwf	___ftmul@f2+2,c
  3537  0020D6  EC77  F012         	call	___ftmul	;wreg free
  3538  0020DA  C015  F024         	movff	?___ftmul,?_fround
  3539  0020DE  C016  F025         	movff	?___ftmul+1,?_fround+1
  3540  0020E2  C017  F026         	movff	?___ftmul+2,?_fround+2
  3541  0020E6  0012               	return	
  3542  0020E8                     __end_of_fround:
  3543                           	opt stack 0
  3544                           tblptru	equ	0xFF8
  3545                           tblptrh	equ	0xFF7
  3546                           tblptrl	equ	0xFF6
  3547                           tablat	equ	0xFF5
  3548                           prodh	equ	0xFF4
  3549                           prodl	equ	0xFF3
  3550                           indf0	equ	0xFEF
  3551                           postinc0	equ	0xFEE
  3552                           fsr0h	equ	0xFEA
  3553                           fsr0l	equ	0xFE9
  3554                           wreg	equ	0xFE8
  3555                           postdec1	equ	0xFE5
  3556                           fsr1l	equ	0xFE1
  3557                           indf2	equ	0xFDF
  3558                           postinc2	equ	0xFDE
  3559                           postdec2	equ	0xFDD
  3560                           fsr2h	equ	0xFDA
  3561                           fsr2l	equ	0xFD9
  3562                           status	equ	0xFD8
  3563                           
  3564 ;; *************** function ___wmul *****************
  3565 ;; Defined at:
  3566 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3567 ;; Parameters:    Size  Location     Type
  3568 ;;  multiplier      2   14[COMRAM] unsigned int 
  3569 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3570 ;; Auto vars:     Size  Location     Type
  3571 ;;  product         2   18[COMRAM] unsigned int 
  3572 ;; Return value:  Size  Location     Type
  3573 ;;                  2   14[COMRAM] unsigned int 
  3574 ;; Registers used:
  3575 ;;		wreg, status,2, status,0, prodl, prodh
  3576 ;; Tracked objects:
  3577 ;;		On entry : 0/0
  3578 ;;		On exit  : 0/0
  3579 ;;		Unchanged: 0/0
  3580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3581 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3582 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3584 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3585 ;;Total ram usage:        6 bytes
  3586 ;; Hardware stack levels used:    1
  3587 ;; This function calls:
  3588 ;;		Nothing
  3589 ;; This function is called by:
  3590 ;;		_fround
  3591 ;;		_scale
  3592 ;;		_printf
  3593 ;; This function uses a non-reentrant model
  3594 ;;
  3595                           
  3596                           	psect	text7
  3597  002B50                     __ptext7:
  3598                           	opt stack 0
  3599  002B50                     ___wmul:
  3600                           	opt stack 28
  3601                           
  3602                           ;incstack = 0
  3603  002B50  500F               	movf	___wmul@multiplier,w,c
  3604  002B52  0211               	mulwf	___wmul@multiplicand,c
  3605  002B54  CFF3 F013          	movff	prodl,___wmul@product
  3606  002B58  CFF4 F014          	movff	prodh,___wmul@product+1
  3607  002B5C  500F               	movf	___wmul@multiplier,w,c
  3608  002B5E  0212               	mulwf	___wmul@multiplicand+1,c
  3609  002B60  50F3               	movf	prodl,w,c
  3610  002B62  2614               	addwf	___wmul@product+1,f,c
  3611  002B64  5010               	movf	___wmul@multiplier+1,w,c
  3612  002B66  0211               	mulwf	___wmul@multiplicand,c
  3613  002B68  50F3               	movf	prodl,w,c
  3614  002B6A  2614               	addwf	___wmul@product+1,f,c
  3615  002B6C  C013  F00F         	movff	___wmul@product,?___wmul
  3616  002B70  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3617  002B74  0012               	return	
  3618  002B76                     __end_of___wmul:
  3619                           	opt stack 0
  3620                           tblptru	equ	0xFF8
  3621                           tblptrh	equ	0xFF7
  3622                           tblptrl	equ	0xFF6
  3623                           tablat	equ	0xFF5
  3624                           prodh	equ	0xFF4
  3625                           prodl	equ	0xFF3
  3626                           indf0	equ	0xFEF
  3627                           postinc0	equ	0xFEE
  3628                           fsr0h	equ	0xFEA
  3629                           fsr0l	equ	0xFE9
  3630                           wreg	equ	0xFE8
  3631                           postdec1	equ	0xFE5
  3632                           fsr1l	equ	0xFE1
  3633                           indf2	equ	0xFDF
  3634                           postinc2	equ	0xFDE
  3635                           postdec2	equ	0xFDD
  3636                           fsr2h	equ	0xFDA
  3637                           fsr2l	equ	0xFD9
  3638                           status	equ	0xFD8
  3639                           
  3640 ;; *************** function ___ftmul *****************
  3641 ;; Defined at:
  3642 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3643 ;; Parameters:    Size  Location     Type
  3644 ;;  f1              3   20[COMRAM] float 
  3645 ;;  f2              3   23[COMRAM] float 
  3646 ;; Auto vars:     Size  Location     Type
  3647 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3648 ;;  sign            1   34[COMRAM] unsigned char 
  3649 ;;  cntr            1   33[COMRAM] unsigned char 
  3650 ;;  exp             1   29[COMRAM] unsigned char 
  3651 ;; Return value:  Size  Location     Type
  3652 ;;                  3   20[COMRAM] float 
  3653 ;; Registers used:
  3654 ;;		wreg, status,2, status,0, cstack
  3655 ;; Tracked objects:
  3656 ;;		On entry : 0/0
  3657 ;;		On exit  : 0/0
  3658 ;;		Unchanged: 0/0
  3659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3660 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3661 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3662 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3663 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3664 ;;Total ram usage:       15 bytes
  3665 ;; Hardware stack levels used:    1
  3666 ;; Hardware stack levels required when called:    1
  3667 ;; This function calls:
  3668 ;;		___ftpack
  3669 ;; This function is called by:
  3670 ;;		_fround
  3671 ;;		_scale
  3672 ;;		_printf
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           	psect	text8
  3677  0024EE                     __ptext8:
  3678                           	opt stack 0
  3679  0024EE                     ___ftmul:
  3680                           	opt stack 27
  3681                           
  3682                           ;incstack = 0
  3683  0024EE  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3684  0024F2  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3685  0024F4  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3686  0024F6  3416               	rlcf	___ftmul@f1+1,w,c
  3687  0024F8  361B               	rlcf	??___ftmul& (0+255),f,c
  3688  0024FA  E301               	bnc	u1761
  3689  0024FC  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3690  0024FE                     u1761:
  3691  0024FE  501B               	movf	??___ftmul,w,c
  3692  002500  6E1E               	movwf	___ftmul@exp,c
  3693  002502  501E               	movf	___ftmul@exp,w,c
  3694  002504  A4D8               	btfss	status,2,c
  3695  002506  D007               	goto	l504
  3696  002508  0E00               	movlw	0
  3697  00250A  6E15               	movwf	?___ftmul,c
  3698  00250C  0E00               	movlw	0
  3699  00250E  6E16               	movwf	?___ftmul+1,c
  3700  002510  0E00               	movlw	0
  3701  002512  6E17               	movwf	?___ftmul+2,c
  3702  002514  0012               	return	
  3703  002516                     l504:
  3704  002516  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3705  00251A  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3706  00251C  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3707  00251E  3419               	rlcf	___ftmul@f2+1,w,c
  3708  002520  361B               	rlcf	??___ftmul& (0+255),f,c
  3709  002522  E301               	bnc	u1781
  3710  002524  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3711  002526                     u1781:
  3712  002526  501B               	movf	??___ftmul,w,c
  3713  002528  6E23               	movwf	___ftmul@sign,c
  3714  00252A  5023               	movf	___ftmul@sign,w,c
  3715  00252C  A4D8               	btfss	status,2,c
  3716  00252E  D007               	goto	l506
  3717  002530  0E00               	movlw	0
  3718  002532  6E15               	movwf	?___ftmul,c
  3719  002534  0E00               	movlw	0
  3720  002536  6E16               	movwf	?___ftmul+1,c
  3721  002538  0E00               	movlw	0
  3722  00253A  6E17               	movwf	?___ftmul+2,c
  3723  00253C  0012               	return	
  3724  00253E                     l506:
  3725  00253E  5023               	movf	___ftmul@sign,w,c
  3726  002540  0F7B               	addlw	123
  3727  002542  261E               	addwf	___ftmul@exp,f,c
  3728  002544  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3729  002548  501A               	movf	___ftmul@f2+2,w,c
  3730  00254A  1A23               	xorwf	___ftmul@sign,f,c
  3731  00254C  0E80               	movlw	128
  3732  00254E  1623               	andwf	___ftmul@sign,f,c
  3733  002550  8E16               	bsf	___ftmul@f1+1,7,c
  3734  002552  8E19               	bsf	___ftmul@f2+1,7,c
  3735  002554  0EFF               	movlw	255
  3736  002556  1618               	andwf	___ftmul@f2,f,c
  3737  002558  0EFF               	movlw	255
  3738  00255A  1619               	andwf	___ftmul@f2+1,f,c
  3739  00255C  0E00               	movlw	0
  3740  00255E  161A               	andwf	___ftmul@f2+2,f,c
  3741  002560  0E00               	movlw	0
  3742  002562  6E1F               	movwf	___ftmul@f3_as_product,c
  3743  002564  0E00               	movlw	0
  3744  002566  6E20               	movwf	___ftmul@f3_as_product+1,c
  3745  002568  0E00               	movlw	0
  3746  00256A  6E21               	movwf	___ftmul@f3_as_product+2,c
  3747  00256C  0E07               	movlw	7
  3748  00256E  6E22               	movwf	___ftmul@cntr,c
  3749  002570  A015               	btfss	___ftmul@f1,0,c
  3750  002572  D006               	goto	l508
  3751  002574  5018               	movf	___ftmul@f2,w,c
  3752  002576  261F               	addwf	___ftmul@f3_as_product,f,c
  3753  002578  5019               	movf	___ftmul@f2+1,w,c
  3754  00257A  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3755  00257C  501A               	movf	___ftmul@f2+2,w,c
  3756  00257E  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3757  002580                     l508:
  3758  002580  90D8               	bcf	status,0,c
  3759  002582  3217               	rrcf	___ftmul@f1+2,f,c
  3760  002584  3216               	rrcf	___ftmul@f1+1,f,c
  3761  002586  3215               	rrcf	___ftmul@f1,f,c
  3762  002588  90D8               	bcf	status,0,c
  3763  00258A  3618               	rlcf	___ftmul@f2,f,c
  3764  00258C  3619               	rlcf	___ftmul@f2+1,f,c
  3765  00258E  361A               	rlcf	___ftmul@f2+2,f,c
  3766  002590  2E22               	decfsz	___ftmul@cntr,f,c
  3767  002592  D7EE               	goto	l507
  3768  002594  0E09               	movlw	9
  3769  002596  6E22               	movwf	___ftmul@cntr,c
  3770  002598  A015               	btfss	___ftmul@f1,0,c
  3771  00259A  D006               	goto	l511
  3772  00259C  5018               	movf	___ftmul@f2,w,c
  3773  00259E  261F               	addwf	___ftmul@f3_as_product,f,c
  3774  0025A0  5019               	movf	___ftmul@f2+1,w,c
  3775  0025A2  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3776  0025A4  501A               	movf	___ftmul@f2+2,w,c
  3777  0025A6  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3778  0025A8                     l511:
  3779  0025A8  90D8               	bcf	status,0,c
  3780  0025AA  3217               	rrcf	___ftmul@f1+2,f,c
  3781  0025AC  3216               	rrcf	___ftmul@f1+1,f,c
  3782  0025AE  3215               	rrcf	___ftmul@f1,f,c
  3783  0025B0  90D8               	bcf	status,0,c
  3784  0025B2  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3785  0025B4  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3786  0025B6  321F               	rrcf	___ftmul@f3_as_product,f,c
  3787  0025B8  2E22               	decfsz	___ftmul@cntr,f,c
  3788  0025BA  D7EE               	goto	l510
  3789  0025BC  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3790  0025C0  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3791  0025C4  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3792  0025C8  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3793  0025CC  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3794  0025D0  EC6B  F013         	call	___ftpack	;wreg free
  3795  0025D4  C001  F015         	movff	?___ftpack,?___ftmul
  3796  0025D8  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3797  0025DC  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3798  0025E0  0012               	return	
  3799  0025E2                     __end_of___ftmul:
  3800                           	opt stack 0
  3801                           tblptru	equ	0xFF8
  3802                           tblptrh	equ	0xFF7
  3803                           tblptrl	equ	0xFF6
  3804                           tablat	equ	0xFF5
  3805                           prodh	equ	0xFF4
  3806                           prodl	equ	0xFF3
  3807                           indf0	equ	0xFEF
  3808                           postinc0	equ	0xFEE
  3809                           fsr0h	equ	0xFEA
  3810                           fsr0l	equ	0xFE9
  3811                           wreg	equ	0xFE8
  3812                           postdec1	equ	0xFE5
  3813                           fsr1l	equ	0xFE1
  3814                           indf2	equ	0xFDF
  3815                           postinc2	equ	0xFDE
  3816                           postdec2	equ	0xFDD
  3817                           fsr2h	equ	0xFDA
  3818                           fsr2l	equ	0xFD9
  3819                           status	equ	0xFD8
  3820                           
  3821 ;; *************** function ___awmod *****************
  3822 ;; Defined at:
  3823 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3824 ;; Parameters:    Size  Location     Type
  3825 ;;  dividend        2    0[COMRAM] int 
  3826 ;;  divisor         2    2[COMRAM] int 
  3827 ;; Auto vars:     Size  Location     Type
  3828 ;;  sign            1    5[COMRAM] unsigned char 
  3829 ;;  counter         1    4[COMRAM] unsigned char 
  3830 ;; Return value:  Size  Location     Type
  3831 ;;                  2    0[COMRAM] int 
  3832 ;; Registers used:
  3833 ;;		wreg, status,2, status,0
  3834 ;; Tracked objects:
  3835 ;;		On entry : 0/0
  3836 ;;		On exit  : 0/0
  3837 ;;		Unchanged: 0/0
  3838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3839 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3840 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3842 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3843 ;;Total ram usage:        6 bytes
  3844 ;; Hardware stack levels used:    1
  3845 ;; This function calls:
  3846 ;;		Nothing
  3847 ;; This function is called by:
  3848 ;;		_fround
  3849 ;;		_scale
  3850 ;; This function uses a non-reentrant model
  3851 ;;
  3852                           
  3853                           	psect	text9
  3854  00291A                     __ptext9:
  3855                           	opt stack 0
  3856  00291A                     ___awmod:
  3857                           	opt stack 28
  3858                           
  3859                           ;incstack = 0
  3860  00291A  0E00               	movlw	0
  3861  00291C  6E06               	movwf	___awmod@sign,c
  3862  00291E  AE02               	btfss	___awmod@dividend+1,7,c
  3863  002920  D006               	goto	l357
  3864  002922  6C01               	negf	___awmod@dividend,c
  3865  002924  1E02               	comf	___awmod@dividend+1,f,c
  3866  002926  B0D8               	btfsc	status,0,c
  3867  002928  2A02               	incf	___awmod@dividend+1,f,c
  3868  00292A  0E01               	movlw	1
  3869  00292C  6E06               	movwf	___awmod@sign,c
  3870  00292E                     l357:
  3871  00292E  AE04               	btfss	___awmod@divisor+1,7,c
  3872  002930  D004               	goto	l358
  3873  002932  6C03               	negf	___awmod@divisor,c
  3874  002934  1E04               	comf	___awmod@divisor+1,f,c
  3875  002936  B0D8               	btfsc	status,0,c
  3876  002938  2A04               	incf	___awmod@divisor+1,f,c
  3877  00293A                     l358:
  3878  00293A  5003               	movf	___awmod@divisor,w,c
  3879  00293C  1004               	iorwf	___awmod@divisor+1,w,c
  3880  00293E  B4D8               	btfsc	status,2,c
  3881  002940  D018               	goto	l365
  3882  002942  0E01               	movlw	1
  3883  002944  6E05               	movwf	___awmod@counter,c
  3884  002946  D004               	goto	l360
  3885  002948  90D8               	bcf	status,0,c
  3886  00294A  3603               	rlcf	___awmod@divisor,f,c
  3887  00294C  3604               	rlcf	___awmod@divisor+1,f,c
  3888  00294E  2A05               	incf	___awmod@counter,f,c
  3889  002950                     l360:
  3890  002950  AE04               	btfss	___awmod@divisor+1,7,c
  3891  002952  D7FA               	goto	l361
  3892  002954                     u1910:
  3893  002954  5003               	movf	___awmod@divisor,w,c
  3894  002956  5C01               	subwf	___awmod@dividend,w,c
  3895  002958  5004               	movf	___awmod@divisor+1,w,c
  3896  00295A  5802               	subwfb	___awmod@dividend+1,w,c
  3897  00295C  A0D8               	btfss	status,0,c
  3898  00295E  D004               	goto	l364
  3899  002960  5003               	movf	___awmod@divisor,w,c
  3900  002962  5E01               	subwf	___awmod@dividend,f,c
  3901  002964  5004               	movf	___awmod@divisor+1,w,c
  3902  002966  5A02               	subwfb	___awmod@dividend+1,f,c
  3903  002968                     l364:
  3904  002968  90D8               	bcf	status,0,c
  3905  00296A  3204               	rrcf	___awmod@divisor+1,f,c
  3906  00296C  3203               	rrcf	___awmod@divisor,f,c
  3907  00296E  2E05               	decfsz	___awmod@counter,f,c
  3908  002970  D7F1               	goto	u1910
  3909  002972                     l365:
  3910  002972  5006               	movf	___awmod@sign,w,c
  3911  002974  B4D8               	btfsc	status,2,c
  3912  002976  D004               	goto	l366
  3913  002978  6C01               	negf	___awmod@dividend,c
  3914  00297A  1E02               	comf	___awmod@dividend+1,f,c
  3915  00297C  B0D8               	btfsc	status,0,c
  3916  00297E  2A02               	incf	___awmod@dividend+1,f,c
  3917  002980                     l366:
  3918  002980  C001  F001         	movff	___awmod@dividend,?___awmod
  3919  002984  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3920  002988  0012               	return	
  3921  00298A                     __end_of___awmod:
  3922                           	opt stack 0
  3923                           tblptru	equ	0xFF8
  3924                           tblptrh	equ	0xFF7
  3925                           tblptrl	equ	0xFF6
  3926                           tablat	equ	0xFF5
  3927                           prodh	equ	0xFF4
  3928                           prodl	equ	0xFF3
  3929                           indf0	equ	0xFEF
  3930                           postinc0	equ	0xFEE
  3931                           fsr0h	equ	0xFEA
  3932                           fsr0l	equ	0xFE9
  3933                           wreg	equ	0xFE8
  3934                           postdec1	equ	0xFE5
  3935                           fsr1l	equ	0xFE1
  3936                           indf2	equ	0xFDF
  3937                           postinc2	equ	0xFDE
  3938                           postdec2	equ	0xFDD
  3939                           fsr2h	equ	0xFDA
  3940                           fsr2l	equ	0xFD9
  3941                           status	equ	0xFD8
  3942                           
  3943 ;; *************** function ___awdiv *****************
  3944 ;; Defined at:
  3945 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3946 ;; Parameters:    Size  Location     Type
  3947 ;;  dividend        2    6[COMRAM] int 
  3948 ;;  divisor         2    8[COMRAM] int 
  3949 ;; Auto vars:     Size  Location     Type
  3950 ;;  quotient        2   12[COMRAM] int 
  3951 ;;  sign            1   11[COMRAM] unsigned char 
  3952 ;;  counter         1   10[COMRAM] unsigned char 
  3953 ;; Return value:  Size  Location     Type
  3954 ;;                  2    6[COMRAM] int 
  3955 ;; Registers used:
  3956 ;;		wreg, status,2, status,0
  3957 ;; Tracked objects:
  3958 ;;		On entry : 0/0
  3959 ;;		On exit  : 0/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3962 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3963 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3965 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3966 ;;Total ram usage:        8 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; This function calls:
  3969 ;;		Nothing
  3970 ;; This function is called by:
  3971 ;;		_fround
  3972 ;;		_scale
  3973 ;;		_printf
  3974 ;; This function uses a non-reentrant model
  3975 ;;
  3976                           
  3977                           	psect	text10
  3978  002814                     __ptext10:
  3979                           	opt stack 0
  3980  002814                     ___awdiv:
  3981                           	opt stack 28
  3982                           
  3983                           ;incstack = 0
  3984  002814  0E00               	movlw	0
  3985  002816  6E0C               	movwf	___awdiv@sign,c
  3986  002818  AE0A               	btfss	___awdiv@divisor+1,7,c
  3987  00281A  D006               	goto	l344
  3988  00281C  6C09               	negf	___awdiv@divisor,c
  3989  00281E  1E0A               	comf	___awdiv@divisor+1,f,c
  3990  002820  B0D8               	btfsc	status,0,c
  3991  002822  2A0A               	incf	___awdiv@divisor+1,f,c
  3992  002824  0E01               	movlw	1
  3993  002826  6E0C               	movwf	___awdiv@sign,c
  3994  002828                     l344:
  3995  002828  AE08               	btfss	___awdiv@dividend+1,7,c
  3996  00282A  D006               	goto	l345
  3997  00282C  6C07               	negf	___awdiv@dividend,c
  3998  00282E  1E08               	comf	___awdiv@dividend+1,f,c
  3999  002830  B0D8               	btfsc	status,0,c
  4000  002832  2A08               	incf	___awdiv@dividend+1,f,c
  4001  002834  0E01               	movlw	1
  4002  002836  1A0C               	xorwf	___awdiv@sign,f,c
  4003  002838                     l345:
  4004  002838  0E00               	movlw	0
  4005  00283A  6E0E               	movwf	___awdiv@quotient+1,c
  4006  00283C  0E00               	movlw	0
  4007  00283E  6E0D               	movwf	___awdiv@quotient,c
  4008  002840  5009               	movf	___awdiv@divisor,w,c
  4009  002842  100A               	iorwf	___awdiv@divisor+1,w,c
  4010  002844  B4D8               	btfsc	status,2,c
  4011  002846  D01C               	goto	l352
  4012  002848  0E01               	movlw	1
  4013  00284A  6E0B               	movwf	___awdiv@counter,c
  4014  00284C  D004               	goto	l347
  4015  00284E  90D8               	bcf	status,0,c
  4016  002850  3609               	rlcf	___awdiv@divisor,f,c
  4017  002852  360A               	rlcf	___awdiv@divisor+1,f,c
  4018  002854  2A0B               	incf	___awdiv@counter,f,c
  4019  002856                     l347:
  4020  002856  AE0A               	btfss	___awdiv@divisor+1,7,c
  4021  002858  D7FA               	goto	l348
  4022  00285A                     u1850:
  4023  00285A  90D8               	bcf	status,0,c
  4024  00285C  360D               	rlcf	___awdiv@quotient,f,c
  4025  00285E  360E               	rlcf	___awdiv@quotient+1,f,c
  4026  002860  5009               	movf	___awdiv@divisor,w,c
  4027  002862  5C07               	subwf	___awdiv@dividend,w,c
  4028  002864  500A               	movf	___awdiv@divisor+1,w,c
  4029  002866  5808               	subwfb	___awdiv@dividend+1,w,c
  4030  002868  A0D8               	btfss	status,0,c
  4031  00286A  D005               	goto	l351
  4032  00286C  5009               	movf	___awdiv@divisor,w,c
  4033  00286E  5E07               	subwf	___awdiv@dividend,f,c
  4034  002870  500A               	movf	___awdiv@divisor+1,w,c
  4035  002872  5A08               	subwfb	___awdiv@dividend+1,f,c
  4036  002874  800D               	bsf	___awdiv@quotient,0,c
  4037  002876                     l351:
  4038  002876  90D8               	bcf	status,0,c
  4039  002878  320A               	rrcf	___awdiv@divisor+1,f,c
  4040  00287A  3209               	rrcf	___awdiv@divisor,f,c
  4041  00287C  2E0B               	decfsz	___awdiv@counter,f,c
  4042  00287E  D7ED               	goto	u1850
  4043  002880                     l352:
  4044  002880  500C               	movf	___awdiv@sign,w,c
  4045  002882  B4D8               	btfsc	status,2,c
  4046  002884  D004               	goto	l353
  4047  002886  6C0D               	negf	___awdiv@quotient,c
  4048  002888  1E0E               	comf	___awdiv@quotient+1,f,c
  4049  00288A  B0D8               	btfsc	status,0,c
  4050  00288C  2A0E               	incf	___awdiv@quotient+1,f,c
  4051  00288E                     l353:
  4052  00288E  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4053  002892  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4054  002896  0012               	return	
  4055  002898                     __end_of___awdiv:
  4056                           	opt stack 0
  4057                           tblptru	equ	0xFF8
  4058                           tblptrh	equ	0xFF7
  4059                           tblptrl	equ	0xFF6
  4060                           tablat	equ	0xFF5
  4061                           prodh	equ	0xFF4
  4062                           prodl	equ	0xFF3
  4063                           indf0	equ	0xFEF
  4064                           postinc0	equ	0xFEE
  4065                           fsr0h	equ	0xFEA
  4066                           fsr0l	equ	0xFE9
  4067                           wreg	equ	0xFE8
  4068                           postdec1	equ	0xFE5
  4069                           fsr1l	equ	0xFE1
  4070                           indf2	equ	0xFDF
  4071                           postinc2	equ	0xFDE
  4072                           postdec2	equ	0xFDD
  4073                           fsr2h	equ	0xFDA
  4074                           fsr2l	equ	0xFD9
  4075                           status	equ	0xFD8
  4076                           
  4077 ;; *************** function __tdiv_to_l_ *****************
  4078 ;; Defined at:
  4079 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  4080 ;; Parameters:    Size  Location     Type
  4081 ;;  f1              3    0[COMRAM] float 
  4082 ;;  f2              3    3[COMRAM] float 
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;  quot            4    9[COMRAM] unsigned long 
  4085 ;;  exp1            1   14[COMRAM] unsigned char 
  4086 ;;  cntr            1   13[COMRAM] unsigned char 
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  4    0[COMRAM] unsigned long 
  4089 ;; Registers used:
  4090 ;;		wreg, status,2, status,0
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4096 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4097 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4098 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4099 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4100 ;;Total ram usage:       15 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; This function calls:
  4103 ;;		Nothing
  4104 ;; This function is called by:
  4105 ;;		_printf
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           	psect	text11
  4110  002294                     __ptext11:
  4111                           	opt stack 0
  4112  002294                     __tdiv_to_l_:
  4113                           	opt stack 29
  4114                           
  4115                           ;incstack = 0
  4116  002294  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4117  002298  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4118  00229A  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4119  00229C  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4120  00229E  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4121  0022A0  E301               	bnc	u2031
  4122  0022A2  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4123  0022A4                     u2031:
  4124  0022A4  5007               	movf	??__tdiv_to_l_,w,c
  4125  0022A6  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4126  0022A8  500F               	movf	__tdiv_to_l_@exp1,w,c
  4127  0022AA  A4D8               	btfss	status,2,c
  4128  0022AC  D009               	goto	l480
  4129  0022AE  0E00               	movlw	0
  4130  0022B0  6E01               	movwf	?__tdiv_to_l_,c
  4131  0022B2  0E00               	movlw	0
  4132  0022B4  6E02               	movwf	?__tdiv_to_l_+1,c
  4133  0022B6  0E00               	movlw	0
  4134  0022B8  6E03               	movwf	?__tdiv_to_l_+2,c
  4135  0022BA  0E00               	movlw	0
  4136  0022BC  6E04               	movwf	?__tdiv_to_l_+3,c
  4137  0022BE  0012               	return	
  4138  0022C0                     l480:
  4139  0022C0  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4140  0022C4  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4141  0022C6  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4142  0022C8  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4143  0022CA  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4144  0022CC  E301               	bnc	u2051
  4145  0022CE  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4146  0022D0                     u2051:
  4147  0022D0  5007               	movf	??__tdiv_to_l_,w,c
  4148  0022D2  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4149  0022D4  500E               	movf	__tdiv_to_l_@cntr,w,c
  4150  0022D6  A4D8               	btfss	status,2,c
  4151  0022D8  D009               	goto	l482
  4152  0022DA  0E00               	movlw	0
  4153  0022DC  6E01               	movwf	?__tdiv_to_l_,c
  4154  0022DE  0E00               	movlw	0
  4155  0022E0  6E02               	movwf	?__tdiv_to_l_+1,c
  4156  0022E2  0E00               	movlw	0
  4157  0022E4  6E03               	movwf	?__tdiv_to_l_+2,c
  4158  0022E6  0E00               	movlw	0
  4159  0022E8  6E04               	movwf	?__tdiv_to_l_+3,c
  4160  0022EA  0012               	return	
  4161  0022EC                     l482:
  4162  0022EC  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4163  0022EE  0EFF               	movlw	255
  4164  0022F0  1601               	andwf	__tdiv_to_l_@f1,f,c
  4165  0022F2  0EFF               	movlw	255
  4166  0022F4  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4167  0022F6  0E00               	movlw	0
  4168  0022F8  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4169  0022FA  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4170  0022FC  0EFF               	movlw	255
  4171  0022FE  1604               	andwf	__tdiv_to_l_@f2,f,c
  4172  002300  0EFF               	movlw	255
  4173  002302  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4174  002304  0E00               	movlw	0
  4175  002306  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4176  002308  0E00               	movlw	0
  4177  00230A  6E0A               	movwf	__tdiv_to_l_@quot,c
  4178  00230C  0E00               	movlw	0
  4179  00230E  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4180  002310  0E00               	movlw	0
  4181  002312  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4182  002314  0E00               	movlw	0
  4183  002316  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4184  002318  0E7F               	movlw	127
  4185  00231A  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4186  00231C  500E               	movf	__tdiv_to_l_@cntr,w,c
  4187  00231E  0F98               	addlw	152
  4188  002320  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4189  002322  0E18               	movlw	24
  4190  002324  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4191  002326                     l483:
  4192  002326  90D8               	bcf	status,0,c
  4193  002328  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4194  00232A  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4195  00232C  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4196  00232E  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4197  002330  5004               	movf	__tdiv_to_l_@f2,w,c
  4198  002332  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4199  002334  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4200  002336  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4201  002338  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4202  00233A  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4203  00233C  A0D8               	btfss	status,0,c
  4204  00233E  D007               	goto	l484
  4205  002340  5004               	movf	__tdiv_to_l_@f2,w,c
  4206  002342  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4207  002344  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4208  002346  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4209  002348  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4210  00234A  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4211  00234C  800A               	bsf	__tdiv_to_l_@quot,0,c
  4212  00234E                     l484:
  4213  00234E  90D8               	bcf	status,0,c
  4214  002350  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4215  002352  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4216  002354  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4217  002356  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4218  002358  D7E6               	goto	l483
  4219  00235A  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4220  00235C  D016               	goto	l486
  4221  00235E  500F               	movf	__tdiv_to_l_@exp1,w,c
  4222  002360  0A80               	xorlw	128
  4223  002362  0F97               	addlw	151
  4224  002364  B0D8               	btfsc	status,0,c
  4225  002366  D009               	goto	l487
  4226  002368  0E00               	movlw	0
  4227  00236A  6E01               	movwf	?__tdiv_to_l_,c
  4228  00236C  0E00               	movlw	0
  4229  00236E  6E02               	movwf	?__tdiv_to_l_+1,c
  4230  002370  0E00               	movlw	0
  4231  002372  6E03               	movwf	?__tdiv_to_l_+2,c
  4232  002374  0E00               	movlw	0
  4233  002376  6E04               	movwf	?__tdiv_to_l_+3,c
  4234  002378  0012               	return	
  4235  00237A                     l487:
  4236  00237A  90D8               	bcf	status,0,c
  4237  00237C  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4238  00237E  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4239  002380  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4240  002382  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4241  002384  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4242  002386  D7F9               	goto	l487
  4243  002388  D015               	goto	u2110
  4244  00238A                     l486:
  4245  00238A  0E17               	movlw	23
  4246  00238C  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4247  00238E  D00F               	goto	l492
  4248  002390  0E00               	movlw	0
  4249  002392  6E01               	movwf	?__tdiv_to_l_,c
  4250  002394  0E00               	movlw	0
  4251  002396  6E02               	movwf	?__tdiv_to_l_+1,c
  4252  002398  0E00               	movlw	0
  4253  00239A  6E03               	movwf	?__tdiv_to_l_+2,c
  4254  00239C  0E00               	movlw	0
  4255  00239E  6E04               	movwf	?__tdiv_to_l_+3,c
  4256  0023A0  0012               	return	
  4257  0023A2  90D8               	bcf	status,0,c
  4258  0023A4  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4259  0023A6  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4260  0023A8  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4261  0023AA  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4262  0023AC  060F               	decf	__tdiv_to_l_@exp1,f,c
  4263  0023AE                     l492:
  4264  0023AE  500F               	movf	__tdiv_to_l_@exp1,w,c
  4265  0023B0  A4D8               	btfss	status,2,c
  4266  0023B2  D7F7               	goto	l493
  4267  0023B4                     u2110:
  4268  0023B4  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4269  0023B8  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4270  0023BC  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4271  0023C0  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4272  0023C4  0012               	return		;funcret
  4273  0023C6                     __end_of__tdiv_to_l_:
  4274                           	opt stack 0
  4275                           tblptru	equ	0xFF8
  4276                           tblptrh	equ	0xFF7
  4277                           tblptrl	equ	0xFF6
  4278                           tablat	equ	0xFF5
  4279                           prodh	equ	0xFF4
  4280                           prodl	equ	0xFF3
  4281                           indf0	equ	0xFEF
  4282                           postinc0	equ	0xFEE
  4283                           fsr0h	equ	0xFEA
  4284                           fsr0l	equ	0xFE9
  4285                           wreg	equ	0xFE8
  4286                           postdec1	equ	0xFE5
  4287                           fsr1l	equ	0xFE1
  4288                           indf2	equ	0xFDF
  4289                           postinc2	equ	0xFDE
  4290                           postdec2	equ	0xFDD
  4291                           fsr2h	equ	0xFDA
  4292                           fsr2l	equ	0xFD9
  4293                           status	equ	0xFD8
  4294                           
  4295 ;; *************** function __div_to_l_ *****************
  4296 ;; Defined at:
  4297 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  4298 ;; Parameters:    Size  Location     Type
  4299 ;;  f1              3    0[COMRAM] unsigned long 
  4300 ;;  f2              3    3[COMRAM] unsigned long 
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;  quot            4    6[COMRAM] unsigned long 
  4303 ;;  exp1            1   11[COMRAM] unsigned char 
  4304 ;;  cntr            1   10[COMRAM] unsigned char 
  4305 ;; Return value:  Size  Location     Type
  4306 ;;                  4    0[COMRAM] unsigned long 
  4307 ;; Registers used:
  4308 ;;		wreg, status,2, status,0
  4309 ;; Tracked objects:
  4310 ;;		On entry : 0/0
  4311 ;;		On exit  : 0/0
  4312 ;;		Unchanged: 0/0
  4313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4314 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4317 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4318 ;;Total ram usage:       12 bytes
  4319 ;; Hardware stack levels used:    1
  4320 ;; This function calls:
  4321 ;;		Nothing
  4322 ;; This function is called by:
  4323 ;;		_printf
  4324 ;; This function uses a non-reentrant model
  4325 ;;
  4326                           
  4327                           	psect	text12
  4328  0023C6                     __ptext12:
  4329                           	opt stack 0
  4330  0023C6                     __div_to_l_:
  4331                           	opt stack 29
  4332                           
  4333                           ;incstack = 0
  4334  0023C6  3403               	rlcf	__div_to_l_@f1+2,w,c
  4335  0023C8  3404               	rlcf	__div_to_l_@f1+3,w,c
  4336  0023CA  6E0C               	movwf	__div_to_l_@exp1,c
  4337  0023CC  500C               	movf	__div_to_l_@exp1,w,c
  4338  0023CE  A4D8               	btfss	status,2,c
  4339  0023D0  D009               	goto	l376
  4340  0023D2  0E00               	movlw	0
  4341  0023D4  6E01               	movwf	?__div_to_l_,c
  4342  0023D6  0E00               	movlw	0
  4343  0023D8  6E02               	movwf	?__div_to_l_+1,c
  4344  0023DA  0E00               	movlw	0
  4345  0023DC  6E03               	movwf	?__div_to_l_+2,c
  4346  0023DE  0E00               	movlw	0
  4347  0023E0  6E04               	movwf	?__div_to_l_+3,c
  4348  0023E2  0012               	return	
  4349  0023E4                     l376:
  4350  0023E4  3406               	rlcf	__div_to_l_@f2+2,w,c
  4351  0023E6  3407               	rlcf	__div_to_l_@f2+3,w,c
  4352  0023E8  6E0B               	movwf	__div_to_l_@cntr,c
  4353  0023EA  500B               	movf	__div_to_l_@cntr,w,c
  4354  0023EC  A4D8               	btfss	status,2,c
  4355  0023EE  D009               	goto	l378
  4356  0023F0  0E00               	movlw	0
  4357  0023F2  6E01               	movwf	?__div_to_l_,c
  4358  0023F4  0E00               	movlw	0
  4359  0023F6  6E02               	movwf	?__div_to_l_+1,c
  4360  0023F8  0E00               	movlw	0
  4361  0023FA  6E03               	movwf	?__div_to_l_+2,c
  4362  0023FC  0E00               	movlw	0
  4363  0023FE  6E04               	movwf	?__div_to_l_+3,c
  4364  002400  0012               	return	
  4365  002402                     l378:
  4366  002402  8E03               	bsf	__div_to_l_@f1+2,7,c
  4367  002404  0EFF               	movlw	255
  4368  002406  1601               	andwf	__div_to_l_@f1,f,c
  4369  002408  0EFF               	movlw	255
  4370  00240A  1602               	andwf	__div_to_l_@f1+1,f,c
  4371  00240C  0EFF               	movlw	255
  4372  00240E  1603               	andwf	__div_to_l_@f1+2,f,c
  4373  002410  0E00               	movlw	0
  4374  002412  1604               	andwf	__div_to_l_@f1+3,f,c
  4375  002414  8E06               	bsf	__div_to_l_@f2+2,7,c
  4376  002416  0EFF               	movlw	255
  4377  002418  1604               	andwf	__div_to_l_@f2,f,c
  4378  00241A  0EFF               	movlw	255
  4379  00241C  1605               	andwf	__div_to_l_@f2+1,f,c
  4380  00241E  0EFF               	movlw	255
  4381  002420  1606               	andwf	__div_to_l_@f2+2,f,c
  4382  002422  0E00               	movlw	0
  4383  002424  1607               	andwf	__div_to_l_@f2+3,f,c
  4384  002426  0E00               	movlw	0
  4385  002428  6E07               	movwf	__div_to_l_@quot,c
  4386  00242A  0E00               	movlw	0
  4387  00242C  6E08               	movwf	__div_to_l_@quot+1,c
  4388  00242E  0E00               	movlw	0
  4389  002430  6E09               	movwf	__div_to_l_@quot+2,c
  4390  002432  0E00               	movlw	0
  4391  002434  6E0A               	movwf	__div_to_l_@quot+3,c
  4392  002436  0E7F               	movlw	127
  4393  002438  5E0C               	subwf	__div_to_l_@exp1,f,c
  4394  00243A  500B               	movf	__div_to_l_@cntr,w,c
  4395  00243C  0FA0               	addlw	160
  4396  00243E  5E0C               	subwf	__div_to_l_@exp1,f,c
  4397  002440  0E20               	movlw	32
  4398  002442  6E0B               	movwf	__div_to_l_@cntr,c
  4399  002444  90D8               	bcf	status,0,c
  4400  002446  3607               	rlcf	__div_to_l_@quot,f,c
  4401  002448  3608               	rlcf	__div_to_l_@quot+1,f,c
  4402  00244A  3609               	rlcf	__div_to_l_@quot+2,f,c
  4403  00244C  360A               	rlcf	__div_to_l_@quot+3,f,c
  4404  00244E  5004               	movf	__div_to_l_@f2,w,c
  4405  002450  5C01               	subwf	__div_to_l_@f1,w,c
  4406  002452  5005               	movf	__div_to_l_@f2+1,w,c
  4407  002454  5802               	subwfb	__div_to_l_@f1+1,w,c
  4408  002456  5006               	movf	__div_to_l_@f2+2,w,c
  4409  002458  5803               	subwfb	__div_to_l_@f1+2,w,c
  4410  00245A  5007               	movf	__div_to_l_@f2+3,w,c
  4411  00245C  5804               	subwfb	__div_to_l_@f1+3,w,c
  4412  00245E  A0D8               	btfss	status,0,c
  4413  002460  D009               	goto	l380
  4414  002462  5004               	movf	__div_to_l_@f2,w,c
  4415  002464  5E01               	subwf	__div_to_l_@f1,f,c
  4416  002466  5005               	movf	__div_to_l_@f2+1,w,c
  4417  002468  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4418  00246A  5006               	movf	__div_to_l_@f2+2,w,c
  4419  00246C  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4420  00246E  5007               	movf	__div_to_l_@f2+3,w,c
  4421  002470  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4422  002472  8007               	bsf	__div_to_l_@quot,0,c
  4423  002474                     l380:
  4424  002474  90D8               	bcf	status,0,c
  4425  002476  3601               	rlcf	__div_to_l_@f1,f,c
  4426  002478  3602               	rlcf	__div_to_l_@f1+1,f,c
  4427  00247A  3603               	rlcf	__div_to_l_@f1+2,f,c
  4428  00247C  3604               	rlcf	__div_to_l_@f1+3,f,c
  4429  00247E  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4430  002480  D7E1               	goto	l379
  4431  002482  AE0C               	btfss	__div_to_l_@exp1,7,c
  4432  002484  D016               	goto	l382
  4433  002486  500C               	movf	__div_to_l_@exp1,w,c
  4434  002488  0A80               	xorlw	128
  4435  00248A  0F9F               	addlw	159
  4436  00248C  B0D8               	btfsc	status,0,c
  4437  00248E  D009               	goto	l383
  4438  002490  0E00               	movlw	0
  4439  002492  6E01               	movwf	?__div_to_l_,c
  4440  002494  0E00               	movlw	0
  4441  002496  6E02               	movwf	?__div_to_l_+1,c
  4442  002498  0E00               	movlw	0
  4443  00249A  6E03               	movwf	?__div_to_l_+2,c
  4444  00249C  0E00               	movlw	0
  4445  00249E  6E04               	movwf	?__div_to_l_+3,c
  4446  0024A0  0012               	return	
  4447  0024A2                     l383:
  4448  0024A2  90D8               	bcf	status,0,c
  4449  0024A4  320A               	rrcf	__div_to_l_@quot+3,f,c
  4450  0024A6  3209               	rrcf	__div_to_l_@quot+2,f,c
  4451  0024A8  3208               	rrcf	__div_to_l_@quot+1,f,c
  4452  0024AA  3207               	rrcf	__div_to_l_@quot,f,c
  4453  0024AC  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4454  0024AE  D7F9               	goto	l383
  4455  0024B0  D015               	goto	u2180
  4456  0024B2                     l382:
  4457  0024B2  0E1F               	movlw	31
  4458  0024B4  640C               	cpfsgt	__div_to_l_@exp1,c
  4459  0024B6  D00F               	goto	l388
  4460  0024B8  0E00               	movlw	0
  4461  0024BA  6E01               	movwf	?__div_to_l_,c
  4462  0024BC  0E00               	movlw	0
  4463  0024BE  6E02               	movwf	?__div_to_l_+1,c
  4464  0024C0  0E00               	movlw	0
  4465  0024C2  6E03               	movwf	?__div_to_l_+2,c
  4466  0024C4  0E00               	movlw	0
  4467  0024C6  6E04               	movwf	?__div_to_l_+3,c
  4468  0024C8  0012               	return	
  4469  0024CA  90D8               	bcf	status,0,c
  4470  0024CC  3607               	rlcf	__div_to_l_@quot,f,c
  4471  0024CE  3608               	rlcf	__div_to_l_@quot+1,f,c
  4472  0024D0  3609               	rlcf	__div_to_l_@quot+2,f,c
  4473  0024D2  360A               	rlcf	__div_to_l_@quot+3,f,c
  4474  0024D4  060C               	decf	__div_to_l_@exp1,f,c
  4475  0024D6                     l388:
  4476  0024D6  500C               	movf	__div_to_l_@exp1,w,c
  4477  0024D8  A4D8               	btfss	status,2,c
  4478  0024DA  D7F7               	goto	l389
  4479  0024DC                     u2180:
  4480  0024DC  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4481  0024E0  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4482  0024E4  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4483  0024E8  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4484  0024EC  0012               	return		;funcret
  4485  0024EE                     __end_of__div_to_l_:
  4486                           	opt stack 0
  4487                           tblptru	equ	0xFF8
  4488                           tblptrh	equ	0xFF7
  4489                           tblptrl	equ	0xFF6
  4490                           tablat	equ	0xFF5
  4491                           prodh	equ	0xFF4
  4492                           prodl	equ	0xFF3
  4493                           indf0	equ	0xFEF
  4494                           postinc0	equ	0xFEE
  4495                           fsr0h	equ	0xFEA
  4496                           fsr0l	equ	0xFE9
  4497                           wreg	equ	0xFE8
  4498                           postdec1	equ	0xFE5
  4499                           fsr1l	equ	0xFE1
  4500                           indf2	equ	0xFDF
  4501                           postinc2	equ	0xFDE
  4502                           postdec2	equ	0xFDD
  4503                           fsr2h	equ	0xFDA
  4504                           fsr2l	equ	0xFD9
  4505                           status	equ	0xFD8
  4506                           
  4507 ;; *************** function ___lltoft *****************
  4508 ;; Defined at:
  4509 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  4510 ;; Parameters:    Size  Location     Type
  4511 ;;  c               4    8[COMRAM] unsigned long 
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;  exp             1   16[COMRAM] unsigned char 
  4514 ;; Return value:  Size  Location     Type
  4515 ;;                  3    8[COMRAM] float 
  4516 ;; Registers used:
  4517 ;;		wreg, status,2, status,0, cstack
  4518 ;; Tracked objects:
  4519 ;;		On entry : 0/0
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: 0/0
  4522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4523 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;Total ram usage:        9 bytes
  4528 ;; Hardware stack levels used:    1
  4529 ;; Hardware stack levels required when called:    1
  4530 ;; This function calls:
  4531 ;;		___ftpack
  4532 ;; This function is called by:
  4533 ;;		_printf
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           	psect	text13
  4538  0029F0                     __ptext13:
  4539                           	opt stack 0
  4540  0029F0                     ___lltoft:
  4541                           	opt stack 28
  4542                           
  4543                           ;incstack = 0
  4544  0029F0  0E8E               	movlw	142
  4545  0029F2  6E11               	movwf	___lltoft@exp,c
  4546  0029F4  D006               	goto	l587
  4547  0029F6  90D8               	bcf	status,0,c
  4548  0029F8  320C               	rrcf	___lltoft@c+3,f,c
  4549  0029FA  320B               	rrcf	___lltoft@c+2,f,c
  4550  0029FC  320A               	rrcf	___lltoft@c+1,f,c
  4551  0029FE  3209               	rrcf	___lltoft@c,f,c
  4552  002A00  2A11               	incf	___lltoft@exp,f,c
  4553  002A02                     l587:
  4554  002A02  0E00               	movlw	0
  4555  002A04  1409               	andwf	___lltoft@c,w,c
  4556  002A06  6E0D               	movwf	??___lltoft& (0+255),c
  4557  002A08  0E00               	movlw	0
  4558  002A0A  140A               	andwf	___lltoft@c+1,w,c
  4559  002A0C  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4560  002A0E  0E00               	movlw	0
  4561  002A10  140B               	andwf	___lltoft@c+2,w,c
  4562  002A12  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4563  002A14  0EFF               	movlw	255
  4564  002A16  140C               	andwf	___lltoft@c+3,w,c
  4565  002A18  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4566  002A1A  500D               	movf	??___lltoft,w,c
  4567  002A1C  100E               	iorwf	??___lltoft+1,w,c
  4568  002A1E  100F               	iorwf	??___lltoft+2,w,c
  4569  002A20  1010               	iorwf	??___lltoft+3,w,c
  4570  002A22  A4D8               	btfss	status,2,c
  4571  002A24  D7E8               	goto	l588
  4572  002A26  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4573  002A2A  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4574  002A2E  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4575  002A32  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4576  002A36  0E00               	movlw	0
  4577  002A38  6E05               	movwf	___ftpack@sign,c
  4578  002A3A  EC6B  F013         	call	___ftpack	;wreg free
  4579  002A3E  C001  F009         	movff	?___ftpack,?___lltoft
  4580  002A42  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4581  002A46  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4582  002A4A  0012               	return	
  4583  002A4C                     __end_of___lltoft:
  4584                           	opt stack 0
  4585                           tblptru	equ	0xFF8
  4586                           tblptrh	equ	0xFF7
  4587                           tblptrl	equ	0xFF6
  4588                           tablat	equ	0xFF5
  4589                           prodh	equ	0xFF4
  4590                           prodl	equ	0xFF3
  4591                           indf0	equ	0xFEF
  4592                           postinc0	equ	0xFEE
  4593                           fsr0h	equ	0xFEA
  4594                           fsr0l	equ	0xFE9
  4595                           wreg	equ	0xFE8
  4596                           postdec1	equ	0xFE5
  4597                           fsr1l	equ	0xFE1
  4598                           indf2	equ	0xFDF
  4599                           postinc2	equ	0xFDE
  4600                           postdec2	equ	0xFDD
  4601                           fsr2h	equ	0xFDA
  4602                           fsr2l	equ	0xFD9
  4603                           status	equ	0xFD8
  4604                           
  4605 ;; *************** function ___llmod *****************
  4606 ;; Defined at:
  4607 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4608 ;; Parameters:    Size  Location     Type
  4609 ;;  dividend        4   13[COMRAM] unsigned long 
  4610 ;;  divisor         4   17[COMRAM] unsigned long 
  4611 ;; Auto vars:     Size  Location     Type
  4612 ;;  counter         1   21[COMRAM] unsigned char 
  4613 ;; Return value:  Size  Location     Type
  4614 ;;                  4   13[COMRAM] unsigned long 
  4615 ;; Registers used:
  4616 ;;		wreg, status,2, status,0
  4617 ;; Tracked objects:
  4618 ;;		On entry : 0/0
  4619 ;;		On exit  : 0/0
  4620 ;;		Unchanged: 0/0
  4621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4622 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4623 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4626 ;;Total ram usage:        9 bytes
  4627 ;; Hardware stack levels used:    1
  4628 ;; This function calls:
  4629 ;;		Nothing
  4630 ;; This function is called by:
  4631 ;;		_printf
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           	psect	text14
  4636  00298A                     __ptext14:
  4637                           	opt stack 0
  4638  00298A                     ___llmod:
  4639                           	opt stack 29
  4640                           
  4641                           ;incstack = 0
  4642  00298A  5012               	movf	___llmod@divisor,w,c
  4643  00298C  1013               	iorwf	___llmod@divisor+1,w,c
  4644  00298E  1014               	iorwf	___llmod@divisor+2,w,c
  4645  002990  1015               	iorwf	___llmod@divisor+3,w,c
  4646  002992  B4D8               	btfsc	status,2,c
  4647  002994  D024               	goto	l581
  4648  002996  0E01               	movlw	1
  4649  002998  6E16               	movwf	___llmod@counter,c
  4650  00299A  D006               	goto	l576
  4651  00299C  90D8               	bcf	status,0,c
  4652  00299E  3612               	rlcf	___llmod@divisor,f,c
  4653  0029A0  3613               	rlcf	___llmod@divisor+1,f,c
  4654  0029A2  3614               	rlcf	___llmod@divisor+2,f,c
  4655  0029A4  3615               	rlcf	___llmod@divisor+3,f,c
  4656  0029A6  2A16               	incf	___llmod@counter,f,c
  4657  0029A8                     l576:
  4658  0029A8  AE15               	btfss	___llmod@divisor+3,7,c
  4659  0029AA  D7F8               	goto	l577
  4660  0029AC                     u2360:
  4661  0029AC  5012               	movf	___llmod@divisor,w,c
  4662  0029AE  5C0E               	subwf	___llmod@dividend,w,c
  4663  0029B0  5013               	movf	___llmod@divisor+1,w,c
  4664  0029B2  580F               	subwfb	___llmod@dividend+1,w,c
  4665  0029B4  5014               	movf	___llmod@divisor+2,w,c
  4666  0029B6  5810               	subwfb	___llmod@dividend+2,w,c
  4667  0029B8  5015               	movf	___llmod@divisor+3,w,c
  4668  0029BA  5811               	subwfb	___llmod@dividend+3,w,c
  4669  0029BC  A0D8               	btfss	status,0,c
  4670  0029BE  D008               	goto	l580
  4671  0029C0  5012               	movf	___llmod@divisor,w,c
  4672  0029C2  5E0E               	subwf	___llmod@dividend,f,c
  4673  0029C4  5013               	movf	___llmod@divisor+1,w,c
  4674  0029C6  5A0F               	subwfb	___llmod@dividend+1,f,c
  4675  0029C8  5014               	movf	___llmod@divisor+2,w,c
  4676  0029CA  5A10               	subwfb	___llmod@dividend+2,f,c
  4677  0029CC  5015               	movf	___llmod@divisor+3,w,c
  4678  0029CE  5A11               	subwfb	___llmod@dividend+3,f,c
  4679  0029D0                     l580:
  4680  0029D0  90D8               	bcf	status,0,c
  4681  0029D2  3215               	rrcf	___llmod@divisor+3,f,c
  4682  0029D4  3214               	rrcf	___llmod@divisor+2,f,c
  4683  0029D6  3213               	rrcf	___llmod@divisor+1,f,c
  4684  0029D8  3212               	rrcf	___llmod@divisor,f,c
  4685  0029DA  2E16               	decfsz	___llmod@counter,f,c
  4686  0029DC  D7E7               	goto	u2360
  4687  0029DE                     l581:
  4688  0029DE  C00E  F00E         	movff	___llmod@dividend,?___llmod
  4689  0029E2  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  4690  0029E6  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  4691  0029EA  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  4692  0029EE  0012               	return		;funcret
  4693  0029F0                     __end_of___llmod:
  4694                           	opt stack 0
  4695                           tblptru	equ	0xFF8
  4696                           tblptrh	equ	0xFF7
  4697                           tblptrl	equ	0xFF6
  4698                           tablat	equ	0xFF5
  4699                           prodh	equ	0xFF4
  4700                           prodl	equ	0xFF3
  4701                           indf0	equ	0xFEF
  4702                           postinc0	equ	0xFEE
  4703                           fsr0h	equ	0xFEA
  4704                           fsr0l	equ	0xFE9
  4705                           wreg	equ	0xFE8
  4706                           postdec1	equ	0xFE5
  4707                           fsr1l	equ	0xFE1
  4708                           indf2	equ	0xFDF
  4709                           postinc2	equ	0xFDE
  4710                           postdec2	equ	0xFDD
  4711                           fsr2h	equ	0xFDA
  4712                           fsr2l	equ	0xFD9
  4713                           status	equ	0xFD8
  4714                           
  4715 ;; *************** function ___lldiv *****************
  4716 ;; Defined at:
  4717 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4718 ;; Parameters:    Size  Location     Type
  4719 ;;  dividend        4    0[COMRAM] unsigned long 
  4720 ;;  divisor         4    4[COMRAM] unsigned long 
  4721 ;; Auto vars:     Size  Location     Type
  4722 ;;  quotient        4    8[COMRAM] unsigned long 
  4723 ;;  counter         1   12[COMRAM] unsigned char 
  4724 ;; Return value:  Size  Location     Type
  4725 ;;                  4    0[COMRAM] unsigned long 
  4726 ;; Registers used:
  4727 ;;		wreg, status,2, status,0
  4728 ;; Tracked objects:
  4729 ;;		On entry : 0/0
  4730 ;;		On exit  : 0/0
  4731 ;;		Unchanged: 0/0
  4732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4733 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4734 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4736 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4737 ;;Total ram usage:       13 bytes
  4738 ;; Hardware stack levels used:    1
  4739 ;; This function calls:
  4740 ;;		Nothing
  4741 ;; This function is called by:
  4742 ;;		_printf
  4743 ;; This function uses a non-reentrant model
  4744 ;;
  4745                           
  4746                           	psect	text15
  4747  002898                     __ptext15:
  4748                           	opt stack 0
  4749  002898                     ___lldiv:
  4750                           	opt stack 29
  4751                           
  4752                           ;incstack = 0
  4753  002898  0E00               	movlw	0
  4754  00289A  6E09               	movwf	___lldiv@quotient,c
  4755  00289C  0E00               	movlw	0
  4756  00289E  6E0A               	movwf	___lldiv@quotient+1,c
  4757  0028A0  0E00               	movlw	0
  4758  0028A2  6E0B               	movwf	___lldiv@quotient+2,c
  4759  0028A4  0E00               	movlw	0
  4760  0028A6  6E0C               	movwf	___lldiv@quotient+3,c
  4761  0028A8  5005               	movf	___lldiv@divisor,w,c
  4762  0028AA  1006               	iorwf	___lldiv@divisor+1,w,c
  4763  0028AC  1007               	iorwf	___lldiv@divisor+2,w,c
  4764  0028AE  1008               	iorwf	___lldiv@divisor+3,w,c
  4765  0028B0  B4D8               	btfsc	status,2,c
  4766  0028B2  D02A               	goto	l571
  4767  0028B4  0E01               	movlw	1
  4768  0028B6  6E0D               	movwf	___lldiv@counter,c
  4769  0028B8  D006               	goto	l566
  4770  0028BA  90D8               	bcf	status,0,c
  4771  0028BC  3605               	rlcf	___lldiv@divisor,f,c
  4772  0028BE  3606               	rlcf	___lldiv@divisor+1,f,c
  4773  0028C0  3607               	rlcf	___lldiv@divisor+2,f,c
  4774  0028C2  3608               	rlcf	___lldiv@divisor+3,f,c
  4775  0028C4  2A0D               	incf	___lldiv@counter,f,c
  4776  0028C6                     l566:
  4777  0028C6  AE08               	btfss	___lldiv@divisor+3,7,c
  4778  0028C8  D7F8               	goto	l567
  4779  0028CA                     u2330:
  4780  0028CA  90D8               	bcf	status,0,c
  4781  0028CC  3609               	rlcf	___lldiv@quotient,f,c
  4782  0028CE  360A               	rlcf	___lldiv@quotient+1,f,c
  4783  0028D0  360B               	rlcf	___lldiv@quotient+2,f,c
  4784  0028D2  360C               	rlcf	___lldiv@quotient+3,f,c
  4785  0028D4  5005               	movf	___lldiv@divisor,w,c
  4786  0028D6  5C01               	subwf	___lldiv@dividend,w,c
  4787  0028D8  5006               	movf	___lldiv@divisor+1,w,c
  4788  0028DA  5802               	subwfb	___lldiv@dividend+1,w,c
  4789  0028DC  5007               	movf	___lldiv@divisor+2,w,c
  4790  0028DE  5803               	subwfb	___lldiv@dividend+2,w,c
  4791  0028E0  5008               	movf	___lldiv@divisor+3,w,c
  4792  0028E2  5804               	subwfb	___lldiv@dividend+3,w,c
  4793  0028E4  A0D8               	btfss	status,0,c
  4794  0028E6  D009               	goto	l570
  4795  0028E8  5005               	movf	___lldiv@divisor,w,c
  4796  0028EA  5E01               	subwf	___lldiv@dividend,f,c
  4797  0028EC  5006               	movf	___lldiv@divisor+1,w,c
  4798  0028EE  5A02               	subwfb	___lldiv@dividend+1,f,c
  4799  0028F0  5007               	movf	___lldiv@divisor+2,w,c
  4800  0028F2  5A03               	subwfb	___lldiv@dividend+2,f,c
  4801  0028F4  5008               	movf	___lldiv@divisor+3,w,c
  4802  0028F6  5A04               	subwfb	___lldiv@dividend+3,f,c
  4803  0028F8  8009               	bsf	___lldiv@quotient,0,c
  4804  0028FA                     l570:
  4805  0028FA  90D8               	bcf	status,0,c
  4806  0028FC  3208               	rrcf	___lldiv@divisor+3,f,c
  4807  0028FE  3207               	rrcf	___lldiv@divisor+2,f,c
  4808  002900  3206               	rrcf	___lldiv@divisor+1,f,c
  4809  002902  3205               	rrcf	___lldiv@divisor,f,c
  4810  002904  2E0D               	decfsz	___lldiv@counter,f,c
  4811  002906  D7E1               	goto	u2330
  4812  002908                     l571:
  4813  002908  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4814  00290C  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4815  002910  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4816  002914  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4817  002918  0012               	return		;funcret
  4818  00291A                     __end_of___lldiv:
  4819                           	opt stack 0
  4820                           tblptru	equ	0xFF8
  4821                           tblptrh	equ	0xFF7
  4822                           tblptrl	equ	0xFF6
  4823                           tablat	equ	0xFF5
  4824                           prodh	equ	0xFF4
  4825                           prodl	equ	0xFF3
  4826                           indf0	equ	0xFEF
  4827                           postinc0	equ	0xFEE
  4828                           fsr0h	equ	0xFEA
  4829                           fsr0l	equ	0xFE9
  4830                           wreg	equ	0xFE8
  4831                           postdec1	equ	0xFE5
  4832                           fsr1l	equ	0xFE1
  4833                           indf2	equ	0xFDF
  4834                           postinc2	equ	0xFDE
  4835                           postdec2	equ	0xFDD
  4836                           fsr2h	equ	0xFDA
  4837                           fsr2l	equ	0xFD9
  4838                           status	equ	0xFD8
  4839                           
  4840 ;; *************** function ___fttol *****************
  4841 ;; Defined at:
  4842 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  4843 ;; Parameters:    Size  Location     Type
  4844 ;;  f1              3   42[COMRAM] float 
  4845 ;; Auto vars:     Size  Location     Type
  4846 ;;  lval            4   52[COMRAM] unsigned long 
  4847 ;;  exp1            1   56[COMRAM] unsigned char 
  4848 ;;  sign1           1   51[COMRAM] unsigned char 
  4849 ;; Return value:  Size  Location     Type
  4850 ;;                  4   42[COMRAM] long 
  4851 ;; Registers used:
  4852 ;;		wreg, status,2, status,0
  4853 ;; Tracked objects:
  4854 ;;		On entry : 0/0
  4855 ;;		On exit  : 0/0
  4856 ;;		Unchanged: 0/0
  4857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4858 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4859 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4860 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;Total ram usage:       15 bytes
  4863 ;; Hardware stack levels used:    1
  4864 ;; This function calls:
  4865 ;;		Nothing
  4866 ;; This function is called by:
  4867 ;;		_printf
  4868 ;; This function uses a non-reentrant model
  4869 ;;
  4870                           
  4871                           	psect	text16
  4872  0025E2                     __ptext16:
  4873                           	opt stack 0
  4874  0025E2                     ___fttol:
  4875                           	opt stack 29
  4876                           
  4877                           ;incstack = 0
  4878  0025E2  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4879  0025E6  6A30               	clrf	(??___fttol+1)& (0+255),c
  4880  0025E8  6A31               	clrf	(??___fttol+2)& (0+255),c
  4881  0025EA  342C               	rlcf	___fttol@f1+1,w,c
  4882  0025EC  362F               	rlcf	??___fttol& (0+255),f,c
  4883  0025EE  E301               	bnc	u2241
  4884  0025F0  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4885  0025F2                     u2241:
  4886  0025F2  502F               	movf	??___fttol,w,c
  4887  0025F4  6E39               	movwf	___fttol@exp1,c
  4888  0025F6  5039               	movf	___fttol@exp1,w,c
  4889  0025F8  A4D8               	btfss	status,2,c
  4890  0025FA  D009               	goto	l525
  4891  0025FC  0E00               	movlw	0
  4892  0025FE  6E2B               	movwf	?___fttol,c
  4893  002600  0E00               	movlw	0
  4894  002602  6E2C               	movwf	?___fttol+1,c
  4895  002604  0E00               	movlw	0
  4896  002606  6E2D               	movwf	?___fttol+2,c
  4897  002608  0E00               	movlw	0
  4898  00260A  6E2E               	movwf	?___fttol+3,c
  4899  00260C  0012               	return	
  4900  00260E                     l525:
  4901  00260E  0E17               	movlw	23
  4902  002610  6E2F               	movwf	??___fttol& (0+255),c
  4903  002612  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4904  002616  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4905  00261A  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4906  00261E  282F               	incf	??___fttol,w,c
  4907  002620  6E33               	movwf	(??___fttol+4)& (0+255),c
  4908  002622  D004               	goto	u2260
  4909  002624                     u2265:
  4910  002624  90D8               	bcf	status,0,c
  4911  002626  3232               	rrcf	??___fttol+3,f,c
  4912  002628  3231               	rrcf	??___fttol+2,f,c
  4913  00262A  3230               	rrcf	??___fttol+1,f,c
  4914  00262C                     u2260:
  4915  00262C  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4916  00262E  D7FA               	goto	u2265
  4917  002630  5030               	movf	??___fttol+1,w,c
  4918  002632  6E34               	movwf	___fttol@sign1,c
  4919  002634  8E2C               	bsf	___fttol@f1+1,7,c
  4920  002636  0EFF               	movlw	255
  4921  002638  162B               	andwf	___fttol@f1,f,c
  4922  00263A  0EFF               	movlw	255
  4923  00263C  162C               	andwf	___fttol@f1+1,f,c
  4924  00263E  0E00               	movlw	0
  4925  002640  162D               	andwf	___fttol@f1+2,f,c
  4926  002642  502B               	movf	___fttol@f1,w,c
  4927  002644  6E35               	movwf	___fttol@lval,c
  4928  002646  502C               	movf	___fttol@f1+1,w,c
  4929  002648  6E36               	movwf	___fttol@lval+1,c
  4930  00264A  502D               	movf	___fttol@f1+2,w,c
  4931  00264C  6E37               	movwf	___fttol@lval+2,c
  4932  00264E  6A38               	clrf	___fttol@lval+3,c
  4933  002650  0E8E               	movlw	142
  4934  002652  5E39               	subwf	___fttol@exp1,f,c
  4935  002654  AE39               	btfss	___fttol@exp1,7,c
  4936  002656  D016               	goto	l527
  4937  002658  5039               	movf	___fttol@exp1,w,c
  4938  00265A  0A80               	xorlw	128
  4939  00265C  0F8F               	addlw	143
  4940  00265E  B0D8               	btfsc	status,0,c
  4941  002660  D009               	goto	l528
  4942  002662  0E00               	movlw	0
  4943  002664  6E2B               	movwf	?___fttol,c
  4944  002666  0E00               	movlw	0
  4945  002668  6E2C               	movwf	?___fttol+1,c
  4946  00266A  0E00               	movlw	0
  4947  00266C  6E2D               	movwf	?___fttol+2,c
  4948  00266E  0E00               	movlw	0
  4949  002670  6E2E               	movwf	?___fttol+3,c
  4950  002672  0012               	return	
  4951  002674                     l528:
  4952  002674  90D8               	bcf	status,0,c
  4953  002676  3238               	rrcf	___fttol@lval+3,f,c
  4954  002678  3237               	rrcf	___fttol@lval+2,f,c
  4955  00267A  3236               	rrcf	___fttol@lval+1,f,c
  4956  00267C  3235               	rrcf	___fttol@lval,f,c
  4957  00267E  3E39               	incfsz	___fttol@exp1,f,c
  4958  002680  D7F9               	goto	l528
  4959  002682  D015               	goto	u2300
  4960  002684                     l527:
  4961  002684  0E17               	movlw	23
  4962  002686  6439               	cpfsgt	___fttol@exp1,c
  4963  002688  D00F               	goto	l533
  4964  00268A  0E00               	movlw	0
  4965  00268C  6E2B               	movwf	?___fttol,c
  4966  00268E  0E00               	movlw	0
  4967  002690  6E2C               	movwf	?___fttol+1,c
  4968  002692  0E00               	movlw	0
  4969  002694  6E2D               	movwf	?___fttol+2,c
  4970  002696  0E00               	movlw	0
  4971  002698  6E2E               	movwf	?___fttol+3,c
  4972  00269A  0012               	return	
  4973  00269C  90D8               	bcf	status,0,c
  4974  00269E  3635               	rlcf	___fttol@lval,f,c
  4975  0026A0  3636               	rlcf	___fttol@lval+1,f,c
  4976  0026A2  3637               	rlcf	___fttol@lval+2,f,c
  4977  0026A4  3638               	rlcf	___fttol@lval+3,f,c
  4978  0026A6  0639               	decf	___fttol@exp1,f,c
  4979  0026A8                     l533:
  4980  0026A8  5039               	movf	___fttol@exp1,w,c
  4981  0026AA  A4D8               	btfss	status,2,c
  4982  0026AC  D7F7               	goto	l534
  4983  0026AE                     u2300:
  4984  0026AE  5034               	movf	___fttol@sign1,w,c
  4985  0026B0  B4D8               	btfsc	status,2,c
  4986  0026B2  D008               	goto	l536
  4987  0026B4  1E38               	comf	___fttol@lval+3,f,c
  4988  0026B6  1E37               	comf	___fttol@lval+2,f,c
  4989  0026B8  1E36               	comf	___fttol@lval+1,f,c
  4990  0026BA  6C35               	negf	___fttol@lval,c
  4991  0026BC  0E00               	movlw	0
  4992  0026BE  2236               	addwfc	___fttol@lval+1,f,c
  4993  0026C0  2237               	addwfc	___fttol@lval+2,f,c
  4994  0026C2  2238               	addwfc	___fttol@lval+3,f,c
  4995  0026C4                     l536:
  4996  0026C4  C035  F02B         	movff	___fttol@lval,?___fttol
  4997  0026C8  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4998  0026CC  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4999  0026D0  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  5000  0026D4  0012               	return	
  5001  0026D6                     __end_of___fttol:
  5002                           	opt stack 0
  5003                           tblptru	equ	0xFF8
  5004                           tblptrh	equ	0xFF7
  5005                           tblptrl	equ	0xFF6
  5006                           tablat	equ	0xFF5
  5007                           prodh	equ	0xFF4
  5008                           prodl	equ	0xFF3
  5009                           indf0	equ	0xFEF
  5010                           postinc0	equ	0xFEE
  5011                           fsr0h	equ	0xFEA
  5012                           fsr0l	equ	0xFE9
  5013                           wreg	equ	0xFE8
  5014                           postdec1	equ	0xFE5
  5015                           fsr1l	equ	0xFE1
  5016                           indf2	equ	0xFDF
  5017                           postinc2	equ	0xFDE
  5018                           postdec2	equ	0xFDD
  5019                           fsr2h	equ	0xFDA
  5020                           fsr2l	equ	0xFD9
  5021                           status	equ	0xFD8
  5022                           
  5023 ;; *************** function ___ftsub *****************
  5024 ;; Defined at:
  5025 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  5026 ;; Parameters:    Size  Location     Type
  5027 ;;  f1              3   57[COMRAM] float 
  5028 ;;  f2              3   60[COMRAM] float 
  5029 ;; Auto vars:     Size  Location     Type
  5030 ;;		None
  5031 ;; Return value:  Size  Location     Type
  5032 ;;                  3   57[COMRAM] float 
  5033 ;; Registers used:
  5034 ;;		wreg, status,2, status,0, cstack
  5035 ;; Tracked objects:
  5036 ;;		On entry : 0/0
  5037 ;;		On exit  : 0/0
  5038 ;;		Unchanged: 0/0
  5039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5040 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5043 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5044 ;;Total ram usage:        6 bytes
  5045 ;; Hardware stack levels used:    1
  5046 ;; Hardware stack levels required when called:    2
  5047 ;; This function calls:
  5048 ;;		___ftadd
  5049 ;; This function is called by:
  5050 ;;		_printf
  5051 ;; This function uses a non-reentrant model
  5052 ;;
  5053                           
  5054                           	psect	text17
  5055  002AE8                     __ptext17:
  5056                           	opt stack 0
  5057  002AE8                     ___ftsub:
  5058                           	opt stack 27
  5059                           
  5060                           ;incstack = 0
  5061  002AE8  503D               	movf	___ftsub@f2,w,c
  5062  002AEA  103E               	iorwf	___ftsub@f2+1,w,c
  5063  002AEC  103F               	iorwf	___ftsub@f2+2,w,c
  5064  002AEE  B4D8               	btfsc	status,2,c
  5065  002AF0  D006               	goto	l521
  5066  002AF2  0E00               	movlw	0
  5067  002AF4  1A3D               	xorwf	___ftsub@f2,f,c
  5068  002AF6  0E00               	movlw	0
  5069  002AF8  1A3E               	xorwf	___ftsub@f2+1,f,c
  5070  002AFA  0E80               	movlw	128
  5071  002AFC  1A3F               	xorwf	___ftsub@f2+2,f,c
  5072  002AFE                     l521:
  5073  002AFE  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  5074  002B02  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  5075  002B06  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  5076  002B0A  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  5077  002B0E  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  5078  002B12  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  5079  002B16  EC74  F010         	call	___ftadd	;wreg free
  5080  002B1A  C02E  F03A         	movff	?___ftadd,?___ftsub
  5081  002B1E  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  5082  002B22  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  5083  002B26  0012               	return	
  5084  002B28                     __end_of___ftsub:
  5085                           	opt stack 0
  5086                           tblptru	equ	0xFF8
  5087                           tblptrh	equ	0xFF7
  5088                           tblptrl	equ	0xFF6
  5089                           tablat	equ	0xFF5
  5090                           prodh	equ	0xFF4
  5091                           prodl	equ	0xFF3
  5092                           indf0	equ	0xFEF
  5093                           postinc0	equ	0xFEE
  5094                           fsr0h	equ	0xFEA
  5095                           fsr0l	equ	0xFE9
  5096                           wreg	equ	0xFE8
  5097                           postdec1	equ	0xFE5
  5098                           fsr1l	equ	0xFE1
  5099                           indf2	equ	0xFDF
  5100                           postinc2	equ	0xFDE
  5101                           postdec2	equ	0xFDD
  5102                           fsr2h	equ	0xFDA
  5103                           fsr2l	equ	0xFD9
  5104                           status	equ	0xFD8
  5105                           
  5106 ;; *************** function ___ftadd *****************
  5107 ;; Defined at:
  5108 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  5109 ;; Parameters:    Size  Location     Type
  5110 ;;  f1              3   45[COMRAM] float 
  5111 ;;  f2              3   48[COMRAM] float 
  5112 ;; Auto vars:     Size  Location     Type
  5113 ;;  exp1            1   56[COMRAM] unsigned char 
  5114 ;;  exp2            1   55[COMRAM] unsigned char 
  5115 ;;  sign            1   54[COMRAM] unsigned char 
  5116 ;; Return value:  Size  Location     Type
  5117 ;;                  3   45[COMRAM] float 
  5118 ;; Registers used:
  5119 ;;		wreg, status,2, status,0, cstack
  5120 ;; Tracked objects:
  5121 ;;		On entry : 0/0
  5122 ;;		On exit  : 0/0
  5123 ;;		Unchanged: 0/0
  5124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5125 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5126 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5127 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5128 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5129 ;;Total ram usage:       12 bytes
  5130 ;; Hardware stack levels used:    1
  5131 ;; Hardware stack levels required when called:    1
  5132 ;; This function calls:
  5133 ;;		___ftpack
  5134 ;; This function is called by:
  5135 ;;		_printf
  5136 ;;		___ftsub
  5137 ;; This function uses a non-reentrant model
  5138 ;;
  5139                           
  5140                           	psect	text18
  5141  0020E8                     __ptext18:
  5142                           	opt stack 0
  5143  0020E8                     ___ftadd:
  5144                           	opt stack 27
  5145                           
  5146                           ;incstack = 0
  5147  0020E8  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  5148  0020EC  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5149  0020EE  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5150  0020F0  342F               	rlcf	___ftadd@f1+1,w,c
  5151  0020F2  3634               	rlcf	??___ftadd& (0+255),f,c
  5152  0020F4  E301               	bnc	u1551
  5153  0020F6  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5154  0020F8                     u1551:
  5155  0020F8  5034               	movf	??___ftadd,w,c
  5156  0020FA  6E39               	movwf	___ftadd@exp1,c
  5157  0020FC  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  5158  002100  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5159  002102  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5160  002104  3432               	rlcf	___ftadd@f2+1,w,c
  5161  002106  3634               	rlcf	??___ftadd& (0+255),f,c
  5162  002108  E301               	bnc	u1561
  5163  00210A  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5164  00210C                     u1561:
  5165  00210C  5034               	movf	??___ftadd,w,c
  5166  00210E  6E38               	movwf	___ftadd@exp2,c
  5167  002110  5039               	movf	___ftadd@exp1,w,c
  5168  002112  B4D8               	btfsc	status,2,c
  5169  002114  D00B               	goto	u1590
  5170  002116  5038               	movf	___ftadd@exp2,w,c
  5171  002118  5C39               	subwf	___ftadd@exp1,w,c
  5172  00211A  B0D8               	btfsc	status,0,c
  5173  00211C  D00E               	goto	l439
  5174  00211E  5039               	movf	___ftadd@exp1,w,c
  5175  002120  0800               	sublw	0
  5176  002122  2438               	addwf	___ftadd@exp2,w,c
  5177  002124  6E34               	movwf	??___ftadd& (0+255),c
  5178  002126  0E18               	movlw	24
  5179  002128  6434               	cpfsgt	??___ftadd,c
  5180  00212A  D007               	goto	l439
  5181  00212C                     u1590:
  5182  00212C  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5183  002130  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5184  002134  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5185  002138  0012               	return	
  5186  00213A                     l439:
  5187  00213A  5038               	movf	___ftadd@exp2,w,c
  5188  00213C  B4D8               	btfsc	status,2,c
  5189  00213E  D00B               	goto	u1620
  5190  002140  5039               	movf	___ftadd@exp1,w,c
  5191  002142  5C38               	subwf	___ftadd@exp2,w,c
  5192  002144  B0D8               	btfsc	status,0,c
  5193  002146  D00E               	goto	l443
  5194  002148  5038               	movf	___ftadd@exp2,w,c
  5195  00214A  0800               	sublw	0
  5196  00214C  2439               	addwf	___ftadd@exp1,w,c
  5197  00214E  6E34               	movwf	??___ftadd& (0+255),c
  5198  002150  0E18               	movlw	24
  5199  002152  6434               	cpfsgt	??___ftadd,c
  5200  002154  D007               	goto	l443
  5201  002156                     u1620:
  5202  002156  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  5203  00215A  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  5204  00215E  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  5205  002162  0012               	return	
  5206  002164                     l443:
  5207  002164  0E06               	movlw	6
  5208  002166  6E37               	movwf	___ftadd@sign,c
  5209  002168  BE30               	btfsc	___ftadd@f1+2,7,c
  5210  00216A  8E37               	bsf	___ftadd@sign,7,c
  5211  00216C  BE33               	btfsc	___ftadd@f2+2,7,c
  5212  00216E  8C37               	bsf	___ftadd@sign,6,c
  5213  002170  8E2F               	bsf	___ftadd@f1+1,7,c
  5214  002172  0EFF               	movlw	255
  5215  002174  162E               	andwf	___ftadd@f1,f,c
  5216  002176  0EFF               	movlw	255
  5217  002178  162F               	andwf	___ftadd@f1+1,f,c
  5218  00217A  0E00               	movlw	0
  5219  00217C  1630               	andwf	___ftadd@f1+2,f,c
  5220  00217E  8E32               	bsf	___ftadd@f2+1,7,c
  5221  002180  0EFF               	movlw	255
  5222  002182  1631               	andwf	___ftadd@f2,f,c
  5223  002184  0EFF               	movlw	255
  5224  002186  1632               	andwf	___ftadd@f2+1,f,c
  5225  002188  0E00               	movlw	0
  5226  00218A  1633               	andwf	___ftadd@f2+2,f,c
  5227  00218C  5038               	movf	___ftadd@exp2,w,c
  5228  00218E  5C39               	subwf	___ftadd@exp1,w,c
  5229  002190  B0D8               	btfsc	status,0,c
  5230  002192  D01B               	goto	l448
  5231  002194                     u1650:
  5232  002194  90D8               	bcf	status,0,c
  5233  002196  3631               	rlcf	___ftadd@f2,f,c
  5234  002198  3632               	rlcf	___ftadd@f2+1,f,c
  5235  00219A  3633               	rlcf	___ftadd@f2+2,f,c
  5236  00219C  0638               	decf	___ftadd@exp2,f,c
  5237  00219E  5039               	movf	___ftadd@exp1,w,c
  5238  0021A0  1838               	xorwf	___ftadd@exp2,w,c
  5239  0021A2  B4D8               	btfsc	status,2,c
  5240  0021A4  D00D               	goto	l453
  5241  0021A6  0637               	decf	___ftadd@sign,f,c
  5242  0021A8  C037  F034         	movff	___ftadd@sign,??___ftadd
  5243  0021AC  0E07               	movlw	7
  5244  0021AE  1634               	andwf	??___ftadd,f,c
  5245  0021B0  B4D8               	btfsc	status,2,c
  5246  0021B2  D006               	goto	l453
  5247  0021B4  D7EF               	goto	u1650
  5248  0021B6  90D8               	bcf	status,0,c
  5249  0021B8  3230               	rrcf	___ftadd@f1+2,f,c
  5250  0021BA  322F               	rrcf	___ftadd@f1+1,f,c
  5251  0021BC  322E               	rrcf	___ftadd@f1,f,c
  5252  0021BE  2A39               	incf	___ftadd@exp1,f,c
  5253  0021C0                     l453:
  5254  0021C0  5038               	movf	___ftadd@exp2,w,c
  5255  0021C2  1839               	xorwf	___ftadd@exp1,w,c
  5256  0021C4  B4D8               	btfsc	status,2,c
  5257  0021C6  D01F               	goto	u1720
  5258  0021C8  D7F6               	goto	l454
  5259  0021CA                     l448:
  5260  0021CA  5039               	movf	___ftadd@exp1,w,c
  5261  0021CC  5C38               	subwf	___ftadd@exp2,w,c
  5262  0021CE  B0D8               	btfsc	status,0,c
  5263  0021D0  D01A               	goto	u1720
  5264  0021D2                     u1690:
  5265  0021D2  90D8               	bcf	status,0,c
  5266  0021D4  362E               	rlcf	___ftadd@f1,f,c
  5267  0021D6  362F               	rlcf	___ftadd@f1+1,f,c
  5268  0021D8  3630               	rlcf	___ftadd@f1+2,f,c
  5269  0021DA  0639               	decf	___ftadd@exp1,f,c
  5270  0021DC  5039               	movf	___ftadd@exp1,w,c
  5271  0021DE  1838               	xorwf	___ftadd@exp2,w,c
  5272  0021E0  B4D8               	btfsc	status,2,c
  5273  0021E2  D00D               	goto	l462
  5274  0021E4  0637               	decf	___ftadd@sign,f,c
  5275  0021E6  C037  F034         	movff	___ftadd@sign,??___ftadd
  5276  0021EA  0E07               	movlw	7
  5277  0021EC  1634               	andwf	??___ftadd,f,c
  5278  0021EE  B4D8               	btfsc	status,2,c
  5279  0021F0  D006               	goto	l462
  5280  0021F2  D7EF               	goto	u1690
  5281  0021F4  90D8               	bcf	status,0,c
  5282  0021F6  3233               	rrcf	___ftadd@f2+2,f,c
  5283  0021F8  3232               	rrcf	___ftadd@f2+1,f,c
  5284  0021FA  3231               	rrcf	___ftadd@f2,f,c
  5285  0021FC  2A38               	incf	___ftadd@exp2,f,c
  5286  0021FE                     l462:
  5287  0021FE  5038               	movf	___ftadd@exp2,w,c
  5288  002200  1839               	xorwf	___ftadd@exp1,w,c
  5289  002202  A4D8               	btfss	status,2,c
  5290  002204  D7F7               	goto	l463
  5291  002206                     u1720:
  5292  002206  AE37               	btfss	___ftadd@sign,7,c
  5293  002208  D00C               	goto	l465
  5294  00220A  0EFF               	movlw	255
  5295  00220C  1A2E               	xorwf	___ftadd@f1,f,c
  5296  00220E  0EFF               	movlw	255
  5297  002210  1A2F               	xorwf	___ftadd@f1+1,f,c
  5298  002212  0EFF               	movlw	255
  5299  002214  1A30               	xorwf	___ftadd@f1+2,f,c
  5300  002216  0E01               	movlw	1
  5301  002218  262E               	addwf	___ftadd@f1,f,c
  5302  00221A  0E00               	movlw	0
  5303  00221C  222F               	addwfc	___ftadd@f1+1,f,c
  5304  00221E  0E00               	movlw	0
  5305  002220  2230               	addwfc	___ftadd@f1+2,f,c
  5306  002222                     l465:
  5307  002222  AC37               	btfss	___ftadd@sign,6,c
  5308  002224  D00C               	goto	l466
  5309  002226  0EFF               	movlw	255
  5310  002228  1A31               	xorwf	___ftadd@f2,f,c
  5311  00222A  0EFF               	movlw	255
  5312  00222C  1A32               	xorwf	___ftadd@f2+1,f,c
  5313  00222E  0EFF               	movlw	255
  5314  002230  1A33               	xorwf	___ftadd@f2+2,f,c
  5315  002232  0E01               	movlw	1
  5316  002234  2631               	addwf	___ftadd@f2,f,c
  5317  002236  0E00               	movlw	0
  5318  002238  2232               	addwfc	___ftadd@f2+1,f,c
  5319  00223A  0E00               	movlw	0
  5320  00223C  2233               	addwfc	___ftadd@f2+2,f,c
  5321  00223E                     l466:
  5322  00223E  0E00               	movlw	0
  5323  002240  6E37               	movwf	___ftadd@sign,c
  5324  002242  502E               	movf	___ftadd@f1,w,c
  5325  002244  2631               	addwf	___ftadd@f2,f,c
  5326  002246  502F               	movf	___ftadd@f1+1,w,c
  5327  002248  2232               	addwfc	___ftadd@f2+1,f,c
  5328  00224A  5030               	movf	___ftadd@f1+2,w,c
  5329  00224C  2233               	addwfc	___ftadd@f2+2,f,c
  5330  00224E  AE33               	btfss	___ftadd@f2+2,7,c
  5331  002250  D00E               	goto	l467
  5332  002252  0EFF               	movlw	255
  5333  002254  1A31               	xorwf	___ftadd@f2,f,c
  5334  002256  0EFF               	movlw	255
  5335  002258  1A32               	xorwf	___ftadd@f2+1,f,c
  5336  00225A  0EFF               	movlw	255
  5337  00225C  1A33               	xorwf	___ftadd@f2+2,f,c
  5338  00225E  0E01               	movlw	1
  5339  002260  2631               	addwf	___ftadd@f2,f,c
  5340  002262  0E00               	movlw	0
  5341  002264  2232               	addwfc	___ftadd@f2+1,f,c
  5342  002266  0E00               	movlw	0
  5343  002268  2233               	addwfc	___ftadd@f2+2,f,c
  5344  00226A  0E01               	movlw	1
  5345  00226C  6E37               	movwf	___ftadd@sign,c
  5346  00226E                     l467:
  5347  00226E  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5348  002272  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5349  002276  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5350  00227A  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5351  00227E  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5352  002282  EC6B  F013         	call	___ftpack	;wreg free
  5353  002286  C001  F02E         	movff	?___ftpack,?___ftadd
  5354  00228A  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5355  00228E  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5356  002292  0012               	return	
  5357  002294                     __end_of___ftadd:
  5358                           	opt stack 0
  5359                           tblptru	equ	0xFF8
  5360                           tblptrh	equ	0xFF7
  5361                           tblptrl	equ	0xFF6
  5362                           tablat	equ	0xFF5
  5363                           prodh	equ	0xFF4
  5364                           prodl	equ	0xFF3
  5365                           indf0	equ	0xFEF
  5366                           postinc0	equ	0xFEE
  5367                           fsr0h	equ	0xFEA
  5368                           fsr0l	equ	0xFE9
  5369                           wreg	equ	0xFE8
  5370                           postdec1	equ	0xFE5
  5371                           fsr1l	equ	0xFE1
  5372                           indf2	equ	0xFDF
  5373                           postinc2	equ	0xFDE
  5374                           postdec2	equ	0xFDD
  5375                           fsr2h	equ	0xFDA
  5376                           fsr2l	equ	0xFD9
  5377                           status	equ	0xFD8
  5378                           
  5379 ;; *************** function ___ftpack *****************
  5380 ;; Defined at:
  5381 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  5382 ;; Parameters:    Size  Location     Type
  5383 ;;  arg             3    0[COMRAM] unsigned um
  5384 ;;  exp             1    3[COMRAM] unsigned char 
  5385 ;;  sign            1    4[COMRAM] unsigned char 
  5386 ;; Auto vars:     Size  Location     Type
  5387 ;;		None
  5388 ;; Return value:  Size  Location     Type
  5389 ;;                  3    0[COMRAM] float 
  5390 ;; Registers used:
  5391 ;;		wreg, status,2, status,0
  5392 ;; Tracked objects:
  5393 ;;		On entry : 0/0
  5394 ;;		On exit  : 0/0
  5395 ;;		Unchanged: 0/0
  5396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5397 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5399 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5400 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5401 ;;Total ram usage:        8 bytes
  5402 ;; Hardware stack levels used:    1
  5403 ;; This function calls:
  5404 ;;		Nothing
  5405 ;; This function is called by:
  5406 ;;		___ftadd
  5407 ;;		___ftmul
  5408 ;;		___lltoft
  5409 ;; This function uses a non-reentrant model
  5410 ;;
  5411                           
  5412                           	psect	text19
  5413  0026D6                     __ptext19:
  5414                           	opt stack 0
  5415  0026D6                     ___ftpack:
  5416                           	opt stack 27
  5417                           
  5418                           ;incstack = 0
  5419  0026D6  5004               	movf	___ftpack@exp,w,c
  5420  0026D8  B4D8               	btfsc	status,2,c
  5421  0026DA  D005               	goto	u1470
  5422  0026DC  5001               	movf	___ftpack@arg,w,c
  5423  0026DE  1002               	iorwf	___ftpack@arg+1,w,c
  5424  0026E0  1003               	iorwf	___ftpack@arg+2,w,c
  5425  0026E2  A4D8               	btfss	status,2,c
  5426  0026E4  D00C               	goto	l408
  5427  0026E6                     u1470:
  5428  0026E6  0E00               	movlw	0
  5429  0026E8  6E01               	movwf	?___ftpack,c
  5430  0026EA  0E00               	movlw	0
  5431  0026EC  6E02               	movwf	?___ftpack+1,c
  5432  0026EE  0E00               	movlw	0
  5433  0026F0  6E03               	movwf	?___ftpack+2,c
  5434  0026F2  0012               	return	
  5435  0026F4  2A04               	incf	___ftpack@exp,f,c
  5436  0026F6  90D8               	bcf	status,0,c
  5437  0026F8  3203               	rrcf	___ftpack@arg+2,f,c
  5438  0026FA  3202               	rrcf	___ftpack@arg+1,f,c
  5439  0026FC  3201               	rrcf	___ftpack@arg,f,c
  5440  0026FE                     l408:
  5441  0026FE  0E00               	movlw	0
  5442  002700  1401               	andwf	___ftpack@arg,w,c
  5443  002702  6E06               	movwf	??___ftpack& (0+255),c
  5444  002704  0E00               	movlw	0
  5445  002706  1402               	andwf	___ftpack@arg+1,w,c
  5446  002708  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5447  00270A  0EFE               	movlw	254
  5448  00270C  1403               	andwf	___ftpack@arg+2,w,c
  5449  00270E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5450  002710  5006               	movf	??___ftpack,w,c
  5451  002712  1007               	iorwf	??___ftpack+1,w,c
  5452  002714  1008               	iorwf	??___ftpack+2,w,c
  5453  002716  B4D8               	btfsc	status,2,c
  5454  002718  D00C               	goto	l411
  5455  00271A  D7EC               	goto	l409
  5456  00271C  2A04               	incf	___ftpack@exp,f,c
  5457  00271E  0E01               	movlw	1
  5458  002720  2601               	addwf	___ftpack@arg,f,c
  5459  002722  0E00               	movlw	0
  5460  002724  2202               	addwfc	___ftpack@arg+1,f,c
  5461  002726  0E00               	movlw	0
  5462  002728  2203               	addwfc	___ftpack@arg+2,f,c
  5463  00272A  90D8               	bcf	status,0,c
  5464  00272C  3203               	rrcf	___ftpack@arg+2,f,c
  5465  00272E  3202               	rrcf	___ftpack@arg+1,f,c
  5466  002730  3201               	rrcf	___ftpack@arg,f,c
  5467  002732                     l411:
  5468  002732  0E00               	movlw	0
  5469  002734  1401               	andwf	___ftpack@arg,w,c
  5470  002736  6E06               	movwf	??___ftpack& (0+255),c
  5471  002738  0E00               	movlw	0
  5472  00273A  1402               	andwf	___ftpack@arg+1,w,c
  5473  00273C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5474  00273E  0EFF               	movlw	255
  5475  002740  1403               	andwf	___ftpack@arg+2,w,c
  5476  002742  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5477  002744  5006               	movf	??___ftpack,w,c
  5478  002746  1007               	iorwf	??___ftpack+1,w,c
  5479  002748  1008               	iorwf	??___ftpack+2,w,c
  5480  00274A  B4D8               	btfsc	status,2,c
  5481  00274C  D006               	goto	l414
  5482  00274E  D7E6               	goto	l412
  5483  002750  0604               	decf	___ftpack@exp,f,c
  5484  002752  90D8               	bcf	status,0,c
  5485  002754  3601               	rlcf	___ftpack@arg,f,c
  5486  002756  3602               	rlcf	___ftpack@arg+1,f,c
  5487  002758  3603               	rlcf	___ftpack@arg+2,f,c
  5488  00275A                     l414:
  5489  00275A  BE02               	btfsc	___ftpack@arg+1,7,c
  5490  00275C  D003               	goto	u1510
  5491  00275E  0E02               	movlw	2
  5492  002760  6004               	cpfslt	___ftpack@exp,c
  5493  002762  D7F6               	goto	l415
  5494  002764                     u1510:
  5495  002764  A004               	btfss	___ftpack@exp,0,c
  5496  002766  9E02               	bcf	___ftpack@arg+1,7,c
  5497  002768  90D8               	bcf	status,0,c
  5498  00276A  3204               	rrcf	___ftpack@exp,f,c
  5499  00276C  5004               	movf	___ftpack@exp,w,c
  5500  00276E  1203               	iorwf	___ftpack@arg+2,f,c
  5501  002770  5005               	movf	___ftpack@sign,w,c
  5502  002772  A4D8               	btfss	status,2,c
  5503  002774  8E03               	bsf	___ftpack@arg+2,7,c
  5504  002776  C001  F001         	movff	___ftpack@arg,?___ftpack
  5505  00277A  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5506  00277E  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5507  002782  0012               	return	
  5508  002784                     __end_of___ftpack:
  5509                           	opt stack 0
  5510                           tblptru	equ	0xFF8
  5511                           tblptrh	equ	0xFF7
  5512                           tblptrl	equ	0xFF6
  5513                           tablat	equ	0xFF5
  5514                           prodh	equ	0xFF4
  5515                           prodl	equ	0xFF3
  5516                           indf0	equ	0xFEF
  5517                           postinc0	equ	0xFEE
  5518                           fsr0h	equ	0xFEA
  5519                           fsr0l	equ	0xFE9
  5520                           wreg	equ	0xFE8
  5521                           postdec1	equ	0xFE5
  5522                           fsr1l	equ	0xFE1
  5523                           indf2	equ	0xFDF
  5524                           postinc2	equ	0xFDE
  5525                           postdec2	equ	0xFDD
  5526                           fsr2h	equ	0xFDA
  5527                           fsr2l	equ	0xFD9
  5528                           status	equ	0xFD8
  5529                           
  5530 ;; *************** function ___ftneg *****************
  5531 ;; Defined at:
  5532 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  5533 ;; Parameters:    Size  Location     Type
  5534 ;;  f1              3    0[COMRAM] float 
  5535 ;; Auto vars:     Size  Location     Type
  5536 ;;		None
  5537 ;; Return value:  Size  Location     Type
  5538 ;;                  3    0[COMRAM] float 
  5539 ;; Registers used:
  5540 ;;		wreg, status,2, status,0
  5541 ;; Tracked objects:
  5542 ;;		On entry : 0/0
  5543 ;;		On exit  : 0/0
  5544 ;;		Unchanged: 0/0
  5545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5546 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5549 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5550 ;;Total ram usage:        3 bytes
  5551 ;; Hardware stack levels used:    1
  5552 ;; This function calls:
  5553 ;;		Nothing
  5554 ;; This function is called by:
  5555 ;;		_printf
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           	psect	text20
  5560  002B76                     __ptext20:
  5561                           	opt stack 0
  5562  002B76                     ___ftneg:
  5563                           	opt stack 29
  5564                           
  5565                           ;incstack = 0
  5566  002B76  5001               	movf	___ftneg@f1,w,c
  5567  002B78  1002               	iorwf	___ftneg@f1+1,w,c
  5568  002B7A  1003               	iorwf	___ftneg@f1+2,w,c
  5569  002B7C  B4D8               	btfsc	status,2,c
  5570  002B7E  D006               	goto	l515
  5571  002B80  0E00               	movlw	0
  5572  002B82  1A01               	xorwf	___ftneg@f1,f,c
  5573  002B84  0E00               	movlw	0
  5574  002B86  1A02               	xorwf	___ftneg@f1+1,f,c
  5575  002B88  0E80               	movlw	128
  5576  002B8A  1A03               	xorwf	___ftneg@f1+2,f,c
  5577  002B8C                     l515:
  5578  002B8C  C001  F001         	movff	___ftneg@f1,?___ftneg
  5579  002B90  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5580  002B94  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5581  002B98  0012               	return		;funcret
  5582  002B9A                     __end_of___ftneg:
  5583                           	opt stack 0
  5584                           tblptru	equ	0xFF8
  5585                           tblptrh	equ	0xFF7
  5586                           tblptrl	equ	0xFF6
  5587                           tablat	equ	0xFF5
  5588                           prodh	equ	0xFF4
  5589                           prodl	equ	0xFF3
  5590                           indf0	equ	0xFEF
  5591                           postinc0	equ	0xFEE
  5592                           fsr0h	equ	0xFEA
  5593                           fsr0l	equ	0xFE9
  5594                           wreg	equ	0xFE8
  5595                           postdec1	equ	0xFE5
  5596                           fsr1l	equ	0xFE1
  5597                           indf2	equ	0xFDF
  5598                           postinc2	equ	0xFDE
  5599                           postdec2	equ	0xFDD
  5600                           fsr2h	equ	0xFDA
  5601                           fsr2l	equ	0xFD9
  5602                           status	equ	0xFD8
  5603                           
  5604 ;; *************** function ___ftge *****************
  5605 ;; Defined at:
  5606 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  5607 ;; Parameters:    Size  Location     Type
  5608 ;;  ff1             3    0[COMRAM] float 
  5609 ;;  ff2             3    3[COMRAM] float 
  5610 ;; Auto vars:     Size  Location     Type
  5611 ;;		None
  5612 ;; Return value:  Size  Location     Type
  5613 ;;		None               void
  5614 ;; Registers used:
  5615 ;;		wreg, status,2, status,0
  5616 ;; Tracked objects:
  5617 ;;		On entry : 0/0
  5618 ;;		On exit  : 0/0
  5619 ;;		Unchanged: 0/0
  5620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5621 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5623 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5624 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5625 ;;Total ram usage:        9 bytes
  5626 ;; Hardware stack levels used:    1
  5627 ;; This function calls:
  5628 ;;		Nothing
  5629 ;; This function is called by:
  5630 ;;		_printf
  5631 ;; This function uses a non-reentrant model
  5632 ;;
  5633                           
  5634                           	psect	text21
  5635  002784                     __ptext21:
  5636                           	opt stack 0
  5637  002784                     ___ftge:
  5638                           	opt stack 29
  5639                           
  5640                           ;incstack = 0
  5641  002784  AE03               	btfss	___ftge@ff1+2,7,c
  5642  002786  D016               	goto	l497
  5643  002788  C001  F007         	movff	___ftge@ff1,??___ftge
  5644  00278C  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5645  002790  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5646  002794  1E07               	comf	??___ftge,f,c
  5647  002796  1E08               	comf	??___ftge+1,f,c
  5648  002798  1E09               	comf	??___ftge+2,f,c
  5649  00279A  2A07               	incf	??___ftge,f,c
  5650  00279C  0E00               	movlw	0
  5651  00279E  2208               	addwfc	??___ftge+1,f,c
  5652  0027A0  2209               	addwfc	??___ftge+2,f,c
  5653  0027A2  0E00               	movlw	0
  5654  0027A4  2407               	addwf	??___ftge,w,c
  5655  0027A6  6E01               	movwf	___ftge@ff1,c
  5656  0027A8  0E00               	movlw	0
  5657  0027AA  2008               	addwfc	??___ftge+1,w,c
  5658  0027AC  6E02               	movwf	___ftge@ff1+1,c
  5659  0027AE  0E80               	movlw	128
  5660  0027B0  2009               	addwfc	??___ftge+2,w,c
  5661  0027B2  6E03               	movwf	___ftge@ff1+2,c
  5662  0027B4                     l497:
  5663  0027B4  AE06               	btfss	___ftge@ff2+2,7,c
  5664  0027B6  D016               	goto	l498
  5665  0027B8  C004  F007         	movff	___ftge@ff2,??___ftge
  5666  0027BC  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5667  0027C0  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5668  0027C4  1E07               	comf	??___ftge,f,c
  5669  0027C6  1E08               	comf	??___ftge+1,f,c
  5670  0027C8  1E09               	comf	??___ftge+2,f,c
  5671  0027CA  2A07               	incf	??___ftge,f,c
  5672  0027CC  0E00               	movlw	0
  5673  0027CE  2208               	addwfc	??___ftge+1,f,c
  5674  0027D0  2209               	addwfc	??___ftge+2,f,c
  5675  0027D2  0E00               	movlw	0
  5676  0027D4  2407               	addwf	??___ftge,w,c
  5677  0027D6  6E04               	movwf	___ftge@ff2,c
  5678  0027D8  0E00               	movlw	0
  5679  0027DA  2008               	addwfc	??___ftge+1,w,c
  5680  0027DC  6E05               	movwf	___ftge@ff2+1,c
  5681  0027DE  0E80               	movlw	128
  5682  0027E0  2009               	addwfc	??___ftge+2,w,c
  5683  0027E2  6E06               	movwf	___ftge@ff2+2,c
  5684  0027E4                     l498:
  5685  0027E4  0E00               	movlw	0
  5686  0027E6  1A01               	xorwf	___ftge@ff1,f,c
  5687  0027E8  0E00               	movlw	0
  5688  0027EA  1A02               	xorwf	___ftge@ff1+1,f,c
  5689  0027EC  0E80               	movlw	128
  5690  0027EE  1A03               	xorwf	___ftge@ff1+2,f,c
  5691  0027F0  0E00               	movlw	0
  5692  0027F2  1A04               	xorwf	___ftge@ff2,f,c
  5693  0027F4  0E00               	movlw	0
  5694  0027F6  1A05               	xorwf	___ftge@ff2+1,f,c
  5695  0027F8  0E80               	movlw	128
  5696  0027FA  1A06               	xorwf	___ftge@ff2+2,f,c
  5697  0027FC  5004               	movf	___ftge@ff2,w,c
  5698  0027FE  5C01               	subwf	___ftge@ff1,w,c
  5699  002800  5005               	movf	___ftge@ff2+1,w,c
  5700  002802  5802               	subwfb	___ftge@ff1+1,w,c
  5701  002804  5006               	movf	___ftge@ff2+2,w,c
  5702  002806  5803               	subwfb	___ftge@ff1+2,w,c
  5703  002808  B0D8               	btfsc	status,0,c
  5704  00280A  D002               	goto	l1689
  5705  00280C  90D8               	bcf	status,0,c
  5706  00280E  0012               	return	
  5707  002810                     l1689:
  5708  002810  80D8               	bsf	status,0,c
  5709  002812  0012               	return	
  5710  002814                     __end_of___ftge:
  5711                           	opt stack 0
  5712                           tblptru	equ	0xFF8
  5713                           tblptrh	equ	0xFF7
  5714                           tblptrl	equ	0xFF6
  5715                           tablat	equ	0xFF5
  5716                           prodh	equ	0xFF4
  5717                           prodl	equ	0xFF3
  5718                           indf0	equ	0xFEF
  5719                           postinc0	equ	0xFEE
  5720                           fsr0h	equ	0xFEA
  5721                           fsr0l	equ	0xFE9
  5722                           wreg	equ	0xFE8
  5723                           postdec1	equ	0xFE5
  5724                           fsr1l	equ	0xFE1
  5725                           indf2	equ	0xFDF
  5726                           postinc2	equ	0xFDE
  5727                           postdec2	equ	0xFDD
  5728                           fsr2h	equ	0xFDA
  5729                           fsr2l	equ	0xFD9
  5730                           status	equ	0xFD8
  5731                           
  5732 ;; *************** function _SystemInitialize *****************
  5733 ;; Defined at:
  5734 ;;		line 36 in file "main.c"
  5735 ;; Parameters:    Size  Location     Type
  5736 ;;		None
  5737 ;; Auto vars:     Size  Location     Type
  5738 ;;		None
  5739 ;; Return value:  Size  Location     Type
  5740 ;;                  1    wreg      void 
  5741 ;; Registers used:
  5742 ;;		wreg, status,2, cstack
  5743 ;; Tracked objects:
  5744 ;;		On entry : 0/0
  5745 ;;		On exit  : 0/0
  5746 ;;		Unchanged: 0/0
  5747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5752 ;;Total ram usage:        0 bytes
  5753 ;; Hardware stack levels used:    1
  5754 ;; Hardware stack levels required when called:    1
  5755 ;; This function calls:
  5756 ;;		_EUSART1_Initialize
  5757 ;; This function is called by:
  5758 ;;		_main
  5759 ;; This function uses a non-reentrant model
  5760 ;;
  5761                           
  5762                           	psect	text22
  5763  002BE2                     __ptext22:
  5764                           	opt stack 0
  5765  002BE2                     _SystemInitialize:
  5766                           	opt stack 29
  5767                           
  5768                           ;main.c: 38: EUSART1_Initialize();
  5769                           
  5770                           ;incstack = 0
  5771  002BE2  ECDC  F015         	call	_EUSART1_Initialize	;wreg free
  5772  002BE6  0012               	return	
  5773  002BE8                     __end_of_SystemInitialize:
  5774                           	opt stack 0
  5775                           tblptru	equ	0xFF8
  5776                           tblptrh	equ	0xFF7
  5777                           tblptrl	equ	0xFF6
  5778                           tablat	equ	0xFF5
  5779                           prodh	equ	0xFF4
  5780                           prodl	equ	0xFF3
  5781                           indf0	equ	0xFEF
  5782                           postinc0	equ	0xFEE
  5783                           fsr0h	equ	0xFEA
  5784                           fsr0l	equ	0xFE9
  5785                           wreg	equ	0xFE8
  5786                           postdec1	equ	0xFE5
  5787                           fsr1l	equ	0xFE1
  5788                           indf2	equ	0xFDF
  5789                           postinc2	equ	0xFDE
  5790                           postdec2	equ	0xFDD
  5791                           fsr2h	equ	0xFDA
  5792                           fsr2l	equ	0xFD9
  5793                           status	equ	0xFD8
  5794                           
  5795 ;; *************** function _EUSART1_Initialize *****************
  5796 ;; Defined at:
  5797 ;;		line 56 in file "eusart1.c"
  5798 ;; Parameters:    Size  Location     Type
  5799 ;;		None
  5800 ;; Auto vars:     Size  Location     Type
  5801 ;;		None
  5802 ;; Return value:  Size  Location     Type
  5803 ;;                  1    wreg      void 
  5804 ;; Registers used:
  5805 ;;		wreg, status,2
  5806 ;; Tracked objects:
  5807 ;;		On entry : 0/0
  5808 ;;		On exit  : 0/0
  5809 ;;		Unchanged: 0/0
  5810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5815 ;;Total ram usage:        0 bytes
  5816 ;; Hardware stack levels used:    1
  5817 ;; This function calls:
  5818 ;;		Nothing
  5819 ;; This function is called by:
  5820 ;;		_SystemInitialize
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           	psect	text23
  5825  002BB8                     __ptext23:
  5826                           	opt stack 0
  5827  002BB8                     _EUSART1_Initialize:
  5828                           	opt stack 29
  5829                           
  5830                           ;eusart1.c: 64: RCSTA = 0x80;
  5831                           
  5832                           ;incstack = 0
  5833  002BB8  0E80               	movlw	128
  5834  002BBA  6EAB               	movwf	4011,c	;volatile
  5835                           
  5836                           ;eusart1.c: 67: TXSTA = 0x26;
  5837  002BBC  0E26               	movlw	38
  5838  002BBE  6EAC               	movwf	4012,c	;volatile
  5839                           
  5840                           ;eusart1.c: 70: SPBRG = 0xFF;
  5841  002BC0  68AF               	setf	4015,c	;volatile
  5842                           
  5843                           ;eusart1.c: 76: TXREG = 0x00;
  5844  002BC2  0E00               	movlw	0
  5845  002BC4  6EAD               	movwf	4013,c	;volatile
  5846                           
  5847                           ;eusart1.c: 79: RCREG = 0x00;
  5848  002BC6  0E00               	movlw	0
  5849  002BC8  6EAE               	movwf	4014,c	;volatile
  5850  002BCA  0012               	return		;funcret
  5851  002BCC                     __end_of_EUSART1_Initialize:
  5852                           	opt stack 0
  5853                           tblptru	equ	0xFF8
  5854                           tblptrh	equ	0xFF7
  5855                           tblptrl	equ	0xFF6
  5856                           tablat	equ	0xFF5
  5857                           prodh	equ	0xFF4
  5858                           prodl	equ	0xFF3
  5859                           indf0	equ	0xFEF
  5860                           postinc0	equ	0xFEE
  5861                           fsr0h	equ	0xFEA
  5862                           fsr0l	equ	0xFE9
  5863                           wreg	equ	0xFE8
  5864                           postdec1	equ	0xFE5
  5865                           fsr1l	equ	0xFE1
  5866                           indf2	equ	0xFDF
  5867                           postinc2	equ	0xFDE
  5868                           postdec2	equ	0xFDD
  5869                           fsr2h	equ	0xFDA
  5870                           fsr2l	equ	0xFD9
  5871                           status	equ	0xFD8
  5872                           tblptru	equ	0xFF8
  5873                           tblptrh	equ	0xFF7
  5874                           tblptrl	equ	0xFF6
  5875                           tablat	equ	0xFF5
  5876                           prodh	equ	0xFF4
  5877                           prodl	equ	0xFF3
  5878                           indf0	equ	0xFEF
  5879                           postinc0	equ	0xFEE
  5880                           fsr0h	equ	0xFEA
  5881                           fsr0l	equ	0xFE9
  5882                           wreg	equ	0xFE8
  5883                           postdec1	equ	0xFE5
  5884                           fsr1l	equ	0xFE1
  5885                           indf2	equ	0xFDF
  5886                           postinc2	equ	0xFDE
  5887                           postdec2	equ	0xFDD
  5888                           fsr2h	equ	0xFDA
  5889                           fsr2l	equ	0xFD9
  5890                           status	equ	0xFD8
  5891                           
  5892                           	psect	rparam
  5893  0000                     tblptru	equ	0xFF8
  5894                           tblptrh	equ	0xFF7
  5895                           tblptrl	equ	0xFF6
  5896                           tablat	equ	0xFF5
  5897                           prodh	equ	0xFF4
  5898                           prodl	equ	0xFF3
  5899                           indf0	equ	0xFEF
  5900                           postinc0	equ	0xFEE
  5901                           fsr0h	equ	0xFEA
  5902                           fsr0l	equ	0xFE9
  5903                           wreg	equ	0xFE8
  5904                           postdec1	equ	0xFE5
  5905                           fsr1l	equ	0xFE1
  5906                           indf2	equ	0xFDF
  5907                           postinc2	equ	0xFDE
  5908                           postdec2	equ	0xFDD
  5909                           fsr2h	equ	0xFDA
  5910                           fsr2l	equ	0xFD9
  5911                           status	equ	0xFD8


Data Sizes:
    Strings     37
    Constant    118
    Data        44
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     78      83
    BANK0           160     27      66
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_5(CODE[7]), printf@c(BANK0[1]), STR_3(CODE[3]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 39
		 -> STR_4(CODE[11]), STR_2(CODE[16]), STR_1(CODE[3]), Mensaje(BANK0[39]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_EUSART1_Write
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   49293
                   _SystemInitialize
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              45    36      9   49293
                                             63 COMRAM    15     6      9
                                              0 BANK0     27    27      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   11677
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              1 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   11479
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2743
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5007
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2572
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     767
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4042
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3697
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2427
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _SystemInitialize                                     0     0      0       0
                 _EUSART1_Initialize
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SystemInitialize
     _EUSART1_Initialize
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
       _EUSART1_Write
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1B      42       5       41.3%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4E      53       1       87.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      95      32        0.0%
DATA                 0      0      95       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Mar 08 11:36:37 2018

                          _a 0052                            _b 004F                           l55 2AA0  
                         l82 1FCA                           l92 1C24                           l85 20A2  
                         l93 1D8C                           l95 1E48                           l88 1C4E  
                         l89 1B68                           l99 10AC                 ___awdiv@sign 000C  
        ___wmul@multiplicand 0011                  __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
               __CFG_CP4$OFF 000000                 __CFG_CP5$OFF 000000                 ___ftadd@exp1 0039  
               ___ftadd@exp2 0038                 __CFG_CP6$OFF 000000                 __CFG_CP7$OFF 000000  
               ___ftadd@sign 0037                          l100 10BE                          l101 1180  
                        l110 12DC                          l102 1154                          l103 1102  
                        l120 124A                          l121 121E                          l113 1192  
                        l130 142A                          l106 1282                          l114 11BA  
                        l123 125C                          l115 11CA                          l132 1450  
                        l124 1270                          l116 11C4                          l125 1864  
                        l133 1490                          l109 118E                          l134 1558  
                        l126 12F0                          l151 16C8                          l143 15BE  
                        l127 1332                          l160 185A                          l152 16BA  
                        l161 184C                          l137 1500                          l129 13C4  
                        l170 1934                          l154 16EC                          l411 2732  
                        l163 189E                          l155 16F0                          l412 271C  
                        l172 19D4                          l164 18B6                          l156 1708  
                        l148 16AE                          l173 1950                          l157 1840  
                        l149 161C                          l414 275A                          l510 2598  
                        l158 175A                          l415 2750                          l351 2876  
                        l511 25A8                          l408 26FE                          l352 2880  
                        l344 2828                          l360 2950                          l504 2516  
                        l168 1914                          l409 26F4                          l521 2AFE  
                        l353 288E                          l345 2838                          l361 2948  
                        l506 253E                          l515 2B8C                          l443 2164  
                        l347 2856                          l507 2570                          l380 2474  
                        l348 284E                          l364 2968                          l508 2580  
                        l540 2BB0                          l453 21C0                          l533 26A8  
                        l525 260E                          l365 2972                          l357 292E  
                        l462 21FE                          l454 21B6                          l534 269C  
                        l382 24B2                          l366 2980                          l358 293A  
                        l463 21F4                          l439 213A                          l527 2684  
                        l383 24A2                          l448 21CA                          l536 26C4  
                        l528 2674                          l376 23E4                          l480 22C0  
                        l465 2222                          l466 223E                          l570 28FA  
                        l378 2402                          l482 22EC                          l467 226E  
                        l571 2908                          l379 2444                          l483 2326  
                        l580 29D0                          l388 24D6                          l492 23AE  
                        l484 234E                          l581 29DE                          l389 24CA  
                        l493 23A2                          l566 28C6                          l486 238A  
                        l567 28BA                          l487 237A                          l576 29A8  
                        l497 27B4                          l577 299C                          l498 27E4  
                        l587 2A02                          l588 29F6                 __CFG_CPB$OFF 000000  
               __CFG_CPD$OFF 000000                 ___awmod@sign 0006                          wreg 000FE8  
               __CFG_MODE$MC 000000                 __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000  
                       l2305 121E                         l2423 16BA                         l2371 1490  
                       l1729 2BCE                         l2475 18BA                         l2379 14DA  
                       l2399 15C2                         l1689 2810                         l2499 1950  
                       STR_1 1099                         STR_2 1077                         STR_3 1099  
                       STR_4 1087                         STR_5 1092                         u2110 23B4  
                       u2031 22A4                         u2051 22D0                         u2300 26AE  
                       u1510 2764                         u2400 10EA                         u2241 25F2  
                       u2330 28CA                         u1620 2156                         u2260 262C  
                       u2180 24DC                         u2500 1240                         u2420 1138  
                       u1470 26E6                         u2430 1176                         u1551 20F8  
                       u2407 10E0                         u1720 2206                         u2360 29AC  
                       u2520 12B0                         u1561 210C                         u2265 2624  
                       u1650 2194                         u2610 1462                         u2507 1236  
                       u2427 112E                         u2620 14A2                         u2460 11F8  
                       u2437 116C                         u1590 212C                         u1910 2954  
                       u2470 11FE                         u2527 12A6                         u2720 16D6  
                       u1761 24FE                         u1690 21D2                         u1850 285A  
                       u2730 16E6                         u2650 14DA                         u2570 136A  
                       u2467 11EE                 printf@tmpval 0094                         u2820 18F8  
                       u1781 2526                         u2575 1360                         u2690 1600  
                       u2860 19E6                         u2870 1A14                         u2877 1A0A  
               __CFG_PWRT$ON 000000                _EUSART1_Write 2BCC                         _main 2A4C  
               ___ftpack@arg 0001                 ___ftpack@exp 0004                         fsr0h 000FEA  
                       indf0 000FEF                         fsr2h 000FDA                         fsr0l 000FE9  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       prodh 000FF4                         prodl 000FF3                         start 0000  
              __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000                 ___ftmul@cntr 0022  
               ___param_bank 000000                 ___ftmul@sign 0023                 ___fttol@exp1 0039  
               ___fttol@lval 0035                __CFG_WAIT$OFF 000000                        ?_main 0001  
            __end_of___awdiv 2898              __end_of___ftadd 2294              __end_of___awmod 298A  
            __end_of___ftneg 2B9A              __end_of___lldiv 291A              __end_of___ftmul 25E2  
            ___awdiv@divisor 0009              __end_of___llmod 29F0              __end_of___ftsub 2B28  
            __end_of___fttol 26D6              ___awdiv@counter 000B                        _RCREG 000FAE  
                      _RCSTA 000FAB                        _SPBRG 000FAF                        _TXREG 000FAD  
                      _TXSTA 000FAC                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000                __CFG_WRT4$OFF 000000  
              __CFG_WRT5$OFF 000000                 ___lltoft@exp 0011                __CFG_WRT6$OFF 000000  
              __CFG_WRT7$OFF 000000               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
             __CFG_EBTR4$OFF 000000               __CFG_EBTR5$OFF 000000               __CFG_EBTR6$OFF 000000  
             __CFG_EBTR7$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000               __CFG_EBTRB$OFF 000000              __end_of_dpowers 1029  
                      _scale 1A22              __end_of_isdigit 2BB8                ___ftpack@sign 0005  
                      _putch 2BD8               ?_EUSART1_Write 0001                        tablat 000FF5  
   __end_of_SystemInitialize 2BE8                        status 000FD8              __initialization 2AA2  
 __end_of_EUSART1_Initialize 2BCC                 __end_of_main 2AA2               __CFG_OSC$HSPLL 000000  
                     ??_main 004F                ___fttol@sign1 0034                __activetblptr 000003  
       __size_of__tdiv_to_l_ 0132             ___llmod@dividend 000E                       ?_scale 0024  
           ___awdiv@dividend 0007                       ?_putch 0001             __end_of___ftpack 2784  
           __end_of___lltoft 2A4C              __CFG_BBSIZ$BB2K 000000               __CFG_XINST$OFF 000000  
           __end_of__powers_ 1050                       ___ftge 2784                       ___wmul 2B50  
                  ??___awdiv 000B                    ??___ftadd 0034               __CFG_STVREN$ON 000000  
                  ??___awmod 0005                    ??___ftneg 0004                    ??___lldiv 0009  
                  ??___ftmul 001B                    ??___llmod 0016                    ??___ftsub 0040  
                  ??___fttol 002F                       _fround 1E72             ___awdiv@quotient 000D  
            ___awmod@divisor 0003              ___awmod@counter 0005                       _printf 109E  
      ___ftmul@f3_as_product 001F                 __pdataCOMRAM 004F                    ??_isdigit 0001  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8              ??_EUSART1_Write 0001                   __accesstop 0060  
    __end_of__initialization 2AE2                   ___ftadd@f1 002E                   ___ftadd@f2 0031  
                 ___ftge@ff1 0001                   ___ftge@ff2 0004                ___rparam_used 000001  
                 ___ftneg@f1 0001                   ___ftmul@f1 0015                   ___ftmul@f2 0018  
                 ___ftsub@f1 003A                   ___ftsub@f2 003D                   ___fttol@f1 002B  
             __pcstackCOMRAM 0001                 __pidataBANK0 2B28                   ___lltoft@c 0009  
              __end_of_scale 1E72                __end_of_putch 2BE2                   __div_to_l_ 23C6  
            __div_to_l_@exp1 000C              __div_to_l_@cntr 000B                      ??_scale 0027  
            __div_to_l_@quot 0007                      ??_putch 0002                __div_to_l_@f1 0001  
              __div_to_l_@f2 0004                      ?___ftge 0001                      ?___wmul 000F  
                    ?_fround 0024                    ?___ftpack 0001                      ?_printf 0040  
                  ?___lltoft 0009            ?_SystemInitialize 0001           ??_SystemInitialize 0001  
                    _Mensaje 0060            __end_of__npowers_ 1077                      __Hparam 0000  
                    __Lparam 0000              __size_of___ftge 0090                      ___awdiv 2814  
                    ___ftadd 20E8                      ___awmod 291A                      ___ftneg 2B76  
                    ___lldiv 2898              __size_of___wmul 0026                      ___ftmul 24EE  
                    ___llmod 298A                      ___ftsub 2AE8                      ___fttol 25E2  
                 _fround$806 002A                   _fround$807 0027                 __psmallconst 1000  
                    __pcinit 2AA2                   ??___ftpack 0006              __size_of_fround 0276  
                    __ramtop 1000                   ??___lltoft 000D                      __ptext0 2A4C  
                    __ptext1 109E                      __ptext2 1A22                      __ptext3 2BD8  
                    __ptext4 2BCC                      __ptext5 2B9A                      __ptext6 1E72  
                    __ptext7 2B50                      __ptext8 24EE                      __ptext9 291A  
            __size_of_printf 0984                  ?__div_to_l_ 0001                      _dpowers 1001  
                    _isdigit 2B9A             ___awmod@dividend 0001           _EUSART1_Initialize 2BB8  
       end_of_initialization 2AE2          ?_EUSART1_Initialize 0001              ___lldiv@divisor 0005  
            ___lldiv@counter 000D                    _RCSTAbits 000FAB                      printf@c 00A1  
                    printf@f 0040                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE               __tdiv_to_l_@f1 0001  
             __tdiv_to_l_@f2 0004                   _printf$809 0087         ??_EUSART1_Initialize 0001  
              ??__tdiv_to_l_ 0007          EUSART1_Write@txData 0001          __size_of__div_to_l_ 0128  
                ___ftmul@exp 001E               __end_of___ftge 2814               __end_of___wmul 2B76  
              __pidataCOMRAM 2BE8               __end_of_fround 20E8               __end_of_printf 1A22  
        start_initialization 2AA2          __end_of__tdiv_to_l_ 23C6                  putch@txData 0002  
      __end_of_EUSART1_Write 2BD8              ___llmod@divisor 0012              ___llmod@counter 0016  
                   ??___ftge 0007                     ??___wmul 0013                  __pdataBANK0 0060  
           __CFG_LPT1OSC$OFF 000000                     ??_fround 0027                     ??_printf 0049  
                 fround@prec 002D            __size_of___ftpack 00AE            __size_of___lltoft 005C  
              __pcstackBANK0 0087            __CFG_CCP2MX$PORTC 000000                     ?___awdiv 0007  
                   ?___ftadd 002E                     ?___awmod 0001                     ?___ftneg 0001  
                   ?___lldiv 0001                     ?___ftmul 0015                     ?___llmod 000E  
                   ?___ftsub 003A                    __npowers_ 1050                     ?___fttol 002B  
  __size_of_SystemInitialize 0006                  __tdiv_to_l_ 2294                 ??__div_to_l_ 0007  
                __smallconst 1000                     ?_isdigit 0001                    _scale$808 0027  
             __size_of_scale 0450               __size_of_putch 000A               ___wmul@product 0013  
                   _PIR1bits 000F9E           __end_of__div_to_l_ 24EE        __CFG_DATABW$DATA16BIT 000000  
           __CFG_WDTPS$32768 000000            __CFG_ECCPMX$PORTE 000000            ___wmul@multiplier 000F  
                 printf@flag 0090                   printf@fval 009C                     _Caracter 0053  
                 printf@prec 009F                    copy_data0 2AB6                    copy_data1 2AD6  
                   __Hrparam 0000                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
           __size_of___awdiv 0084             __size_of___ftadd 01AC             __size_of___awmod 0070  
           __size_of___ftneg 0024             __size_of___lldiv 0082             __size_of___ftmul 00F4  
           __size_of___llmod 0066             __size_of___ftsub 0040             __size_of___fttol 00F4  
__size_of_EUSART1_Initialize 0014                     ___ftpack 26D6                     ___lltoft 29F0  
                _isdigit$468 0002             __size_of_isdigit 001E                     __ptext10 2814  
                   __ptext11 2294                     __ptext20 2B76                     __ptext12 23C6  
                   __ptext21 2784                     __ptext13 29F0                     __ptext22 2BE2  
                   __ptext14 298A                     __ptext23 2BB8                     __ptext15 2898  
                   __ptext16 25E2                     __ptext17 2AE8                     __ptext18 20E8  
                   __ptext19 26D6                     __powers_ 1029                __size_of_main 0056  
                  printf@len 008A                    printf@exp 0092                    printf@val 0098  
           _SystemInitialize 2BE2        __CFG_ADDRBW$ADDR20BIT 000000                     isdigit@c 0003  
                   scale@scl 002A             __tdiv_to_l_@exp1 000F             __tdiv_to_l_@cntr 000E  
           __tdiv_to_l_@quot 000A             ___lldiv@dividend 0001                     printf@ap 008E  
                   printf@cp 008C       __size_of_EUSART1_Write 000C                 ?__tdiv_to_l_ 0001  
           ___lldiv@quotient 0009  
