

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Mar 08 11:23:06 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           ; Version 1.45
    48                           ; Generated 16/11/2017 GMT
    49                           ; 
    50                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F8722 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     
    82                           	psect	smallconst
    83  001000                     __psmallconst:
    84                           	opt stack 0
    85  001000  00                 	db	0
    86  001001                     _dpowers:
    87                           	opt stack 0
    88  001001  0001               	dw	1
    89  001003  000A               	dw	10
    90  001005  0064               	dw	100
    91  001007  03E8               	dw	1000
    92  001009  2710               	dw	10000
    93  00100B                     __end_of_dpowers:
    94                           	opt stack 0
    95  0000                     _INTCONbits	set	4082
    96  0000                     _RCONbits	set	4048
    97  0000                     _ADCON1bits	set	4033
    98  0000                     _TRISD	set	3989
    99  0000                     _TRISBbits	set	3987
   100  0000                     _LATB	set	3978
   101  0000                     _LATA	set	3977
   102  0000                     _PORTD	set	3971
   103  0000                     _PORTAbits	set	3968
   104  0000                     _PORTBbits	set	3969
   105  0000                     _RCSTAbits	set	4011
   106  0000                     _RCREG	set	4014
   107  0000                     _TXREG	set	4013
   108  0000                     _SPBRG	set	4015
   109  0000                     _TXSTA	set	4012
   110  0000                     _RCSTA	set	4011
   111  0000                     _TMR1L	set	4046
   112  0000                     _TMR1H	set	4047
   113  0000                     _PIE1bits	set	3997
   114  0000                     _PIR1bits	set	3998
   115  0000                     _T1CONbits	set	4045
   116  0000                     _LATCbits	set	3979
   117  0000                     _LATAbits	set	3977
   118  0000                     _TRISCbits	set	3988
   119  0000                     _TRISAbits	set	3986
   120  0000                     _LATFbits	set	3982
   121  0000                     _TRISFbits	set	3991
   122  00100B                     STR_15:
   123  00100B  20                 	db	32
   124  00100C  20                 	db	32
   125  00100D  20                 	db	32
   126  00100E  4D                 	db	77	;'M'
   127  00100F  50                 	db	80	;'P'
   128  001010  55                 	db	85	;'U'
   129  001011  73                 	db	115	;'s'
   130  001012  20                 	db	32
   131  001013  79                 	db	121	;'y'
   132  001014  20                 	db	32
   133  001015  4D                 	db	77	;'M'
   134  001016  43                 	db	67	;'C'
   135  001017  55                 	db	85	;'U'
   136  001018  73                 	db	115	;'s'
   137  001019  20                 	db	32
   138  00101A  20                 	db	32
   139  00101B  0A                 	db	10
   140  00101C  0D                 	db	13
   141  00101D  00                 	db	0
   142  00101E                     STR_16:
   143  00101E  20                 	db	32
   144  00101F  49                 	db	73	;'I'
   145  001020  6E                 	db	110	;'n'
   146  001021  67                 	db	103	;'g'
   147  001022  20                 	db	32
   148  001023  45                 	db	69	;'E'
   149  001024  6C                 	db	108	;'l'
   150  001025  65                 	db	101	;'e'
   151  001026  63                 	db	99	;'c'
   152  001027  74                 	db	116	;'t'
   153  001028  72                 	db	114	;'r'
   154  001029  6F                 	db	111	;'o'
   155  00102A  6E                 	db	110	;'n'
   156  00102B  69                 	db	105	;'i'
   157  00102C  6B                 	db	107	;'k'
   158  00102D  20                 	db	32
   159  00102E  0A                 	db	10
   160  00102F  0D                 	db	13
   161  001030  00                 	db	0
   162  001031                     STR_3:
   163  001031  20                 	db	32
   164  001032  20                 	db	32
   165  001033  20                 	db	32
   166  001034  20                 	db	32
   167  001035  20                 	db	32
   168  001036  43                 	db	67	;'C'
   169  001037  6C                 	db	108	;'l'
   170  001038  6F                 	db	111	;'o'
   171  001039  63                 	db	99	;'c'
   172  00103A  6B                 	db	107	;'k'
   173  00103B  20                 	db	32
   174  00103C  20                 	db	32
   175  00103D  20                 	db	32
   176  00103E  20                 	db	32
   177  00103F  20                 	db	32
   178  001040  20                 	db	32
   179  001041  0A                 	db	10
   180  001042  0D                 	db	13
   181  001043  00                 	db	0
   182  001044                     STR_4:
   183  001044  52                 	db	82	;'R'
   184  001045  42                 	db	66	;'B'
   185  001046  30                 	db	48	;'0'
   186  001047  3D                 	db	61	;'='
   187  001048  4E                 	db	78	;'N'
   188  001049  6F                 	db	111	;'o'
   189  00104A  77                 	db	119	;'w'
   190  00104B  20                 	db	32
   191  00104C  52                 	db	82	;'R'
   192  00104D  41                 	db	65	;'A'
   193  00104E  35                 	db	53	;'5'
   194  00104F  3D                 	db	61	;'='
   195  001050  4E                 	db	78	;'N'
   196  001051  65                 	db	101	;'e'
   197  001052  78                 	db	120	;'x'
   198  001053  74                 	db	116	;'t'
   199  001054  0A                 	db	10
   200  001055  0D                 	db	13
   201  001056  00                 	db	0
   202  001057                     STR_12:
   203  001057  52                 	db	82	;'R'
   204  001058  42                 	db	66	;'B'
   205  001059  30                 	db	48	;'0'
   206  00105A  3D                 	db	61	;'='
   207  00105B  20                 	db	32
   208  00105C  2B                 	db	43
   209  00105D  2B                 	db	43
   210  00105E  20                 	db	32
   211  00105F  52                 	db	82	;'R'
   212  001060  41                 	db	65	;'A'
   213  001061  35                 	db	53	;'5'
   214  001062  3D                 	db	61	;'='
   215  001063  20                 	db	32
   216  001064  2D                 	db	45
   217  001065  2D                 	db	45
   218  001066  3E                 	db	62	;'>'
   219  001067  0D                 	db	13
   220  001068  00                 	db	0
   221  001069                     STR_10:
   222  001069  52                 	db	82	;'R'
   223  00106A  42                 	db	66	;'B'
   224  00106B  30                 	db	48	;'0'
   225  00106C  3D                 	db	61	;'='
   226  00106D  4D                 	db	77	;'M'
   227  00106E  65                 	db	101	;'e'
   228  00106F  6E                 	db	110	;'n'
   229  001070  75                 	db	117	;'u'
   230  001071  20                 	db	32
   231  001072  52                 	db	82	;'R'
   232  001073  41                 	db	65	;'A'
   233  001074  35                 	db	53	;'5'
   234  001075  3D                 	db	61	;'='
   235  001076  53                 	db	83	;'S'
   236  001077  65                 	db	101	;'e'
   237  001078  74                 	db	116	;'t'
   238  001079  0D                 	db	13
   239  00107A  00                 	db	0
   240  00107B                     STR_14:
   241  00107B  20                 	db	32
   242  00107C  49                 	db	73	;'I'
   243  00107D  6E                 	db	110	;'n'
   244  00107E  67                 	db	103	;'g'
   245  00107F  20                 	db	32
   246  001080  45                 	db	69	;'E'
   247  001081  6C                 	db	108	;'l'
   248  001082  65                 	db	101	;'e'
   249  001083  63                 	db	99	;'c'
   250  001084  74                 	db	116	;'t'
   251  001085  72                 	db	114	;'r'
   252  001086  6F                 	db	111	;'o'
   253  001087  6E                 	db	110	;'n'
   254  001088  69                 	db	105	;'i'
   255  001089  6B                 	db	107	;'k'
   256  00108A  20                 	db	32
   257  00108B  00                 	db	0
   258  00108C                     STR_1:
   259  00108C  20                 	db	32
   260  00108D  20                 	db	32
   261  00108E  20                 	db	32
   262  00108F  20                 	db	32
   263  001090  20                 	db	32
   264  001091  43                 	db	67	;'C'
   265  001092  6C                 	db	108	;'l'
   266  001093  6F                 	db	111	;'o'
   267  001094  63                 	db	99	;'c'
   268  001095  6B                 	db	107	;'k'
   269  001096  20                 	db	32
   270  001097  20                 	db	32
   271  001098  20                 	db	32
   272  001099  20                 	db	32
   273  00109A  20                 	db	32
   274  00109B  20                 	db	32
   275  00109C  00                 	db	0
   276  00109D                     STR_11:
   277  00109D  52                 	db	82	;'R'
   278  00109E  42                 	db	66	;'B'
   279  00109F  30                 	db	48	;'0'
   280  0010A0  3D                 	db	61	;'='
   281  0010A1  20                 	db	32
   282  0010A2  2B                 	db	43
   283  0010A3  2B                 	db	43
   284  0010A4  20                 	db	32
   285  0010A5  52                 	db	82	;'R'
   286  0010A6  41                 	db	65	;'A'
   287  0010A7  35                 	db	53	;'5'
   288  0010A8  3D                 	db	61	;'='
   289  0010A9  20                 	db	32
   290  0010AA  2D                 	db	45
   291  0010AB  2D                 	db	45
   292  0010AC  3E                 	db	62	;'>'
   293  0010AD  00                 	db	0
   294  0010AE                     STR_9:
   295  0010AE  52                 	db	82	;'R'
   296  0010AF  42                 	db	66	;'B'
   297  0010B0  30                 	db	48	;'0'
   298  0010B1  3D                 	db	61	;'='
   299  0010B2  4D                 	db	77	;'M'
   300  0010B3  65                 	db	101	;'e'
   301  0010B4  6E                 	db	110	;'n'
   302  0010B5  75                 	db	117	;'u'
   303  0010B6  20                 	db	32
   304  0010B7  52                 	db	82	;'R'
   305  0010B8  41                 	db	65	;'A'
   306  0010B9  35                 	db	53	;'5'
   307  0010BA  3D                 	db	61	;'='
   308  0010BB  53                 	db	83	;'S'
   309  0010BC  65                 	db	101	;'e'
   310  0010BD  74                 	db	116	;'t'
   311  0010BE  00                 	db	0
   312  0010BF                     STR_2:
   313  0010BF  52                 	db	82	;'R'
   314  0010C0  42                 	db	66	;'B'
   315  0010C1  30                 	db	48	;'0'
   316  0010C2  3D                 	db	61	;'='
   317  0010C3  4E                 	db	78	;'N'
   318  0010C4  6F                 	db	111	;'o'
   319  0010C5  77                 	db	119	;'w'
   320  0010C6  20                 	db	32
   321  0010C7  52                 	db	82	;'R'
   322  0010C8  41                 	db	65	;'A'
   323  0010C9  35                 	db	53	;'5'
   324  0010CA  3D                 	db	61	;'='
   325  0010CB  4E                 	db	78	;'N'
   326  0010CC  65                 	db	101	;'e'
   327  0010CD  78                 	db	120	;'x'
   328  0010CE  74                 	db	116	;'t'
   329  0010CF  00                 	db	0
   330  0010D0                     STR_13:
   331  0010D0  20                 	db	32
   332  0010D1  20                 	db	32
   333  0010D2  4D                 	db	77	;'M'
   334  0010D3  50                 	db	80	;'P'
   335  0010D4  55                 	db	85	;'U'
   336  0010D5  73                 	db	115	;'s'
   337  0010D6  20                 	db	32
   338  0010D7  79                 	db	121	;'y'
   339  0010D8  20                 	db	32
   340  0010D9  4D                 	db	77	;'M'
   341  0010DA  43                 	db	67	;'C'
   342  0010DB  55                 	db	85	;'U'
   343  0010DC  73                 	db	115	;'s'
   344  0010DD  20                 	db	32
   345  0010DE  20                 	db	32
   346  0010DF  00                 	db	0
   347  0010E0                     STR_5:
   348  0010E0  20                 	db	32
   349  0010E1  20                 	db	32
   350  0010E2  20                 	db	32
   351  0010E3  20                 	db	32
   352  0010E4  20                 	db	32
   353  0010E5  20                 	db	32
   354  0010E6  20                 	db	32
   355  0010E7  20                 	db	32
   356  0010E8  00                 	db	0
   357  0010E9                     STR_8:
   358  0010E9  25                 	db	37
   359  0010EA  30                 	db	48	;'0'
   360  0010EB  32                 	db	50	;'2'
   361  0010EC  64                 	db	100	;'d'
   362  0010ED  20                 	db	32
   363  0010EE  09                 	db	9
   364  0010EF  00                 	db	0
   365  0010F0                     STR_6:
   366  0010F0  25                 	db	37
   367  0010F1  30                 	db	48	;'0'
   368  0010F2  32                 	db	50	;'2'
   369  0010F3  64                 	db	100	;'d'
   370  0010F4  3A                 	db	58	;':'
   371  0010F5  00                 	db	0
   372  0000                     
   373                           ; #config settings
   374  0010F6  00                 	db	0	; dummy byte at the end
   375  0000                     
   376                           	psect	cinit
   377  001B40                     __pcinit:
   378                           	opt stack 0
   379  001B40                     start_initialization:
   380                           	opt stack 0
   381  001B40                     __initialization:
   382                           	opt stack 0
   383                           
   384                           ; Clear objects allocated to COMRAM (8 bytes)
   385  001B40  EE00  F030         	lfsr	0,__pbssCOMRAM
   386  001B44  0E08               	movlw	8
   387  001B46                     clear_0:
   388  001B46  6AEE               	clrf	postinc0,c
   389  001B48  06E8               	decf	wreg,f,c
   390  001B4A  E1FD               	bnz	clear_0
   391  001B4C                     end_of_initialization:
   392                           	opt stack 0
   393  001B4C                     __end_of__initialization:
   394                           	opt stack 0
   395  001B4C  9038               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   396  001B4E  9238               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   397  001B50  0100               	movlb	0
   398  001B52  EF4A  F00D         	goto	_main	;jump to C main() function
   399                           postinc0	equ	0xFEE
   400                           wreg	equ	0xFE8
   401                           
   402                           	psect	bssCOMRAM
   403  000030                     __pbssCOMRAM:
   404                           	opt stack 0
   405  000030                     _StateMachine:
   406                           	opt stack 0
   407  000030                     	ds	1
   408  000031                     _Time:
   409                           	opt stack 0
   410  000031                     	ds	1
   411  000032                     _timeset:
   412                           	opt stack 0
   413  000032                     	ds	1
   414  000033                     _sec:
   415                           	opt stack 0
   416  000033                     	ds	1
   417  000034                     _min:
   418                           	opt stack 0
   419  000034                     	ds	1
   420  000035                     _hr:
   421                           	opt stack 0
   422  000035                     	ds	1
   423  000036                     _State:
   424                           	opt stack 0
   425  000036                     	ds	1
   426  000037                     _Timer1Flag:
   427                           	opt stack 0
   428  000037                     	ds	1
   429                           postinc0	equ	0xFEE
   430                           wreg	equ	0xFE8
   431                           
   432                           	psect	cstackCOMRAM
   433  000001                     __pcstackCOMRAM:
   434                           	opt stack 0
   435  000001                     ??_InterruptManager:
   436                           
   437                           ; 1 bytes @ 0x0
   438  000001                     	ds	18
   439  000013                     ??_SWdelay:
   440  000013                     ??_IntroDelay:
   441  000013                     ??_isdigit:
   442  000013                     ?___wmul:
   443                           	opt stack 0
   444  000013                     ?___awdiv:
   445                           	opt stack 0
   446  000013                     ?___awmod:
   447                           	opt stack 0
   448  000013                     ?___lwdiv:
   449                           	opt stack 0
   450  000013                     SendByteBBSPI@output:
   451                           	opt stack 0
   452  000013                     EUSART1_Write@txData:
   453                           	opt stack 0
   454  000013                     ___wmul@multiplier:
   455                           	opt stack 0
   456  000013                     ___awdiv@dividend:
   457                           	opt stack 0
   458  000013                     ___awmod@dividend:
   459                           	opt stack 0
   460  000013                     ___lwdiv@dividend:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x12
   464  000013                     	ds	1
   465  000014                     SendByteBBSPI@bitcount:
   466                           	opt stack 0
   467  000014                     putch@txData:
   468                           	opt stack 0
   469  000014                     _isdigit$1518:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x13
   473  000014                     	ds	1
   474  000015                     SendByteBBSPI@input:
   475                           	opt stack 0
   476  000015                     IntroDelay@i:
   477                           	opt stack 0
   478  000015                     isdigit@c:
   479                           	opt stack 0
   480  000015                     ___wmul@multiplicand:
   481                           	opt stack 0
   482  000015                     ___awdiv@divisor:
   483                           	opt stack 0
   484  000015                     ___awmod@divisor:
   485                           	opt stack 0
   486  000015                     ___lwdiv@divisor:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x14
   490  000015                     	ds	1
   491  000016                     Port_BBSPIInit@port_dir:
   492                           	opt stack 0
   493  000016                     WritePort_BBSPI@a:
   494                           	opt stack 0
   495  000016                     IntroDelay@n:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x15
   499  000016                     	ds	1
   500  000017                     WritePort_BBSPI@port_add:
   501                           	opt stack 0
   502  000017                     IntroDelay@aux:
   503                           	opt stack 0
   504  000017                     ___awdiv@counter:
   505                           	opt stack 0
   506  000017                     ___awmod@counter:
   507                           	opt stack 0
   508  000017                     ___wmul@product:
   509                           	opt stack 0
   510  000017                     ___lwdiv@quotient:
   511                           	opt stack 0
   512                           
   513                           ; 2 bytes @ 0x16
   514  000017                     	ds	1
   515  000018                     ??_LCDPutInst:
   516  000018                     ??_LCDPutChar:
   517  000018                     ___awdiv@sign:
   518                           	opt stack 0
   519  000018                     ___awmod@sign:
   520                           	opt stack 0
   521                           
   522                           ; 1 bytes @ 0x17
   523  000018                     	ds	1
   524  000019                     LCDPutChar@ch:
   525                           	opt stack 0
   526  000019                     LCDPutInst@ch:
   527                           	opt stack 0
   528  000019                     ___lwdiv@counter:
   529                           	opt stack 0
   530  000019                     ___awdiv@quotient:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0x18
   534  000019                     	ds	1
   535  00001A                     ??_LCDInit:
   536  00001A                     ?___lwmod:
   537                           	opt stack 0
   538  00001A                     LCDPutStr@ptr:
   539                           	opt stack 0
   540  00001A                     ___lwmod@dividend:
   541                           	opt stack 0
   542                           
   543                           ; 2 bytes @ 0x19
   544  00001A                     	ds	2
   545  00001C                     ___lwmod@divisor:
   546                           	opt stack 0
   547                           
   548                           ; 2 bytes @ 0x1B
   549  00001C                     	ds	2
   550  00001E                     ___lwmod@counter:
   551                           	opt stack 0
   552                           
   553                           ; 1 bytes @ 0x1D
   554  00001E                     	ds	1
   555  00001F                     ?_printf:
   556                           	opt stack 0
   557  00001F                     printf@f:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x1E
   561  00001F                     	ds	4
   562  000023                     ??_printf:
   563                           
   564                           ; 1 bytes @ 0x22
   565  000023                     	ds	4
   566  000027                     printf@ap:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x26
   570  000027                     	ds	2
   571  000029                     printf@prec:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x28
   575  000029                     	ds	1
   576  00002A                     printf@val:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x29
   580  00002A                     	ds	2
   581  00002C                     printf@flag:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x2B
   585  00002C                     	ds	1
   586  00002D                     printf@width:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x2C
   590  00002D                     	ds	2
   591  00002F                     printf@c:
   592                           	opt stack 0
   593                           
   594                           ; 1 bytes @ 0x2E
   595  00002F                     	ds	1
   596  000030                     postinc0	equ	0xFEE
   597                           wreg	equ	0xFE8
   598                           
   599                           ; 1 bytes @ 0x2F
   600 ;;
   601 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   602 ;;
   603 ;; *************** function _main *****************
   604 ;; Defined at:
   605 ;;		line 20 in file "main.c"
   606 ;; Parameters:    Size  Location     Type
   607 ;;		None
   608 ;; Auto vars:     Size  Location     Type
   609 ;;		None
   610 ;; Return value:  Size  Location     Type
   611 ;;                  1    wreg      void 
   612 ;; Registers used:
   613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   614 ;; Tracked objects:
   615 ;;		On entry : 0/0
   616 ;;		On exit  : 0/0
   617 ;;		Unchanged: 0/0
   618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   623 ;;Total ram usage:        0 bytes
   624 ;; Hardware stack levels required when called:   10
   625 ;; This function calls:
   626 ;;		_Clock
   627 ;;		_Intro
   628 ;;		_SysInitialize
   629 ;; This function is called by:
   630 ;;		Startup code after reset
   631 ;; This function uses a non-reentrant model
   632 ;;
   633                           
   634                           	psect	text0
   635  001A94                     __ptext0:
   636                           	opt stack 0
   637  001A94                     _main:
   638                           	opt stack 21
   639                           
   640                           ;main.c: 22: SysInitialize();
   641                           
   642                           ;incstack = 0
   643  001A94  ECB5  F00D         	call	_SysInitialize	;wreg free
   644                           
   645                           ;main.c: 25: {
   646                           ;main.c: 26: switch(State)
   647                           
   648                           ;main.c: 24: while(1)
   649  001A98  D005               	goto	l2264
   650  001A9A  ECC0  F00C         	call	_Intro	;wreg free
   651                           
   652                           ;main.c: 29: break;
   653  001A9E  D002               	goto	l2264
   654  001AA0  EC40  F00C         	call	_Clock	;wreg free
   655  001AA4                     l2264:
   656                           
   657                           ;main.c: 32: }
   658  001AA4  5036               	movf	_State,w,c
   659                           
   660                           ; Switch size 1, requested type "space"
   661                           ; Number of cases is 2, Range of values is 0 to 1
   662                           ; switch strategies available:
   663                           ; Name         Instructions Cycles
   664                           ; simple_byte            7     4 (average)
   665                           ;	Chosen strategy is simple_byte
   666  001AA6  0A00               	xorlw	0	; case 0
   667  001AA8  B4D8               	btfsc	status,2,c
   668  001AAA  D7F7               	goto	l259
   669  001AAC  0A01               	xorlw	1	; case 1
   670  001AAE  B4D8               	btfsc	status,2,c
   671  001AB0  D7F7               	goto	l261
   672  001AB2  D7F8               	goto	l2264
   673  001AB4                     __end_of_main:
   674                           	opt stack 0
   675                           postinc0	equ	0xFEE
   676                           wreg	equ	0xFE8
   677                           status	equ	0xFD8
   678                           
   679 ;; *************** function _SysInitialize *****************
   680 ;; Defined at:
   681 ;;		line 4 in file "SystemInitialize.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;		None
   684 ;; Auto vars:     Size  Location     Type
   685 ;;		None
   686 ;; Return value:  Size  Location     Type
   687 ;;                  1    wreg      void 
   688 ;; Registers used:
   689 ;;		wreg, status,2, cstack
   690 ;; Tracked objects:
   691 ;;		On entry : 0/0
   692 ;;		On exit  : 0/0
   693 ;;		Unchanged: 0/0
   694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   699 ;;Total ram usage:        0 bytes
   700 ;; Hardware stack levels used:    1
   701 ;; Hardware stack levels required when called:    4
   702 ;; This function calls:
   703 ;;		_EUSART1_Initialize
   704 ;;		_InterruptInitialize
   705 ;;		_PortInitialize
   706 ;;		_TMR1Initialize
   707 ;; This function is called by:
   708 ;;		_main
   709 ;; This function uses a non-reentrant model
   710 ;;
   711                           
   712                           	psect	text1
   713  001B6A                     __ptext1:
   714                           	opt stack 0
   715  001B6A                     _SysInitialize:
   716                           	opt stack 26
   717                           
   718                           ;SystemInitialize.c: 6: PortInitialize();
   719                           
   720                           ;incstack = 0
   721  001B6A  EC5A  F00D         	call	_PortInitialize	;wreg free
   722                           
   723                           ;SystemInitialize.c: 7: InterruptInitialize();
   724  001B6E  ECD5  F00D         	call	_InterruptInitialize	;wreg free
   725                           
   726                           ;SystemInitialize.c: 8: TMR1Initialize();
   727  001B72  EC78  F00D         	call	_TMR1Initialize	;wreg free
   728                           
   729                           ;SystemInitialize.c: 9: EUSART1_Initialize();
   730  001B76  ECAB  F00D         	call	_EUSART1_Initialize	;wreg free
   731  001B7A  0012               	return	
   732  001B7C                     __end_of_SysInitialize:
   733                           	opt stack 0
   734                           postinc0	equ	0xFEE
   735                           wreg	equ	0xFE8
   736                           status	equ	0xFD8
   737                           
   738 ;; *************** function _TMR1Initialize *****************
   739 ;; Defined at:
   740 ;;		line 8 in file "tmr1.c"
   741 ;; Parameters:    Size  Location     Type
   742 ;;		None
   743 ;; Auto vars:     Size  Location     Type
   744 ;;		None
   745 ;; Return value:  Size  Location     Type
   746 ;;                  1    wreg      void 
   747 ;; Registers used:
   748 ;;		wreg, status,2, cstack
   749 ;; Tracked objects:
   750 ;;		On entry : 0/0
   751 ;;		On exit  : 0/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   758 ;;Total ram usage:        0 bytes
   759 ;; Hardware stack levels used:    1
   760 ;; Hardware stack levels required when called:    3
   761 ;; This function calls:
   762 ;;		_TMR1Start
   763 ;; This function is called by:
   764 ;;		_SysInitialize
   765 ;; This function uses a non-reentrant model
   766 ;;
   767                           
   768                           	psect	text2
   769  001AF0                     __ptext2:
   770                           	opt stack 0
   771  001AF0                     _TMR1Initialize:
   772                           	opt stack 26
   773                           
   774                           ;tmr1.c: 14: T1CONbits.TMR1ON = 0;
   775                           
   776                           ;incstack = 0
   777  001AF0  90CD               	bcf	4045,0,c	;volatile
   778                           
   779                           ;tmr1.c: 20: T1CONbits.TMR1CS = 1;
   780  001AF2  82CD               	bsf	4045,1,c	;volatile
   781                           
   782                           ;tmr1.c: 26: T1CONbits.T1OSCEN = 1;
   783  001AF4  86CD               	bsf	4045,3,c	;volatile
   784                           
   785                           ;tmr1.c: 34: T1CONbits.T1CKPS = 0b00;
   786  001AF6  0ECF               	movlw	-49
   787  001AF8  16CD               	andwf	4045,f,c	;volatile
   788                           
   789                           ;tmr1.c: 40: PIR1bits.TMR1IF = 0;
   790  001AFA  909E               	bcf	3998,0,c	;volatile
   791                           
   792                           ;tmr1.c: 46: PIE1bits.TMR1IE = 1;
   793  001AFC  809D               	bsf	3997,0,c	;volatile
   794                           
   795                           ;tmr1.c: 49: TMR1H = 0x80;
   796  001AFE  0E80               	movlw	128
   797  001B00  6ECF               	movwf	4047,c	;volatile
   798                           
   799                           ;tmr1.c: 50: TMR1L = 0x00;
   800  001B02  0E00               	movlw	0
   801  001B04  6ECE               	movwf	4046,c	;volatile
   802                           
   803                           ;tmr1.c: 52: TMR1Start();
   804  001B06  ECDF  F00D         	call	_TMR1Start	;wreg free
   805  001B0A  0012               	return	
   806  001B0C                     __end_of_TMR1Initialize:
   807                           	opt stack 0
   808                           postinc0	equ	0xFEE
   809                           wreg	equ	0xFE8
   810                           status	equ	0xFD8
   811                           
   812 ;; *************** function _TMR1Start *****************
   813 ;; Defined at:
   814 ;;		line 61 in file "tmr1.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;		None
   819 ;; Return value:  Size  Location     Type
   820 ;;                  1    wreg      void 
   821 ;; Registers used:
   822 ;;		None
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   832 ;;Total ram usage:        0 bytes
   833 ;; Hardware stack levels used:    1
   834 ;; Hardware stack levels required when called:    2
   835 ;; This function calls:
   836 ;;		Nothing
   837 ;; This function is called by:
   838 ;;		_TMR1Initialize
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842                           	psect	text3
   843  001BBE                     __ptext3:
   844                           	opt stack 0
   845  001BBE                     _TMR1Start:
   846                           	opt stack 26
   847                           
   848                           ;tmr1.c: 63: T1CONbits.TMR1ON = 1;
   849                           
   850                           ;incstack = 0
   851  001BBE  80CD               	bsf	4045,0,c	;volatile
   852                           
   853                           ;tmr1.c: 65: return;
   854  001BC0  0012               	return		;funcret
   855  001BC2                     __end_of_TMR1Start:
   856                           	opt stack 0
   857                           postinc0	equ	0xFEE
   858                           wreg	equ	0xFE8
   859                           status	equ	0xFD8
   860                           
   861 ;; *************** function _PortInitialize *****************
   862 ;; Defined at:
   863 ;;		line 13 in file "SystemInitialize.c"
   864 ;; Parameters:    Size  Location     Type
   865 ;;		None
   866 ;; Auto vars:     Size  Location     Type
   867 ;;		None
   868 ;; Return value:  Size  Location     Type
   869 ;;                  1    wreg      void 
   870 ;; Registers used:
   871 ;;		wreg, status,2
   872 ;; Tracked objects:
   873 ;;		On entry : 0/0
   874 ;;		On exit  : 0/0
   875 ;;		Unchanged: 0/0
   876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   881 ;;Total ram usage:        0 bytes
   882 ;; Hardware stack levels used:    1
   883 ;; Hardware stack levels required when called:    2
   884 ;; This function calls:
   885 ;;		Nothing
   886 ;; This function is called by:
   887 ;;		_SysInitialize
   888 ;; This function uses a non-reentrant model
   889 ;;
   890                           
   891                           	psect	text4
   892  001AB4                     __ptext4:
   893                           	opt stack 0
   894  001AB4                     _PortInitialize:
   895                           	opt stack 27
   896                           
   897                           ;SystemInitialize.c: 15: LATA = 0;
   898                           
   899                           ;incstack = 0
   900  001AB4  0E00               	movlw	0
   901  001AB6  6E89               	movwf	3977,c	;volatile
   902                           
   903                           ;SystemInitialize.c: 16: TRISAbits.TRISA5 = 1;
   904  001AB8  8A92               	bsf	3986,5,c	;volatile
   905                           
   906                           ;SystemInitialize.c: 17: LATB = 0;
   907  001ABA  0E00               	movlw	0
   908  001ABC  6E8A               	movwf	3978,c	;volatile
   909                           
   910                           ;SystemInitialize.c: 18: TRISBbits.TRISB0 = 1;
   911  001ABE  8093               	bsf	3987,0,c	;volatile
   912                           
   913                           ;SystemInitialize.c: 19: TRISD = 0;
   914  001AC0  0E00               	movlw	0
   915  001AC2  6E95               	movwf	3989,c	;volatile
   916                           
   917                           ;SystemInitialize.c: 20: PORTD = 0x00;
   918  001AC4  0E00               	movlw	0
   919  001AC6  6E83               	movwf	3971,c	;volatile
   920                           
   921                           ;SystemInitialize.c: 22: ADCON1bits.PCFG = 0b1111;
   922  001AC8  80C1               	bsf	4033,0,c	;volatile
   923  001ACA  82C1               	bsf	4033,1,c	;volatile
   924  001ACC  84C1               	bsf	4033,2,c	;volatile
   925  001ACE  86C1               	bsf	4033,3,c	;volatile
   926  001AD0  0012               	return	
   927  001AD2                     __end_of_PortInitialize:
   928                           	opt stack 0
   929                           postinc0	equ	0xFEE
   930                           wreg	equ	0xFE8
   931                           status	equ	0xFD8
   932                           
   933 ;; *************** function _InterruptInitialize *****************
   934 ;; Defined at:
   935 ;;		line 4 in file "InterruptManager.c"
   936 ;; Parameters:    Size  Location     Type
   937 ;;		None
   938 ;; Auto vars:     Size  Location     Type
   939 ;;		None
   940 ;; Return value:  Size  Location     Type
   941 ;;                  1    wreg      void 
   942 ;; Registers used:
   943 ;;		None
   944 ;; Tracked objects:
   945 ;;		On entry : 0/0
   946 ;;		On exit  : 0/0
   947 ;;		Unchanged: 0/0
   948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   953 ;;Total ram usage:        0 bytes
   954 ;; Hardware stack levels used:    1
   955 ;; Hardware stack levels required when called:    2
   956 ;; This function calls:
   957 ;;		Nothing
   958 ;; This function is called by:
   959 ;;		_SysInitialize
   960 ;; This function uses a non-reentrant model
   961 ;;
   962                           
   963                           	psect	text5
   964  001BAA                     __ptext5:
   965                           	opt stack 0
   966  001BAA                     _InterruptInitialize:
   967                           	opt stack 27
   968                           
   969                           ;InterruptManager.c: 10: RCONbits.IPEN = 0;
   970                           
   971                           ;incstack = 0
   972  001BAA  9ED0               	bcf	4048,7,c	;volatile
   973                           
   974                           ;InterruptManager.c: 22: PIE1bits.TMR1IE = 1;
   975  001BAC  809D               	bsf	3997,0,c	;volatile
   976                           
   977                           ;InterruptManager.c: 24: (INTCONbits.PEIE = 1);
   978  001BAE  8CF2               	bsf	intcon,6,c	;volatile
   979                           
   980                           ;InterruptManager.c: 25: (INTCONbits.GIE = 1);
   981  001BB0  8EF2               	bsf	intcon,7,c	;volatile
   982  001BB2  0012               	return		;funcret
   983  001BB4                     __end_of_InterruptInitialize:
   984                           	opt stack 0
   985                           intcon	equ	0xFF2
   986                           postinc0	equ	0xFEE
   987                           wreg	equ	0xFE8
   988                           status	equ	0xFD8
   989                           
   990 ;; *************** function _EUSART1_Initialize *****************
   991 ;; Defined at:
   992 ;;		line 56 in file "eusart1.c"
   993 ;; Parameters:    Size  Location     Type
   994 ;;		None
   995 ;; Auto vars:     Size  Location     Type
   996 ;;		None
   997 ;; Return value:  Size  Location     Type
   998 ;;                  1    wreg      void 
   999 ;; Registers used:
  1000 ;;		wreg, status,2
  1001 ;; Tracked objects:
  1002 ;;		On entry : 0/0
  1003 ;;		On exit  : 0/0
  1004 ;;		Unchanged: 0/0
  1005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1010 ;;Total ram usage:        0 bytes
  1011 ;; Hardware stack levels used:    1
  1012 ;; Hardware stack levels required when called:    2
  1013 ;; This function calls:
  1014 ;;		Nothing
  1015 ;; This function is called by:
  1016 ;;		_SysInitialize
  1017 ;; This function uses a non-reentrant model
  1018 ;;
  1019                           
  1020                           	psect	text6
  1021  001B56                     __ptext6:
  1022                           	opt stack 0
  1023  001B56                     _EUSART1_Initialize:
  1024                           	opt stack 27
  1025                           
  1026                           ;eusart1.c: 64: RCSTA = 0x80;
  1027                           
  1028                           ;incstack = 0
  1029  001B56  0E80               	movlw	128
  1030  001B58  6EAB               	movwf	4011,c	;volatile
  1031                           
  1032                           ;eusart1.c: 67: TXSTA = 0x26;
  1033  001B5A  0E26               	movlw	38
  1034  001B5C  6EAC               	movwf	4012,c	;volatile
  1035                           
  1036                           ;eusart1.c: 70: SPBRG = 0xFF;
  1037  001B5E  68AF               	setf	4015,c	;volatile
  1038                           
  1039                           ;eusart1.c: 76: TXREG = 0x00;
  1040  001B60  0E00               	movlw	0
  1041  001B62  6EAD               	movwf	4013,c	;volatile
  1042                           
  1043                           ;eusart1.c: 79: RCREG = 0x00;
  1044  001B64  0E00               	movlw	0
  1045  001B66  6EAE               	movwf	4014,c	;volatile
  1046  001B68  0012               	return		;funcret
  1047  001B6A                     __end_of_EUSART1_Initialize:
  1048                           	opt stack 0
  1049                           intcon	equ	0xFF2
  1050                           postinc0	equ	0xFEE
  1051                           wreg	equ	0xFE8
  1052                           status	equ	0xFD8
  1053                           
  1054 ;; *************** function _Intro *****************
  1055 ;; Defined at:
  1056 ;;		line 12 in file "StateIntro.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;		None
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;		None
  1061 ;; Return value:  Size  Location     Type
  1062 ;;                  1    wreg      void 
  1063 ;; Registers used:
  1064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1074 ;;Total ram usage:        0 bytes
  1075 ;; Hardware stack levels used:    1
  1076 ;; Hardware stack levels required when called:    6
  1077 ;; This function calls:
  1078 ;;		_IntroDelay
  1079 ;;		_LCDInit
  1080 ;;		_LCDPutInst
  1081 ;;		_LCDPutStr
  1082 ;;		_printf
  1083 ;; This function is called by:
  1084 ;;		_main
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           	psect	text7
  1089  001980                     __ptext7:
  1090                           	opt stack 0
  1091  001980                     _Intro:
  1092                           	opt stack 24
  1093                           
  1094                           ;StateIntro.c: 15: LCDInit();
  1095                           
  1096                           ;incstack = 0
  1097  001980  EC10  F00C         	call	_LCDInit	;wreg free
  1098                           
  1099                           ;StateIntro.c: 18: LCDPutInst(0x80);
  1100  001984  0E80               	movlw	128
  1101  001986  ECAB  F00B         	call	_LCDPutInst
  1102                           
  1103                           ;StateIntro.c: 19: LCDPutStr("  MPUs y MCUs  ");
  1104  00198A  0ED0               	movlw	low STR_13
  1105  00198C  6E1A               	movwf	LCDPutStr@ptr,c
  1106  00198E  0E10               	movlw	high STR_13
  1107  001990  6E1B               	movwf	LCDPutStr@ptr+1,c
  1108  001992  EC05  F00D         	call	_LCDPutStr	;wreg free
  1109                           
  1110                           ;StateIntro.c: 20: LCDPutInst(0xC0);
  1111  001996  0EC0               	movlw	192
  1112  001998  ECAB  F00B         	call	_LCDPutInst
  1113                           
  1114                           ;StateIntro.c: 21: LCDPutStr(" Ing Electronik ");
  1115  00199C  0E7B               	movlw	low STR_14
  1116  00199E  6E1A               	movwf	LCDPutStr@ptr,c
  1117  0019A0  0E10               	movlw	high STR_14
  1118  0019A2  6E1B               	movwf	LCDPutStr@ptr+1,c
  1119  0019A4  EC05  F00D         	call	_LCDPutStr	;wreg free
  1120                           
  1121                           ;StateIntro.c: 23: printf("   MPUs y MCUs  \n\r");
  1122  0019A8  0E0B               	movlw	low STR_15
  1123  0019AA  6E1F               	movwf	printf@f,c
  1124  0019AC  0E10               	movlw	high STR_15
  1125  0019AE  6E20               	movwf	printf@f+1,c
  1126  0019B0  EC7C  F008         	call	_printf	;wreg free
  1127                           
  1128                           ;StateIntro.c: 24: printf(" Ing Electronik \n\r");
  1129  0019B4  0E1E               	movlw	low STR_16
  1130  0019B6  6E1F               	movwf	printf@f,c
  1131  0019B8  0E10               	movlw	high STR_16
  1132  0019BA  6E20               	movwf	printf@f+1,c
  1133  0019BC  EC7C  F008         	call	_printf	;wreg free
  1134                           
  1135                           ;StateIntro.c: 27: IntroDelay();
  1136  0019C0  ECDE  F00B         	call	_IntroDelay	;wreg free
  1137                           
  1138                           ;StateIntro.c: 30: State++;
  1139  0019C4  2A36               	incf	_State,f,c
  1140  0019C6  0012               	return		;funcret
  1141  0019C8                     __end_of_Intro:
  1142                           	opt stack 0
  1143                           intcon	equ	0xFF2
  1144                           postinc0	equ	0xFEE
  1145                           wreg	equ	0xFE8
  1146                           status	equ	0xFD8
  1147                           
  1148 ;; *************** function _LCDInit *****************
  1149 ;; Defined at:
  1150 ;;		line 45 in file "BBSPI_LCD.c"
  1151 ;; Parameters:    Size  Location     Type
  1152 ;;		None
  1153 ;; Auto vars:     Size  Location     Type
  1154 ;;		None
  1155 ;; Return value:  Size  Location     Type
  1156 ;;                  1    wreg      void 
  1157 ;; Registers used:
  1158 ;;		wreg, status,2, status,0, cstack
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1166 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1167 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1168 ;;Total ram usage:        1 bytes
  1169 ;; Hardware stack levels used:    1
  1170 ;; Hardware stack levels required when called:    5
  1171 ;; This function calls:
  1172 ;;		_InitBBSPI
  1173 ;;		_LCDPutInst
  1174 ;;		_Port_BBSPIInit
  1175 ;;		_WritePort_BBSPI
  1176 ;; This function is called by:
  1177 ;;		_Intro
  1178 ;; This function uses a non-reentrant model
  1179 ;;
  1180                           
  1181                           	psect	text8
  1182  001820                     __ptext8:
  1183                           	opt stack 0
  1184  001820                     _LCDInit:
  1185                           	opt stack 24
  1186                           
  1187                           ;BBSPI_LCD.c: 47: InitBBSPI();
  1188                           
  1189                           ;incstack = 0
  1190  001820  ECBE  F00D         	call	_InitBBSPI	;wreg free
  1191                           
  1192                           ;BBSPI_LCD.c: 48: TRISFbits.TRISF6 = 0;
  1193  001824  9C97               	bcf	3991,6,c	;volatile
  1194                           
  1195                           ;BBSPI_LCD.c: 49: LATFbits.LATF6 = 0;
  1196  001826  9C8E               	bcf	3982,6,c	;volatile
  1197                           
  1198                           ;BBSPI_LCD.c: 50: _delay((unsigned long)((5)*(40000000/4000.0)));
  1199  001828  0E41               	movlw	65
  1200  00182A  6E1A               	movwf	??_LCDInit& (0+255),c
  1201  00182C  0EEE               	movlw	238
  1202  00182E                     u1497:
  1203  00182E  2EE8               	decfsz	wreg,f,c
  1204  001830  D7FE               	bra	u1497
  1205  001832  2E1A               	decfsz	??_LCDInit& (0+255),f,c
  1206  001834  D7FC               	bra	u1497
  1207  001836  D000               	nop2	
  1208                           
  1209                           ;BBSPI_LCD.c: 51: LATFbits.LATF6 = 1;
  1210  001838  8C8E               	bsf	3982,6,c	;volatile
  1211                           
  1212                           ;BBSPI_LCD.c: 52: Port_BBSPIInit (0x00);
  1213  00183A  0E00               	movlw	0
  1214  00183C  EC86  F00D         	call	_Port_BBSPIInit
  1215                           
  1216                           ;BBSPI_LCD.c: 53: Port_BBSPIInit (0x01);
  1217  001840  0E01               	movlw	1
  1218  001842  EC86  F00D         	call	_Port_BBSPIInit
  1219                           
  1220                           ;BBSPI_LCD.c: 54: WritePort_BBSPI (0x12, 0);
  1221  001846  0E00               	movlw	0
  1222  001848  6E16               	movwf	WritePort_BBSPI@a,c
  1223  00184A  0E12               	movlw	18
  1224  00184C  EC93  F00D         	call	_WritePort_BBSPI
  1225                           
  1226                           ;BBSPI_LCD.c: 55: _delay((unsigned long)((15)*(40000000/4000.0)));
  1227  001850  0EC3               	movlw	195
  1228  001852  6E1A               	movwf	??_LCDInit& (0+255),c
  1229  001854  0ECD               	movlw	205
  1230  001856                     u1507:
  1231  001856  2EE8               	decfsz	wreg,f,c
  1232  001858  D7FE               	bra	u1507
  1233  00185A  2E1A               	decfsz	??_LCDInit& (0+255),f,c
  1234  00185C  D7FC               	bra	u1507
  1235  00185E  F000               	nop	
  1236                           
  1237                           ;BBSPI_LCD.c: 56: LCDPutInst(0x32);
  1238  001860  0E32               	movlw	50
  1239  001862  ECAB  F00B         	call	_LCDPutInst
  1240                           
  1241                           ;BBSPI_LCD.c: 57: LCDPutInst(0x3C);
  1242  001866  0E3C               	movlw	60
  1243  001868  ECAB  F00B         	call	_LCDPutInst
  1244                           
  1245                           ;BBSPI_LCD.c: 58: LCDPutInst(0x0C);
  1246  00186C  0E0C               	movlw	12
  1247  00186E  ECAB  F00B         	call	_LCDPutInst
  1248                           
  1249                           ;BBSPI_LCD.c: 59: LCDPutInst(0x01);
  1250  001872  0E01               	movlw	1
  1251  001874  ECAB  F00B         	call	_LCDPutInst
  1252                           
  1253                           ;BBSPI_LCD.c: 60: LCDPutInst(0x06);
  1254  001878  0E06               	movlw	6
  1255  00187A  ECAB  F00B         	call	_LCDPutInst
  1256  00187E  0012               	return		;funcret
  1257  001880                     __end_of_LCDInit:
  1258                           	opt stack 0
  1259                           intcon	equ	0xFF2
  1260                           postinc0	equ	0xFEE
  1261                           wreg	equ	0xFE8
  1262                           status	equ	0xFD8
  1263                           
  1264 ;; *************** function _Port_BBSPIInit *****************
  1265 ;; Defined at:
  1266 ;;		line 123 in file "BBSPI_LCD.c"
  1267 ;; Parameters:    Size  Location     Type
  1268 ;;  port_dir        1    wreg     unsigned char 
  1269 ;; Auto vars:     Size  Location     Type
  1270 ;;  port_dir        1   21[COMRAM] unsigned char 
  1271 ;; Return value:  Size  Location     Type
  1272 ;;                  1    wreg      void 
  1273 ;; Registers used:
  1274 ;;		wreg, status,2, status,0, cstack
  1275 ;; Tracked objects:
  1276 ;;		On entry : 0/0
  1277 ;;		On exit  : 0/0
  1278 ;;		Unchanged: 0/0
  1279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1281 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1283 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1284 ;;Total ram usage:        1 bytes
  1285 ;; Hardware stack levels used:    1
  1286 ;; Hardware stack levels required when called:    3
  1287 ;; This function calls:
  1288 ;;		_SendByteBBSPI
  1289 ;; This function is called by:
  1290 ;;		_LCDInit
  1291 ;; This function uses a non-reentrant model
  1292 ;;
  1293                           
  1294                           	psect	text9
  1295  001B0C                     __ptext9:
  1296                           	opt stack 0
  1297  001B0C                     _Port_BBSPIInit:
  1298                           	opt stack 25
  1299                           
  1300                           ;incstack = 0
  1301                           ;Port_BBSPIInit@port_dir stored from wreg
  1302  001B0C  6E16               	movwf	Port_BBSPIInit@port_dir,c
  1303                           
  1304                           ;BBSPI_LCD.c: 128: LATAbits.LATA2 = 0;
  1305  001B0E  9489               	bcf	3977,2,c	;volatile
  1306                           
  1307                           ;BBSPI_LCD.c: 129: SendByteBBSPI(0x40);
  1308  001B10  0E40               	movlw	64
  1309  001B12  EC98  F00C         	call	_SendByteBBSPI
  1310                           
  1311                           ;BBSPI_LCD.c: 130: SendByteBBSPI(port_dir);
  1312  001B16  5016               	movf	Port_BBSPIInit@port_dir,w,c
  1313  001B18  EC98  F00C         	call	_SendByteBBSPI
  1314                           
  1315                           ;BBSPI_LCD.c: 131: SendByteBBSPI(0x00);
  1316  001B1C  0E00               	movlw	0
  1317  001B1E  EC98  F00C         	call	_SendByteBBSPI
  1318                           
  1319                           ;BBSPI_LCD.c: 132: LATAbits.LATA2 = 1;
  1320  001B22  8489               	bsf	3977,2,c	;volatile
  1321  001B24  0012               	return		;funcret
  1322  001B26                     __end_of_Port_BBSPIInit:
  1323                           	opt stack 0
  1324                           intcon	equ	0xFF2
  1325                           postinc0	equ	0xFEE
  1326                           wreg	equ	0xFE8
  1327                           status	equ	0xFD8
  1328                           
  1329 ;; *************** function _InitBBSPI *****************
  1330 ;; Defined at:
  1331 ;;		line 70 in file "BBSPI_LCD.c"
  1332 ;; Parameters:    Size  Location     Type
  1333 ;;		None
  1334 ;; Auto vars:     Size  Location     Type
  1335 ;;		None
  1336 ;; Return value:  Size  Location     Type
  1337 ;;                  1    wreg      void 
  1338 ;; Registers used:
  1339 ;;		None
  1340 ;; Tracked objects:
  1341 ;;		On entry : 0/0
  1342 ;;		On exit  : 0/0
  1343 ;;		Unchanged: 0/0
  1344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1349 ;;Total ram usage:        0 bytes
  1350 ;; Hardware stack levels used:    1
  1351 ;; Hardware stack levels required when called:    2
  1352 ;; This function calls:
  1353 ;;		Nothing
  1354 ;; This function is called by:
  1355 ;;		_LCDInit
  1356 ;; This function uses a non-reentrant model
  1357 ;;
  1358                           
  1359                           	psect	text10
  1360  001B7C                     __ptext10:
  1361                           	opt stack 0
  1362  001B7C                     _InitBBSPI:
  1363                           	opt stack 26
  1364                           
  1365                           ;BBSPI_LCD.c: 72: TRISAbits.TRISA2 = 0;
  1366                           
  1367                           ;incstack = 0
  1368  001B7C  9492               	bcf	3986,2,c	;volatile
  1369                           
  1370                           ;BBSPI_LCD.c: 73: TRISCbits.TRISC4 = 1;
  1371  001B7E  8894               	bsf	3988,4,c	;volatile
  1372                           
  1373                           ;BBSPI_LCD.c: 74: TRISCbits.TRISC5 = 0;
  1374  001B80  9A94               	bcf	3988,5,c	;volatile
  1375                           
  1376                           ;BBSPI_LCD.c: 75: TRISCbits.TRISC3 = 0;
  1377  001B82  9694               	bcf	3988,3,c	;volatile
  1378                           
  1379                           ;BBSPI_LCD.c: 77: LATAbits.LATA2 = 1;
  1380  001B84  8489               	bsf	3977,2,c	;volatile
  1381                           
  1382                           ;BBSPI_LCD.c: 78: LATCbits.LATC4 = 1;
  1383  001B86  888B               	bsf	3979,4,c	;volatile
  1384                           
  1385                           ;BBSPI_LCD.c: 79: LATCbits.LATC5 = 0;
  1386  001B88  9A8B               	bcf	3979,5,c	;volatile
  1387                           
  1388                           ;BBSPI_LCD.c: 80: LATCbits.LATC3 = 0;
  1389  001B8A  968B               	bcf	3979,3,c	;volatile
  1390  001B8C  0012               	return		;funcret
  1391  001B8E                     __end_of_InitBBSPI:
  1392                           	opt stack 0
  1393                           intcon	equ	0xFF2
  1394                           postinc0	equ	0xFEE
  1395                           wreg	equ	0xFE8
  1396                           status	equ	0xFD8
  1397                           
  1398 ;; *************** function _IntroDelay *****************
  1399 ;; Defined at:
  1400 ;;		line 39 in file "StateIntro.c"
  1401 ;; Parameters:    Size  Location     Type
  1402 ;;		None
  1403 ;; Auto vars:     Size  Location     Type
  1404 ;;  aux             1   22[COMRAM] unsigned char 
  1405 ;;  n               1   21[COMRAM] unsigned char 
  1406 ;;  i               1   20[COMRAM] unsigned char 
  1407 ;; Return value:  Size  Location     Type
  1408 ;;                  1    wreg      void 
  1409 ;; Registers used:
  1410 ;;		wreg, status,2, status,0
  1411 ;; Tracked objects:
  1412 ;;		On entry : 0/0
  1413 ;;		On exit  : 0/0
  1414 ;;		Unchanged: 0/0
  1415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1417 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1418 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1419 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1420 ;;Total ram usage:        5 bytes
  1421 ;; Hardware stack levels used:    1
  1422 ;; Hardware stack levels required when called:    2
  1423 ;; This function calls:
  1424 ;;		Nothing
  1425 ;; This function is called by:
  1426 ;;		_Intro
  1427 ;; This function uses a non-reentrant model
  1428 ;;
  1429                           
  1430                           	psect	text11
  1431  0017BC                     __ptext11:
  1432                           	opt stack 0
  1433  0017BC                     _IntroDelay:
  1434                           	opt stack 27
  1435                           
  1436                           ;StateIntro.c: 41: uint8_t i;
  1437                           ;StateIntro.c: 42: uint8_t aux = 0;
  1438                           
  1439                           ;incstack = 0
  1440  0017BC  0E00               	movlw	0
  1441  0017BE  6E17               	movwf	IntroDelay@aux,c
  1442                           
  1443                           ;StateIntro.c: 43: uint8_t n = 0;
  1444  0017C0  0E00               	movlw	0
  1445  0017C2  6E16               	movwf	IntroDelay@n,c
  1446                           
  1447                           ;StateIntro.c: 45: for (i=0;i<100;i++)
  1448  0017C4  0E00               	movlw	0
  1449  0017C6  6E15               	movwf	IntroDelay@i,c
  1450  0017C8                     l2172:
  1451  0017C8  0E63               	movlw	99
  1452  0017CA  6415               	cpfsgt	IntroDelay@i,c
  1453  0017CC  D001               	goto	l224
  1454  0017CE  D025               	goto	u1450
  1455  0017D0                     l224:
  1456                           
  1457                           ;StateIntro.c: 46: {
  1458                           ;StateIntro.c: 47: PORTD = aux;
  1459  0017D0  C017  FF83         	movff	IntroDelay@aux,3971	;volatile
  1460                           
  1461                           ;StateIntro.c: 48: if(n == 0)
  1462  0017D4  5016               	movf	IntroDelay@n,w,c
  1463  0017D6  A4D8               	btfss	status,2,c
  1464  0017D8  D007               	goto	l227
  1465                           
  1466                           ;StateIntro.c: 49: {
  1467                           ;StateIntro.c: 50: aux = 0b10000000 | (aux>>1);
  1468  0017DA  80D8               	bsf	status,0,c
  1469  0017DC  3217               	rrcf	IntroDelay@aux,f,c
  1470                           
  1471                           ;StateIntro.c: 51: if(aux == 255) n = 1;
  1472  0017DE  2817               	incf	IntroDelay@aux,w,c
  1473  0017E0  A4D8               	btfss	status,2,c
  1474  0017E2  D002               	goto	l227
  1475  0017E4  0E01               	movlw	1
  1476  0017E6  6E16               	movwf	IntroDelay@n,c
  1477  0017E8                     l227:
  1478                           
  1479                           ;StateIntro.c: 52: }
  1480                           ;StateIntro.c: 53: if(n == 1)
  1481  0017E8  0416               	decf	IntroDelay@n,w,c
  1482  0017EA  A4D8               	btfss	status,2,c
  1483  0017EC  D008               	goto	l229
  1484                           
  1485                           ;StateIntro.c: 54: {
  1486                           ;StateIntro.c: 55: aux = aux>>1;
  1487  0017EE  90D8               	bcf	status,0,c
  1488  0017F0  3017               	rrcf	IntroDelay@aux,w,c
  1489  0017F2  6E17               	movwf	IntroDelay@aux,c
  1490                           
  1491                           ;StateIntro.c: 56: if(aux == 0) n = 0;
  1492  0017F4  5017               	movf	IntroDelay@aux,w,c
  1493  0017F6  A4D8               	btfss	status,2,c
  1494  0017F8  D002               	goto	l229
  1495  0017FA  0E00               	movlw	0
  1496  0017FC  6E16               	movwf	IntroDelay@n,c
  1497  0017FE                     l229:
  1498                           
  1499                           ;StateIntro.c: 57: }
  1500                           ;StateIntro.c: 58: _delay((unsigned long)((40)*(40000000/4000.0)));
  1501  0017FE  0E03               	movlw	3
  1502  001800  6E14               	movwf	(??_IntroDelay+1)& (0+255),c
  1503  001802  0E08               	movlw	8
  1504  001804  6E13               	movwf	??_IntroDelay& (0+255),c
  1505  001806  0E77               	movlw	119
  1506  001808                     u1517:
  1507  001808  2EE8               	decfsz	wreg,f,c
  1508  00180A  D7FE               	bra	u1517
  1509  00180C  2E13               	decfsz	??_IntroDelay& (0+255),f,c
  1510  00180E  D7FC               	bra	u1517
  1511  001810  2E14               	decfsz	(??_IntroDelay+1)& (0+255),f,c
  1512  001812  D7FA               	bra	u1517
  1513  001814  F000               	nop	
  1514  001816  2A15               	incf	IntroDelay@i,f,c
  1515  001818  D7D7               	goto	l2172
  1516  00181A                     u1450:
  1517                           
  1518                           ;StateIntro.c: 59: }
  1519                           ;StateIntro.c: 60: PORTD = 0;
  1520  00181A  0E00               	movlw	0
  1521  00181C  6E83               	movwf	3971,c	;volatile
  1522  00181E  0012               	return		;funcret
  1523  001820                     __end_of_IntroDelay:
  1524                           	opt stack 0
  1525                           intcon	equ	0xFF2
  1526                           postinc0	equ	0xFEE
  1527                           wreg	equ	0xFE8
  1528                           status	equ	0xFD8
  1529                           
  1530 ;; *************** function _Clock *****************
  1531 ;; Defined at:
  1532 ;;		line 14 in file "StateClock.c"
  1533 ;; Parameters:    Size  Location     Type
  1534 ;;		None
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;		None
  1537 ;; Return value:  Size  Location     Type
  1538 ;;                  1    wreg      void 
  1539 ;; Registers used:
  1540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1541 ;; Tracked objects:
  1542 ;;		On entry : 0/0
  1543 ;;		On exit  : 0/0
  1544 ;;		Unchanged: 0/0
  1545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1550 ;;Total ram usage:        0 bytes
  1551 ;; Hardware stack levels used:    1
  1552 ;; Hardware stack levels required when called:    9
  1553 ;; This function calls:
  1554 ;;		_LCDPutInst
  1555 ;;		_LCDPutStr
  1556 ;;		_SWdelay
  1557 ;;		_count_Clock
  1558 ;;		_printf
  1559 ;; This function is called by:
  1560 ;;		_main
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564                           	psect	text12
  1565  001880                     __ptext12:
  1566                           	opt stack 0
  1567  001880                     _Clock:
  1568                           	opt stack 21
  1569                           
  1570                           ;StateClock.c: 17: LCDPutInst(0x80);
  1571                           
  1572                           ;incstack = 0
  1573  001880  0E80               	movlw	128
  1574  001882  ECAB  F00B         	call	_LCDPutInst
  1575                           
  1576                           ;StateClock.c: 18: LCDPutStr("     Clock      ");
  1577  001886  0E8C               	movlw	low STR_1
  1578  001888  6E1A               	movwf	LCDPutStr@ptr,c
  1579  00188A  0E10               	movlw	high STR_1
  1580  00188C  6E1B               	movwf	LCDPutStr@ptr+1,c
  1581  00188E  EC05  F00D         	call	_LCDPutStr	;wreg free
  1582                           
  1583                           ;StateClock.c: 19: LCDPutInst(0xC0);
  1584  001892  0EC0               	movlw	192
  1585  001894  ECAB  F00B         	call	_LCDPutInst
  1586                           
  1587                           ;StateClock.c: 20: LCDPutStr("RB0=Now RA5=Next");
  1588  001898  0EBF               	movlw	low STR_2
  1589  00189A  6E1A               	movwf	LCDPutStr@ptr,c
  1590  00189C  0E10               	movlw	high STR_2
  1591  00189E  6E1B               	movwf	LCDPutStr@ptr+1,c
  1592  0018A0  EC05  F00D         	call	_LCDPutStr	;wreg free
  1593                           
  1594                           ;StateClock.c: 23: printf("     Clock      \n\r");
  1595  0018A4  0E31               	movlw	low STR_3
  1596  0018A6  6E1F               	movwf	printf@f,c
  1597  0018A8  0E10               	movlw	high STR_3
  1598  0018AA  6E20               	movwf	printf@f+1,c
  1599  0018AC  EC7C  F008         	call	_printf	;wreg free
  1600                           
  1601                           ;StateClock.c: 24: printf("RB0=Now RA5=Next\n\r");
  1602  0018B0  0E44               	movlw	low STR_4
  1603  0018B2  6E1F               	movwf	printf@f,c
  1604  0018B4  0E10               	movlw	high STR_4
  1605  0018B6  6E20               	movwf	printf@f+1,c
  1606  0018B8  EC7C  F008         	call	_printf	;wreg free
  1607                           
  1608                           ;StateClock.c: 26: while (State == 1)
  1609  0018BC  D00C               	goto	l165
  1610  0018BE                     l163:
  1611                           
  1612                           ;StateClock.c: 27: {
  1613                           ;StateClock.c: 28: if (PORTBbits.RB0 == 0)
  1614  0018BE  B081               	btfsc	3969,0,c	;volatile
  1615  0018C0  D004               	goto	l164
  1616                           
  1617                           ;StateClock.c: 29: {
  1618                           ;StateClock.c: 30: SWdelay();
  1619  0018C2  EC1E  F00D         	call	_SWdelay	;wreg free
  1620                           
  1621                           ;StateClock.c: 31: count_Clock ();
  1622  0018C6  ECFF  F00A         	call	_count_Clock	;wreg free
  1623  0018CA                     l164:
  1624                           
  1625                           ;StateClock.c: 32: }
  1626                           ;StateClock.c: 33: if (PORTAbits.RA5 == 0)
  1627  0018CA  BA80               	btfsc	3968,5,c	;volatile
  1628  0018CC  D004               	goto	l165
  1629                           
  1630                           ;StateClock.c: 34: {
  1631                           ;StateClock.c: 35: SWdelay();
  1632  0018CE  EC1E  F00D         	call	_SWdelay	;wreg free
  1633                           
  1634                           ;StateClock.c: 36: State = 0;
  1635  0018D2  0E00               	movlw	0
  1636  0018D4  6E36               	movwf	_State,c
  1637  0018D6                     l165:
  1638  0018D6  0436               	decf	_State,w,c
  1639  0018D8  A4D8               	btfss	status,2,c
  1640  0018DA  0012               	return	
  1641  0018DC  D7F0               	goto	l163
  1642  0018DE                     __end_of_Clock:
  1643                           	opt stack 0
  1644                           intcon	equ	0xFF2
  1645                           postinc0	equ	0xFEE
  1646                           wreg	equ	0xFE8
  1647                           status	equ	0xFD8
  1648                           
  1649 ;; *************** function _count_Clock *****************
  1650 ;; Defined at:
  1651 ;;		line 75 in file "StateClock.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;		None
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;		None
  1656 ;; Return value:  Size  Location     Type
  1657 ;;                  1    wreg      void 
  1658 ;; Registers used:
  1659 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1660 ;; Tracked objects:
  1661 ;;		On entry : 0/0
  1662 ;;		On exit  : 0/0
  1663 ;;		Unchanged: 0/0
  1664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1669 ;;Total ram usage:        0 bytes
  1670 ;; Hardware stack levels used:    1
  1671 ;; Hardware stack levels required when called:    8
  1672 ;; This function calls:
  1673 ;;		_LCDPutInst
  1674 ;;		_LCDPutStr
  1675 ;;		_SWdelay
  1676 ;;		_disp_Clock
  1677 ;;		_printf
  1678 ;;		_set_Clock
  1679 ;; This function is called by:
  1680 ;;		_Clock
  1681 ;; This function uses a non-reentrant model
  1682 ;;
  1683                           
  1684                           	psect	text13
  1685  0015FE                     __ptext13:
  1686                           	opt stack 0
  1687  0015FE                     _count_Clock:
  1688                           	opt stack 21
  1689                           
  1690                           ;StateClock.c: 77: while (State == 1)
  1691                           
  1692                           ;incstack = 0
  1693  0015FE  D03C               	goto	l180
  1694  001600                     
  1695                           ;StateClock.c: 78: {
  1696                           ;StateClock.c: 79: if(Timer1Flag == 1)
  1697  001600  0437               	decf	_Timer1Flag,w,c
  1698  001602  A4D8               	btfss	status,2,c
  1699  001604  D02B               	goto	l175
  1700                           
  1701                           ;StateClock.c: 80: {
  1702                           ;StateClock.c: 81: sec++;
  1703  001606  2A33               	incf	_sec,f,c	;volatile
  1704                           
  1705                           ;StateClock.c: 82: if (sec > 59)
  1706  001608  0E3B               	movlw	59
  1707  00160A  6433               	cpfsgt	_sec,c	;volatile
  1708  00160C  D003               	goto	l176
  1709                           
  1710                           ;StateClock.c: 83: {
  1711                           ;StateClock.c: 84: sec = 0;
  1712  00160E  0E00               	movlw	0
  1713  001610  6E33               	movwf	_sec,c	;volatile
  1714                           
  1715                           ;StateClock.c: 85: min++;
  1716  001612  2A34               	incf	_min,f,c	;volatile
  1717  001614                     l176:
  1718                           
  1719                           ;StateClock.c: 86: }
  1720                           ;StateClock.c: 87: if (min > 59)
  1721  001614  0E3B               	movlw	59
  1722  001616  6434               	cpfsgt	_min,c	;volatile
  1723  001618  D003               	goto	l177
  1724                           
  1725                           ;StateClock.c: 88: {
  1726                           ;StateClock.c: 89: min = 0;
  1727  00161A  0E00               	movlw	0
  1728  00161C  6E34               	movwf	_min,c	;volatile
  1729                           
  1730                           ;StateClock.c: 90: hr++;
  1731  00161E  2A35               	incf	_hr,f,c	;volatile
  1732  001620                     l177:
  1733                           
  1734                           ;StateClock.c: 91: }
  1735                           ;StateClock.c: 92: if (hr > 12 && min == 0 && sec == 0)
  1736  001620  0E0C               	movlw	12
  1737  001622  6435               	cpfsgt	_hr,c	;volatile
  1738  001624  D008               	goto	l178
  1739  001626  5034               	movf	_min,w,c	;volatile
  1740  001628  A4D8               	btfss	status,2,c
  1741  00162A  D005               	goto	l178
  1742  00162C  5033               	movf	_sec,w,c	;volatile
  1743  00162E  A4D8               	btfss	status,2,c
  1744  001630  D002               	goto	l178
  1745                           
  1746                           ;StateClock.c: 93: {
  1747                           ;StateClock.c: 94: hr = 1;
  1748  001632  0E01               	movlw	1
  1749  001634  6E35               	movwf	_hr,c	;volatile
  1750  001636                     l178:
  1751                           
  1752                           ;StateClock.c: 95: }
  1753                           ;StateClock.c: 96: disp_Clock();
  1754  001636  ECB1  F009         	call	_disp_Clock	;wreg free
  1755                           
  1756                           ;StateClock.c: 97: Timer1Flag = 0;
  1757  00163A  0E00               	movlw	0
  1758  00163C  6E37               	movwf	_Timer1Flag,c
  1759                           
  1760                           ;StateClock.c: 99: LCDPutInst(0xC0);
  1761  00163E  0EC0               	movlw	192
  1762  001640  ECAB  F00B         	call	_LCDPutInst
  1763                           
  1764                           ;StateClock.c: 100: LCDPutStr("RB0=Menu RA5=Set");
  1765  001644  0EAE               	movlw	low STR_9
  1766  001646  6E1A               	movwf	LCDPutStr@ptr,c
  1767  001648  0E10               	movlw	high STR_9
  1768  00164A  6E1B               	movwf	LCDPutStr@ptr+1,c
  1769  00164C  EC05  F00D         	call	_LCDPutStr	;wreg free
  1770                           
  1771                           ;StateClock.c: 101: printf("RB0=Menu RA5=Set\r");
  1772  001650  0E69               	movlw	low STR_10
  1773  001652  6E1F               	movwf	printf@f,c
  1774  001654  0E10               	movlw	high STR_10
  1775  001656  6E20               	movwf	printf@f+1,c
  1776  001658  EC7C  F008         	call	_printf	;wreg free
  1777  00165C                     l175:
  1778                           
  1779                           ;StateClock.c: 102: }
  1780                           ;StateClock.c: 103: if(PORTAbits.RA5 == 0)
  1781  00165C  BA80               	btfsc	3968,5,c	;volatile
  1782  00165E  D006               	goto	l179
  1783                           
  1784                           ;StateClock.c: 104: {
  1785                           ;StateClock.c: 105: SWdelay();
  1786  001660  EC1E  F00D         	call	_SWdelay	;wreg free
  1787                           
  1788                           ;StateClock.c: 106: timeset = 1;
  1789  001664  0E01               	movlw	1
  1790  001666  6E32               	movwf	_timeset,c	;volatile
  1791                           
  1792                           ;StateClock.c: 107: set_Clock();
  1793  001668  EC78  F00A         	call	_set_Clock	;wreg free
  1794  00166C                     l179:
  1795                           
  1796                           ;StateClock.c: 108: }
  1797                           ;StateClock.c: 109: if(PORTBbits.RB0 == 0)
  1798  00166C  B081               	btfsc	3969,0,c	;volatile
  1799  00166E  D004               	goto	l180
  1800                           
  1801                           ;StateClock.c: 110: {
  1802                           ;StateClock.c: 111: SWdelay();
  1803  001670  EC1E  F00D         	call	_SWdelay	;wreg free
  1804                           
  1805                           ;StateClock.c: 115: State = 0;
  1806  001674  0E00               	movlw	0
  1807  001676  6E36               	movwf	_State,c
  1808  001678                     l180:
  1809  001678  0436               	decf	_State,w,c
  1810  00167A  A4D8               	btfss	status,2,c
  1811  00167C  0012               	return	
  1812  00167E  D7C0               	goto	l174
  1813  001680                     __end_of_count_Clock:
  1814                           	opt stack 0
  1815                           intcon	equ	0xFF2
  1816                           postinc0	equ	0xFEE
  1817                           wreg	equ	0xFE8
  1818                           status	equ	0xFD8
  1819                           
  1820 ;; *************** function _set_Clock *****************
  1821 ;; Defined at:
  1822 ;;		line 127 in file "StateClock.c"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;		None
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;		None
  1827 ;; Return value:  Size  Location     Type
  1828 ;;                  1    wreg      void 
  1829 ;; Registers used:
  1830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1840 ;;Total ram usage:        0 bytes
  1841 ;; Hardware stack levels used:    1
  1842 ;; Hardware stack levels required when called:    7
  1843 ;; This function calls:
  1844 ;;		_LCDPutInst
  1845 ;;		_LCDPutStr
  1846 ;;		_SWdelay
  1847 ;;		_disp_Clock
  1848 ;;		_printf
  1849 ;; This function is called by:
  1850 ;;		_count_Clock
  1851 ;; This function uses a non-reentrant model
  1852 ;;
  1853                           
  1854                           	psect	text14
  1855  0014F0                     __ptext14:
  1856                           	opt stack 0
  1857  0014F0                     _set_Clock:
  1858                           	opt stack 21
  1859                           
  1860                           ;StateClock.c: 129: Time = hour;
  1861                           
  1862                           ;incstack = 0
  1863  0014F0  0E00               	movlw	0
  1864  0014F2  D022               	goto	L1
  1865  0014F4                     
  1866                           ;StateClock.c: 131: {
  1867                           ;StateClock.c: 132: LCDPutInst(0xC0);
  1868  0014F4  0EC0               	movlw	192
  1869  0014F6  ECAB  F00B         	call	_LCDPutInst
  1870                           
  1871                           ;StateClock.c: 133: LCDPutStr("RB0= ++ RA5= -->");
  1872  0014FA  0E9D               	movlw	low STR_11
  1873  0014FC  6E1A               	movwf	LCDPutStr@ptr,c
  1874  0014FE  0E10               	movlw	high STR_11
  1875  001500  6E1B               	movwf	LCDPutStr@ptr+1,c
  1876  001502  EC05  F00D         	call	_LCDPutStr	;wreg free
  1877                           
  1878                           ;StateClock.c: 134: printf("RB0= ++ RA5= -->\r");
  1879  001506  0E57               	movlw	low STR_12
  1880  001508  6E1F               	movwf	printf@f,c
  1881  00150A  0E10               	movlw	high STR_12
  1882  00150C  6E20               	movwf	printf@f+1,c
  1883  00150E  EC7C  F008         	call	_printf	;wreg free
  1884                           
  1885                           ;StateClock.c: 136: switch (Time)
  1886  001512  D028               	goto	l187
  1887  001514  ECB1  F009         	call	_disp_Clock	;wreg free
  1888                           
  1889                           ;StateClock.c: 139: if(PORTBbits.RB0 == 0)
  1890  001518  B081               	btfsc	3969,0,c	;volatile
  1891  00151A  D009               	goto	l189
  1892                           
  1893                           ;StateClock.c: 140: {
  1894                           ;StateClock.c: 141: SWdelay();
  1895  00151C  EC1E  F00D         	call	_SWdelay	;wreg free
  1896                           
  1897                           ;StateClock.c: 142: hr++;
  1898  001520  2A35               	incf	_hr,f,c	;volatile
  1899                           
  1900                           ;StateClock.c: 143: if (hr > 12)
  1901  001522  0E0C               	movlw	12
  1902  001524  6435               	cpfsgt	_hr,c	;volatile
  1903  001526  D025               	goto	l193
  1904                           
  1905                           ;StateClock.c: 144: hr = 0;
  1906  001528  0E00               	movlw	0
  1907  00152A  6E35               	movwf	_hr,c	;volatile
  1908                           
  1909                           ;StateClock.c: 145: }
  1910  00152C  D022               	goto	l193
  1911  00152E                     l189:
  1912                           
  1913                           ;StateClock.c: 146: else if(PORTAbits.RA5 == 0)
  1914  00152E  BA80               	btfsc	3968,5,c	;volatile
  1915  001530  D020               	goto	l193
  1916                           
  1917                           ;StateClock.c: 147: {
  1918                           ;StateClock.c: 148: SWdelay();
  1919  001532  EC1E  F00D         	call	_SWdelay	;wreg free
  1920                           
  1921                           ;StateClock.c: 149: Time = minute;
  1922  001536  0E01               	movlw	1
  1923  001538                     L1:
  1924  001538  6E31               	movwf	_Time,c
  1925                           
  1926                           ;StateClock.c: 150: }
  1927                           ;StateClock.c: 151: break;
  1928  00153A  D01B               	goto	l193
  1929  00153C  ECB1  F009         	call	_disp_Clock	;wreg free
  1930                           
  1931                           ;StateClock.c: 153: if(PORTBbits.RB0 == 0)
  1932  001540  B081               	btfsc	3969,0,c	;volatile
  1933  001542  D009               	goto	l195
  1934                           
  1935                           ;StateClock.c: 154: {
  1936                           ;StateClock.c: 155: SWdelay();
  1937  001544  EC1E  F00D         	call	_SWdelay	;wreg free
  1938                           
  1939                           ;StateClock.c: 156: min++;
  1940  001548  2A34               	incf	_min,f,c	;volatile
  1941                           
  1942                           ;StateClock.c: 157: if (min > 59)
  1943  00154A  0E3B               	movlw	59
  1944  00154C  6434               	cpfsgt	_min,c	;volatile
  1945  00154E  D011               	goto	l193
  1946                           
  1947                           ;StateClock.c: 158: min = 0;
  1948  001550  0E00               	movlw	0
  1949  001552  6E34               	movwf	_min,c	;volatile
  1950                           
  1951                           ;StateClock.c: 159: }
  1952  001554  D00E               	goto	l193
  1953  001556                     l195:
  1954                           
  1955                           ;StateClock.c: 160: else if (PORTAbits.RA5 == 0)
  1956  001556  BA80               	btfsc	3968,5,c	;volatile
  1957  001558  D00C               	goto	l193
  1958                           
  1959                           ;StateClock.c: 161: {
  1960                           ;StateClock.c: 162: SWdelay();
  1961  00155A  EC1E  F00D         	call	_SWdelay	;wreg free
  1962                           
  1963                           ;StateClock.c: 163: timeset = 0;
  1964  00155E  0E00               	movlw	0
  1965  001560  6E32               	movwf	_timeset,c	;volatile
  1966                           
  1967                           ;StateClock.c: 166: }
  1968                           
  1969                           ;StateClock.c: 164: }
  1970                           ;StateClock.c: 165: break;
  1971  001562  D007               	goto	l193
  1972  001564                     l187:
  1973  001564  5031               	movf	_Time,w,c
  1974                           
  1975                           ; Switch size 1, requested type "space"
  1976                           ; Number of cases is 2, Range of values is 0 to 1
  1977                           ; switch strategies available:
  1978                           ; Name         Instructions Cycles
  1979                           ; simple_byte            7     4 (average)
  1980                           ;	Chosen strategy is simple_byte
  1981  001566  0A00               	xorlw	0	; case 0
  1982  001568  B4D8               	btfsc	status,2,c
  1983  00156A  D7D4               	goto	l188
  1984  00156C  0A01               	xorlw	1	; case 1
  1985  00156E  B4D8               	btfsc	status,2,c
  1986  001570  D7E5               	goto	l194
  1987  001572                     l193:
  1988  001572  0432               	decf	_timeset,w,c	;volatile
  1989  001574  A4D8               	btfss	status,2,c
  1990  001576  0012               	return	
  1991  001578  D7BD               	goto	l186
  1992  00157A                     __end_of_set_Clock:
  1993                           	opt stack 0
  1994                           intcon	equ	0xFF2
  1995                           postinc0	equ	0xFEE
  1996                           wreg	equ	0xFE8
  1997                           status	equ	0xFD8
  1998                           
  1999 ;; *************** function _disp_Clock *****************
  2000 ;; Defined at:
  2001 ;;		line 48 in file "StateClock.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;		None
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;		None
  2006 ;; Return value:  Size  Location     Type
  2007 ;;                  1    wreg      void 
  2008 ;; Registers used:
  2009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2010 ;; Tracked objects:
  2011 ;;		On entry : 0/0
  2012 ;;		On exit  : 0/0
  2013 ;;		Unchanged: 0/0
  2014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2019 ;;Total ram usage:        0 bytes
  2020 ;; Hardware stack levels used:    1
  2021 ;; Hardware stack levels required when called:    6
  2022 ;; This function calls:
  2023 ;;		_LCDPutChar
  2024 ;;		_LCDPutInst
  2025 ;;		_LCDPutStr
  2026 ;;		___awdiv
  2027 ;;		___awmod
  2028 ;;		_printf
  2029 ;; This function is called by:
  2030 ;;		_count_Clock
  2031 ;;		_set_Clock
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           	psect	text15
  2036  001362                     __ptext15:
  2037                           	opt stack 0
  2038  001362                     _disp_Clock:
  2039                           	opt stack 21
  2040                           
  2041                           ;StateClock.c: 51: LCDPutInst(0x80);
  2042                           
  2043                           ;incstack = 0
  2044  001362  0E80               	movlw	128
  2045  001364  ECAB  F00B         	call	_LCDPutInst
  2046                           
  2047                           ;StateClock.c: 52: LCDPutChar(hr/10+'0');
  2048  001368  C035  F013         	movff	_hr,___awdiv@dividend	;volatile
  2049  00136C  6A14               	clrf	___awdiv@dividend+1,c
  2050  00136E  0E00               	movlw	0
  2051  001370  6E16               	movwf	___awdiv@divisor+1,c
  2052  001372  0E0A               	movlw	10
  2053  001374  6E15               	movwf	___awdiv@divisor,c
  2054  001376  ECBD  F00A         	call	___awdiv	;wreg free
  2055  00137A  5013               	movf	?___awdiv,w,c
  2056  00137C  0F30               	addlw	48
  2057  00137E  EC78  F00B         	call	_LCDPutChar
  2058                           
  2059                           ;StateClock.c: 53: LCDPutChar(hr%10+'0');
  2060  001382  C035  F013         	movff	_hr,___awmod@dividend	;volatile
  2061  001386  6A14               	clrf	___awmod@dividend+1,c
  2062  001388  0E00               	movlw	0
  2063  00138A  6E16               	movwf	___awmod@divisor+1,c
  2064  00138C  0E0A               	movlw	10
  2065  00138E  6E15               	movwf	___awmod@divisor,c
  2066  001390  EC40  F00B         	call	___awmod	;wreg free
  2067  001394  5013               	movf	?___awmod,w,c
  2068  001396  0F30               	addlw	48
  2069  001398  EC78  F00B         	call	_LCDPutChar
  2070                           
  2071                           ;StateClock.c: 54: LCDPutChar(':');
  2072  00139C  0E3A               	movlw	58
  2073  00139E  EC78  F00B         	call	_LCDPutChar
  2074                           
  2075                           ;StateClock.c: 55: LCDPutChar(min/10+'0');
  2076  0013A2  C034  F013         	movff	_min,___awdiv@dividend	;volatile
  2077  0013A6  6A14               	clrf	___awdiv@dividend+1,c
  2078  0013A8  0E00               	movlw	0
  2079  0013AA  6E16               	movwf	___awdiv@divisor+1,c
  2080  0013AC  0E0A               	movlw	10
  2081  0013AE  6E15               	movwf	___awdiv@divisor,c
  2082  0013B0  ECBD  F00A         	call	___awdiv	;wreg free
  2083  0013B4  5013               	movf	?___awdiv,w,c
  2084  0013B6  0F30               	addlw	48
  2085  0013B8  EC78  F00B         	call	_LCDPutChar
  2086                           
  2087                           ;StateClock.c: 56: LCDPutChar(min%10+'0');
  2088  0013BC  C034  F013         	movff	_min,___awmod@dividend	;volatile
  2089  0013C0  6A14               	clrf	___awmod@dividend+1,c
  2090  0013C2  0E00               	movlw	0
  2091  0013C4  6E16               	movwf	___awmod@divisor+1,c
  2092  0013C6  0E0A               	movlw	10
  2093  0013C8  6E15               	movwf	___awmod@divisor,c
  2094  0013CA  EC40  F00B         	call	___awmod	;wreg free
  2095  0013CE  5013               	movf	?___awmod,w,c
  2096  0013D0  0F30               	addlw	48
  2097  0013D2  EC78  F00B         	call	_LCDPutChar
  2098                           
  2099                           ;StateClock.c: 57: LCDPutChar(':');
  2100  0013D6  0E3A               	movlw	58
  2101  0013D8  EC78  F00B         	call	_LCDPutChar
  2102                           
  2103                           ;StateClock.c: 58: LCDPutChar(sec/10+'0');
  2104  0013DC  C033  F013         	movff	_sec,___awdiv@dividend	;volatile
  2105  0013E0  6A14               	clrf	___awdiv@dividend+1,c
  2106  0013E2  0E00               	movlw	0
  2107  0013E4  6E16               	movwf	___awdiv@divisor+1,c
  2108  0013E6  0E0A               	movlw	10
  2109  0013E8  6E15               	movwf	___awdiv@divisor,c
  2110  0013EA  ECBD  F00A         	call	___awdiv	;wreg free
  2111  0013EE  5013               	movf	?___awdiv,w,c
  2112  0013F0  0F30               	addlw	48
  2113  0013F2  EC78  F00B         	call	_LCDPutChar
  2114                           
  2115                           ;StateClock.c: 59: LCDPutChar(sec%10+'0');
  2116  0013F6  C033  F013         	movff	_sec,___awmod@dividend	;volatile
  2117  0013FA  6A14               	clrf	___awmod@dividend+1,c
  2118  0013FC  0E00               	movlw	0
  2119  0013FE  6E16               	movwf	___awmod@divisor+1,c
  2120  001400  0E0A               	movlw	10
  2121  001402  6E15               	movwf	___awmod@divisor,c
  2122  001404  EC40  F00B         	call	___awmod	;wreg free
  2123  001408  5013               	movf	?___awmod,w,c
  2124  00140A  0F30               	addlw	48
  2125  00140C  EC78  F00B         	call	_LCDPutChar
  2126                           
  2127                           ;StateClock.c: 60: LCDPutStr("        ");
  2128  001410  0EE0               	movlw	low STR_5
  2129  001412  6E1A               	movwf	LCDPutStr@ptr,c
  2130  001414  0E10               	movlw	high STR_5
  2131  001416  6E1B               	movwf	LCDPutStr@ptr+1,c
  2132  001418  EC05  F00D         	call	_LCDPutStr	;wreg free
  2133                           
  2134                           ;StateClock.c: 63: printf("%02d:", hr);
  2135  00141C  0EF0               	movlw	low STR_6
  2136  00141E  6E1F               	movwf	printf@f,c
  2137  001420  0E10               	movlw	high STR_6
  2138  001422  6E20               	movwf	printf@f+1,c
  2139  001424  C035  F021         	movff	_hr,?_printf+2	;volatile
  2140  001428  6A22               	clrf	?_printf+3,c
  2141  00142A  EC7C  F008         	call	_printf	;wreg free
  2142                           
  2143                           ;StateClock.c: 64: printf("%02d:", min);
  2144  00142E  0EF0               	movlw	low STR_6
  2145  001430  6E1F               	movwf	printf@f,c
  2146  001432  0E10               	movlw	high STR_6
  2147  001434  6E20               	movwf	printf@f+1,c
  2148  001436  C034  F021         	movff	_min,?_printf+2	;volatile
  2149  00143A  6A22               	clrf	?_printf+3,c
  2150  00143C  EC7C  F008         	call	_printf	;wreg free
  2151                           
  2152                           ;StateClock.c: 65: printf("%02d \t", sec);
  2153  001440  0EE9               	movlw	low STR_8
  2154  001442  6E1F               	movwf	printf@f,c
  2155  001444  0E10               	movlw	high STR_8
  2156  001446  6E20               	movwf	printf@f+1,c
  2157  001448  C033  F021         	movff	_sec,?_printf+2	;volatile
  2158  00144C  6A22               	clrf	?_printf+3,c
  2159  00144E  EC7C  F008         	call	_printf	;wreg free
  2160  001452  0012               	return		;funcret
  2161  001454                     __end_of_disp_Clock:
  2162                           	opt stack 0
  2163                           intcon	equ	0xFF2
  2164                           postinc0	equ	0xFEE
  2165                           wreg	equ	0xFE8
  2166                           status	equ	0xFD8
  2167                           
  2168 ;; *************** function _printf *****************
  2169 ;; Defined at:
  2170 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2171 ;; Parameters:    Size  Location     Type
  2172 ;;  f               2   30[COMRAM] PTR const unsigned char 
  2173 ;;		 -> STR_16(19), STR_15(19), STR_12(18), STR_10(18), 
  2174 ;;		 -> STR_8(7), STR_7(6), STR_6(6), STR_4(19), 
  2175 ;;		 -> STR_3(19), 
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;  tmpval          4    0        struct .
  2178 ;;  cp              3    0        PTR const unsigned char 
  2179 ;;  width           2   44[COMRAM] int 
  2180 ;;  val             2   41[COMRAM] unsigned int 
  2181 ;;  ap              2   38[COMRAM] PTR void [1]
  2182 ;;		 -> ?_printf(2), 
  2183 ;;  len             2    0        unsigned int 
  2184 ;;  c               1   46[COMRAM] char 
  2185 ;;  flag            1   43[COMRAM] unsigned char 
  2186 ;;  prec            1   40[COMRAM] char 
  2187 ;; Return value:  Size  Location     Type
  2188 ;;                  2   30[COMRAM] int 
  2189 ;; Registers used:
  2190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2191 ;; Tracked objects:
  2192 ;;		On entry : 0/0
  2193 ;;		On exit  : 0/0
  2194 ;;		Unchanged: 0/0
  2195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2196 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2198 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2199 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2200 ;;Total ram usage:       17 bytes
  2201 ;; Hardware stack levels used:    1
  2202 ;; Hardware stack levels required when called:    4
  2203 ;; This function calls:
  2204 ;;		___lwdiv
  2205 ;;		___lwmod
  2206 ;;		___wmul
  2207 ;;		_isdigit
  2208 ;;		_putch
  2209 ;; This function is called by:
  2210 ;;		_Clock
  2211 ;;		_disp_Clock
  2212 ;;		_count_Clock
  2213 ;;		_set_Clock
  2214 ;;		_Intro
  2215 ;; This function uses a non-reentrant model
  2216 ;;
  2217                           
  2218                           	psect	text16
  2219  0010F8                     __ptext16:
  2220                           	opt stack 0
  2221  0010F8                     _printf:
  2222                           	opt stack 25
  2223                           
  2224                           ;doprnt.c: 466: va_list ap;
  2225                           ;doprnt.c: 499: signed char c;
  2226                           ;doprnt.c: 501: int width;
  2227                           ;doprnt.c: 506: signed char prec;
  2228                           ;doprnt.c: 508: unsigned char flag;
  2229                           ;doprnt.c: 523: union {
  2230                           ;doprnt.c: 524: unsigned long vd;
  2231                           ;doprnt.c: 525: double integ;
  2232                           ;doprnt.c: 526: } tmpval;
  2233                           ;doprnt.c: 528: unsigned int val;
  2234                           ;doprnt.c: 529: unsigned len;
  2235                           ;doprnt.c: 530: const char * cp;
  2236                           ;doprnt.c: 533: *ap = __va_start();
  2237                           
  2238                           ;incstack = 0
  2239  0010F8  0E21               	movlw	low (?_printf+2)
  2240  0010FA  6E27               	movwf	printf@ap,c
  2241  0010FC  0E00               	movlw	high (?_printf+2)
  2242  0010FE  6E28               	movwf	printf@ap+1,c
  2243                           
  2244                           ;doprnt.c: 536: while(c = *f++) {
  2245  001100  D121               	goto	u1080
  2246  001102                     
  2247                           ;doprnt.c: 538: if(c != '%')
  2248  001102  0E25               	movlw	37
  2249  001104  182F               	xorwf	printf@c,w,c
  2250  001106  B4D8               	btfsc	status,2,c
  2251  001108  D004               	goto	l345
  2252                           
  2253                           ;doprnt.c: 540: {
  2254                           ;doprnt.c: 541: (putch(c) );
  2255  00110A  502F               	movf	printf@c,w,c
  2256  00110C  ECDA  F00D         	call	_putch
  2257                           
  2258                           ;doprnt.c: 542: continue;
  2259  001110  D119               	goto	u1080
  2260  001112                     l345:
  2261                           
  2262                           ;doprnt.c: 543: }
  2263                           ;doprnt.c: 546: width = 0;
  2264  001112  0E00               	movlw	0
  2265  001114  6E2E               	movwf	printf@width+1,c
  2266  001116  0E00               	movlw	0
  2267  001118  6E2D               	movwf	printf@width,c
  2268                           
  2269                           ;doprnt.c: 548: flag = 0;
  2270  00111A  0E00               	movlw	0
  2271  00111C  6E2C               	movwf	printf@flag,c
  2272                           
  2273                           ;doprnt.c: 551: switch(*f) {
  2274                           
  2275                           ;doprnt.c: 550: for(;;) {
  2276  00111E  D003               	goto	l347
  2277  001120                     
  2278                           ;doprnt.c: 580: flag |= 0x04;
  2279  001120  842C               	bsf	printf@flag,2,c
  2280                           
  2281                           ;doprnt.c: 581: f++;
  2282  001122  4A1F               	infsnz	printf@f,f,c
  2283  001124  2A20               	incf	printf@f+1,f,c
  2284  001126                     l347:
  2285  001126  C01F  FFF6         	movff	printf@f,tblptrl
  2286  00112A  C020  FFF7         	movff	printf@f+1,tblptrh
  2287  00112E                     	if	0	;tblptru may be non-zero
  2288  00112E                     	endif
  2289  00112E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2290  00112E  0E00               	movlw	low (__mediumconst shr (0+16))
  2291  001130  6EF8               	movwf	tblptru,c
  2292  001132                     	endif
  2293  001132  0008               	tblrd		*
  2294  001134  50F5               	movf	tablat,w,c
  2295                           
  2296                           ; Switch size 1, requested type "space"
  2297                           ; Number of cases is 1, Range of values is 48 to 48
  2298                           ; switch strategies available:
  2299                           ; Name         Instructions Cycles
  2300                           ; simple_byte            4     3 (average)
  2301                           ;	Chosen strategy is simple_byte
  2302  001136  0A30               	xorlw	48	; case 48
  2303  001138  B4D8               	btfsc	status,2,c
  2304  00113A  D7F2               	goto	l348
  2305                           
  2306                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2307                           
  2308                           ;doprnt.c: 586: }
  2309                           
  2310                           ;doprnt.c: 585: break;
  2311  00113C  C01F  FFF6         	movff	printf@f,tblptrl
  2312  001140  C020  FFF7         	movff	printf@f+1,tblptrh
  2313  001144                     	if	0	;tblptru may be non-zero
  2314  001144                     	endif
  2315  001144                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2316  001144  0E00               	movlw	low (__mediumconst shr (0+16))
  2317  001146  6EF8               	movwf	tblptru,c
  2318  001148                     	endif
  2319  001148  0008               	tblrd		*
  2320  00114A  50F5               	movf	tablat,w,c
  2321  00114C  EC69  F00D         	call	_isdigit
  2322  001150  A0D8               	btfss	status,0,c
  2323  001152  D036               	goto	l355
  2324                           
  2325                           ;doprnt.c: 598: width = 0;
  2326  001154  0E00               	movlw	0
  2327  001156  6E2E               	movwf	printf@width+1,c
  2328  001158  0E00               	movlw	0
  2329  00115A  6E2D               	movwf	printf@width,c
  2330  00115C                     
  2331                           ;doprnt.c: 600: width *= 10;
  2332  00115C  C02D  F013         	movff	printf@width,___wmul@multiplier
  2333  001160  C02E  F014         	movff	printf@width+1,___wmul@multiplier+1
  2334  001164  0E00               	movlw	0
  2335  001166  6E16               	movwf	___wmul@multiplicand+1,c
  2336  001168  0E0A               	movlw	10
  2337  00116A  6E15               	movwf	___wmul@multiplicand,c
  2338  00116C  EC37  F00D         	call	___wmul	;wreg free
  2339  001170  C013  F02D         	movff	?___wmul,printf@width
  2340  001174  C014  F02E         	movff	?___wmul+1,printf@width+1
  2341                           
  2342                           ;doprnt.c: 601: width += *f++ - '0';
  2343  001178  0ED0               	movlw	208
  2344  00117A  6E23               	movwf	??_printf& (0+255),c
  2345  00117C  0EFF               	movlw	255
  2346  00117E  6E24               	movwf	(??_printf+1)& (0+255),c
  2347  001180  C01F  FFF6         	movff	printf@f,tblptrl
  2348  001184  C020  FFF7         	movff	printf@f+1,tblptrh
  2349  001188                     	if	0	;tblptru may be non-zero
  2350  001188                     	endif
  2351  001188                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2352  001188  0E00               	movlw	low (__mediumconst shr (0+16))
  2353  00118A  6EF8               	movwf	tblptru,c
  2354  00118C                     	endif
  2355  00118C  0008               	tblrd		*
  2356  00118E  50F5               	movf	tablat,w,c
  2357  001190  6E25               	movwf	(??_printf+2)& (0+255),c
  2358  001192  6A26               	clrf	(??_printf+3)& (0+255),c
  2359  001194  5023               	movf	??_printf,w,c
  2360  001196  2625               	addwf	??_printf+2,f,c
  2361  001198  5024               	movf	??_printf+1,w,c
  2362  00119A  2226               	addwfc	??_printf+3,f,c
  2363  00119C  5025               	movf	??_printf+2,w,c
  2364  00119E  262D               	addwf	printf@width,f,c
  2365  0011A0  5026               	movf	??_printf+3,w,c
  2366  0011A2  222E               	addwfc	printf@width+1,f,c
  2367  0011A4  4A1F               	infsnz	printf@f,f,c
  2368  0011A6  2A20               	incf	printf@f+1,f,c
  2369                           
  2370                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2371  0011A8  C01F  FFF6         	movff	printf@f,tblptrl
  2372  0011AC  C020  FFF7         	movff	printf@f+1,tblptrh
  2373  0011B0                     	if	0	;tblptru may be non-zero
  2374  0011B0                     	endif
  2375  0011B0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2376  0011B0  0E00               	movlw	low (__mediumconst shr (0+16))
  2377  0011B2  6EF8               	movwf	tblptru,c
  2378  0011B4                     	endif
  2379  0011B4  0008               	tblrd		*
  2380  0011B6  50F5               	movf	tablat,w,c
  2381  0011B8  EC69  F00D         	call	_isdigit
  2382  0011BC  B0D8               	btfsc	status,0,c
  2383  0011BE  D7CE               	goto	l353
  2384  0011C0                     l355:
  2385  0011C0  C01F  FFF6         	movff	printf@f,tblptrl
  2386  0011C4  C020  FFF7         	movff	printf@f+1,tblptrh
  2387  0011C8  4A1F               	infsnz	printf@f,f,c
  2388  0011CA  2A20               	incf	printf@f+1,f,c
  2389  0011CC                     	if	0	;tblptru may be non-zero
  2390  0011CC                     	endif
  2391  0011CC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2392  0011CC  0E00               	movlw	low (__mediumconst shr (0+16))
  2393  0011CE  6EF8               	movwf	tblptru,c
  2394  0011D0                     	endif
  2395  0011D0  0008               	tblrd		*
  2396  0011D2  CFF5 F02F          	movff	tablat,printf@c
  2397  0011D6  502F               	movf	printf@c,w,c
  2398                           
  2399                           ; Switch size 1, requested type "space"
  2400                           ; Number of cases is 3, Range of values is 0 to 105
  2401                           ; switch strategies available:
  2402                           ; Name         Instructions Cycles
  2403                           ; simple_byte           10     6 (average)
  2404                           ;	Chosen strategy is simple_byte
  2405  0011D8  0A00               	xorlw	0	; case 0
  2406  0011DA  B4D8               	btfsc	status,2,c
  2407  0011DC  0012               	return	
  2408  0011DE  0A64               	xorlw	100	; case 100
  2409  0011E0  B4D8               	btfsc	status,2,c
  2410  0011E2  D003               	goto	l360
  2411  0011E4  0A0D               	xorlw	13	; case 105
  2412  0011E6  A4D8               	btfss	status,2,c
  2413  0011E8  D0AD               	goto	u1080
  2414  0011EA                     l360:
  2415                           
  2416                           ;doprnt.c: 1253: {
  2417                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2418  0011EA  C027  FFD9         	movff	printf@ap,fsr2l
  2419  0011EE  C028  FFDA         	movff	printf@ap+1,fsr2h
  2420  0011F2  CFDE F02A          	movff	postinc2,printf@val
  2421  0011F6  CFDD F02B          	movff	postdec2,printf@val+1
  2422  0011FA  0E02               	movlw	2
  2423  0011FC  2627               	addwf	printf@ap,f,c
  2424  0011FE  0E00               	movlw	0
  2425  001200  2228               	addwfc	printf@ap+1,f,c
  2426                           
  2427                           ;doprnt.c: 1261: if((int)val < 0) {
  2428  001202  AE2B               	btfss	printf@val+1,7,c
  2429  001204  D006               	goto	l362
  2430                           
  2431                           ;doprnt.c: 1262: flag |= 0x03;
  2432  001206  0E03               	movlw	3
  2433  001208  122C               	iorwf	printf@flag,f,c
  2434                           
  2435                           ;doprnt.c: 1263: val = -val;
  2436  00120A  6C2A               	negf	printf@val,c
  2437  00120C  1E2B               	comf	printf@val+1,f,c
  2438  00120E  B0D8               	btfsc	status,0,c
  2439  001210  2A2B               	incf	printf@val+1,f,c
  2440  001212                     l362:
  2441                           
  2442                           ;doprnt.c: 1264: }
  2443                           ;doprnt.c: 1266: }
  2444                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2445  001212  0E01               	movlw	1
  2446  001214  6E2F               	movwf	printf@c,c
  2447  001216                     l1858:
  2448  001216  0E05               	movlw	5
  2449  001218  182F               	xorwf	printf@c,w,c
  2450  00121A  B4D8               	btfsc	status,2,c
  2451  00121C  D015               	goto	u970
  2452                           
  2453                           ;doprnt.c: 1306: if(val < dpowers[c])
  2454  00121E  502F               	movf	printf@c,w,c
  2455  001220  0D02               	mullw	2
  2456  001222  0E01               	movlw	low _dpowers
  2457  001224  24F3               	addwf	prodl,w,c
  2458  001226  6EF6               	movwf	tblptrl,c
  2459  001228  0E10               	movlw	high _dpowers
  2460  00122A  20F4               	addwfc	prodh,w,c
  2461  00122C  6EF7               	movwf	tblptrh,c
  2462  00122E                     	if	1	;There are 3 active tblptr bytes
  2463  00122E  6AF8               	clrf	tblptru,c
  2464  001230  0E00               	movlw	low (__mediumconst shr (0+16))
  2465  001232  22F8               	addwfc	tblptru,f,c
  2466  001234                     	endif
  2467  001234  0009               	tblrd		*+
  2468  001236  50F5               	movf	tablat,w,c
  2469  001238  5C2A               	subwf	printf@val,w,c
  2470  00123A  0009               	tblrd		*+
  2471  00123C  50F5               	movf	tablat,w,c
  2472  00123E  582B               	subwfb	printf@val+1,w,c
  2473  001240  A0D8               	btfss	status,0,c
  2474  001242  D002               	goto	u970
  2475                           
  2476                           ;doprnt.c: 1307: break;
  2477  001244  2A2F               	incf	printf@c,f,c
  2478  001246  D7E7               	goto	l1858
  2479  001248                     u970:
  2480                           
  2481                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2482  001248  502D               	movf	printf@width,w,c
  2483  00124A  102E               	iorwf	printf@width+1,w,c
  2484  00124C  B4D8               	btfsc	status,2,c
  2485  00124E  D009               	goto	l366
  2486  001250  C02C  F023         	movff	printf@flag,??_printf
  2487  001254  0E03               	movlw	3
  2488  001256  1623               	andwf	??_printf,f,c
  2489  001258  B4D8               	btfsc	status,2,c
  2490  00125A  D003               	goto	l366
  2491                           
  2492                           ;doprnt.c: 1346: width--;
  2493  00125C  062D               	decf	printf@width,f,c
  2494  00125E  A0D8               	btfss	status,0,c
  2495  001260  062E               	decf	printf@width+1,f,c
  2496  001262                     l366:
  2497                           
  2498                           ;doprnt.c: 1381: if(width > c)
  2499  001262  0E80               	movlw	128
  2500  001264  BE2F               	btfsc	printf@c,7,c
  2501  001266  0E7F               	movlw	127
  2502  001268  6E23               	movwf	??_printf& (0+255),c
  2503  00126A  502D               	movf	printf@width,w,c
  2504  00126C  5C2F               	subwf	printf@c,w,c
  2505  00126E  502E               	movf	printf@width+1,w,c
  2506  001270  0A80               	xorlw	128
  2507  001272  5823               	subwfb	??_printf& (0+255),w,c
  2508  001274  B0D8               	btfsc	status,0,c
  2509  001276  D007               	goto	l367
  2510                           
  2511                           ;doprnt.c: 1382: width -= c;
  2512  001278  502F               	movf	printf@c,w,c
  2513  00127A  5E2D               	subwf	printf@width,f,c
  2514  00127C  0E00               	movlw	0
  2515  00127E  BE2F               	btfsc	printf@c,7,c
  2516  001280  0EFF               	movlw	255
  2517  001282  5A2E               	subwfb	printf@width+1,f,c
  2518  001284  D004               	goto	l368
  2519  001286                     l367:
  2520                           
  2521                           ;doprnt.c: 1383: else
  2522                           ;doprnt.c: 1384: width = 0;
  2523  001286  0E00               	movlw	0
  2524  001288  6E2E               	movwf	printf@width+1,c
  2525  00128A  0E00               	movlw	0
  2526  00128C  6E2D               	movwf	printf@width,c
  2527  00128E                     l368:
  2528                           
  2529                           ;doprnt.c: 1387: if(flag & 0x04) {
  2530  00128E  A42C               	btfss	printf@flag,2,c
  2531  001290  D014               	goto	l369
  2532                           
  2533                           ;doprnt.c: 1392: if(flag & 0x03)
  2534  001292  C02C  F023         	movff	printf@flag,??_printf
  2535  001296  0E03               	movlw	3
  2536  001298  1623               	andwf	??_printf,f,c
  2537  00129A  B4D8               	btfsc	status,2,c
  2538  00129C  D003               	goto	l370
  2539                           
  2540                           ;doprnt.c: 1393: (putch('-') );
  2541  00129E  0E2D               	movlw	45
  2542  0012A0  ECDA  F00D         	call	_putch
  2543  0012A4                     l370:
  2544                           
  2545                           ;doprnt.c: 1415: if(width)
  2546  0012A4  502D               	movf	printf@width,w,c
  2547  0012A6  102E               	iorwf	printf@width+1,w,c
  2548  0012A8  B4D8               	btfsc	status,2,c
  2549  0012AA  D01E               	goto	l378
  2550                           
  2551                           ;doprnt.c: 1417: (putch('0') );
  2552                           
  2553                           ;doprnt.c: 1416: do
  2554  0012AC  0E30               	movlw	48
  2555  0012AE  ECDA  F00D         	call	_putch
  2556                           
  2557                           ;doprnt.c: 1418: while(--width);
  2558  0012B2  062D               	decf	printf@width,f,c
  2559  0012B4  A0D8               	btfss	status,0,c
  2560  0012B6  062E               	decf	printf@width+1,f,c
  2561  0012B8  D7F5               	goto	l370
  2562  0012BA                     l369:
  2563                           
  2564                           ;doprnt.c: 1422: {
  2565                           ;doprnt.c: 1424: if(width
  2566                           ;doprnt.c: 1428: )
  2567  0012BA  502D               	movf	printf@width,w,c
  2568  0012BC  102E               	iorwf	printf@width+1,w,c
  2569  0012BE  B4D8               	btfsc	status,2,c
  2570  0012C0  D00A               	goto	u1060
  2571  0012C2                     u1050:
  2572                           
  2573                           ;doprnt.c: 1430: (putch(' ') );
  2574                           
  2575                           ;doprnt.c: 1429: do
  2576  0012C2  0E20               	movlw	32
  2577  0012C4  ECDA  F00D         	call	_putch
  2578                           
  2579                           ;doprnt.c: 1431: while(--width);
  2580  0012C8  062D               	decf	printf@width,f,c
  2581  0012CA  A0D8               	btfss	status,0,c
  2582  0012CC  062E               	decf	printf@width+1,f,c
  2583  0012CE  502D               	movf	printf@width,w,c
  2584  0012D0  102E               	iorwf	printf@width+1,w,c
  2585  0012D2  A4D8               	btfss	status,2,c
  2586  0012D4  D7F6               	goto	u1050
  2587  0012D6                     u1060:
  2588                           
  2589                           ;doprnt.c: 1438: if(flag & 0x03)
  2590  0012D6  C02C  F023         	movff	printf@flag,??_printf
  2591  0012DA  0E03               	movlw	3
  2592  0012DC  1623               	andwf	??_printf,f,c
  2593  0012DE  B4D8               	btfsc	status,2,c
  2594  0012E0  D003               	goto	l378
  2595                           
  2596                           ;doprnt.c: 1439: (putch('-') );
  2597  0012E2  0E2D               	movlw	45
  2598  0012E4  ECDA  F00D         	call	_putch
  2599  0012E8                     l378:
  2600                           
  2601                           ;doprnt.c: 1469: }
  2602                           ;doprnt.c: 1472: prec = c;
  2603  0012E8  C02F  F029         	movff	printf@c,printf@prec
  2604                           
  2605                           ;doprnt.c: 1474: while(prec--) {
  2606  0012EC  D027               	goto	l379
  2607  0012EE                     
  2608                           ;doprnt.c: 1478: {
  2609                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2610  0012EE  5029               	movf	printf@prec,w,c
  2611  0012F0  0D02               	mullw	2
  2612  0012F2  0E01               	movlw	low _dpowers
  2613  0012F4  24F3               	addwf	prodl,w,c
  2614  0012F6  6EF6               	movwf	tblptrl,c
  2615  0012F8  0E10               	movlw	high _dpowers
  2616  0012FA  20F4               	addwfc	prodh,w,c
  2617  0012FC  6EF7               	movwf	tblptrh,c
  2618  0012FE                     	if	1	;There are 3 active tblptr bytes
  2619  0012FE  6AF8               	clrf	tblptru,c
  2620  001300  0E00               	movlw	low (__mediumconst shr (0+16))
  2621  001302  22F8               	addwfc	tblptru,f,c
  2622  001304                     	endif
  2623  001304  0009               	tblrd		*+
  2624  001306  CFF5 F015          	movff	tablat,___lwdiv@divisor
  2625  00130A  000A               	tblrd		*-
  2626  00130C  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
  2627  001310  C02A  F013         	movff	printf@val,___lwdiv@dividend
  2628  001314  C02B  F014         	movff	printf@val+1,___lwdiv@dividend+1
  2629  001318  EC6F  F00C         	call	___lwdiv	;wreg free
  2630  00131C  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
  2631  001320  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
  2632  001324  0E00               	movlw	0
  2633  001326  6E1D               	movwf	___lwmod@divisor+1,c
  2634  001328  0E0A               	movlw	10
  2635  00132A  6E1C               	movwf	___lwmod@divisor,c
  2636  00132C  ECE4  F00C         	call	___lwmod	;wreg free
  2637  001330  501A               	movf	?___lwmod,w,c
  2638  001332  0F30               	addlw	48
  2639  001334  6E2F               	movwf	printf@c,c
  2640                           
  2641                           ;doprnt.c: 1523: }
  2642                           ;doprnt.c: 1524: (putch(c) );
  2643  001336  502F               	movf	printf@c,w,c
  2644  001338  ECDA  F00D         	call	_putch
  2645  00133C                     l379:
  2646  00133C  0629               	decf	printf@prec,f,c
  2647  00133E  2829               	incf	printf@prec,w,c
  2648  001340  A4D8               	btfss	status,2,c
  2649  001342  D7D5               	goto	l380
  2650  001344                     u1080:
  2651  001344  C01F  FFF6         	movff	printf@f,tblptrl
  2652  001348  C020  FFF7         	movff	printf@f+1,tblptrh
  2653  00134C  4A1F               	infsnz	printf@f,f,c
  2654  00134E  2A20               	incf	printf@f+1,f,c
  2655  001350                     	if	0	;tblptru may be non-zero
  2656  001350                     	endif
  2657  001350                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2658  001350  0E00               	movlw	low (__mediumconst shr (0+16))
  2659  001352  6EF8               	movwf	tblptru,c
  2660  001354                     	endif
  2661  001354  0008               	tblrd		*
  2662  001356  CFF5 F02F          	movff	tablat,printf@c
  2663  00135A  502F               	movf	printf@c,w,c
  2664  00135C  B4D8               	btfsc	status,2,c
  2665  00135E  0012               	return	
  2666  001360  D6D0               	goto	l344
  2667  001362                     __end_of_printf:
  2668                           	opt stack 0
  2669                           tblptru	equ	0xFF8
  2670                           tblptrh	equ	0xFF7
  2671                           tblptrl	equ	0xFF6
  2672                           tablat	equ	0xFF5
  2673                           prodh	equ	0xFF4
  2674                           prodl	equ	0xFF3
  2675                           intcon	equ	0xFF2
  2676                           postinc0	equ	0xFEE
  2677                           wreg	equ	0xFE8
  2678                           postinc2	equ	0xFDE
  2679                           postdec2	equ	0xFDD
  2680                           fsr2h	equ	0xFDA
  2681                           fsr2l	equ	0xFD9
  2682                           status	equ	0xFD8
  2683                           
  2684 ;; *************** function _putch *****************
  2685 ;; Defined at:
  2686 ;;		line 115 in file "eusart1.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;  txData          1    wreg     unsigned char 
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;  txData          1   19[COMRAM] unsigned char 
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg, status,2, cstack
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2701 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2703 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2704 ;;Total ram usage:        1 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    3
  2707 ;; This function calls:
  2708 ;;		_EUSART1_Write
  2709 ;; This function is called by:
  2710 ;;		_printf
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text17
  2715  001BB4                     __ptext17:
  2716                           	opt stack 0
  2717  001BB4                     _putch:
  2718                           	opt stack 25
  2719                           
  2720                           ;incstack = 0
  2721                           ;putch@txData stored from wreg
  2722  001BB4  6E14               	movwf	putch@txData,c
  2723                           
  2724                           ;eusart1.c: 117: EUSART1_Write(txData);
  2725  001BB6  5014               	movf	putch@txData,w,c
  2726  001BB8  ECCF  F00D         	call	_EUSART1_Write
  2727  001BBC  0012               	return		;funcret
  2728  001BBE                     __end_of_putch:
  2729                           	opt stack 0
  2730                           tblptru	equ	0xFF8
  2731                           tblptrh	equ	0xFF7
  2732                           tblptrl	equ	0xFF6
  2733                           tablat	equ	0xFF5
  2734                           prodh	equ	0xFF4
  2735                           prodl	equ	0xFF3
  2736                           intcon	equ	0xFF2
  2737                           postinc0	equ	0xFEE
  2738                           wreg	equ	0xFE8
  2739                           postinc2	equ	0xFDE
  2740                           postdec2	equ	0xFDD
  2741                           fsr2h	equ	0xFDA
  2742                           fsr2l	equ	0xFD9
  2743                           status	equ	0xFD8
  2744                           
  2745 ;; *************** function _EUSART1_Write *****************
  2746 ;; Defined at:
  2747 ;;		line 101 in file "eusart1.c"
  2748 ;; Parameters:    Size  Location     Type
  2749 ;;  txData          1    wreg     unsigned char 
  2750 ;; Auto vars:     Size  Location     Type
  2751 ;;  txData          1   18[COMRAM] unsigned char 
  2752 ;; Return value:  Size  Location     Type
  2753 ;;                  1    wreg      void 
  2754 ;; Registers used:
  2755 ;;		wreg
  2756 ;; Tracked objects:
  2757 ;;		On entry : 0/0
  2758 ;;		On exit  : 0/0
  2759 ;;		Unchanged: 0/0
  2760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2762 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2764 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2765 ;;Total ram usage:        1 bytes
  2766 ;; Hardware stack levels used:    1
  2767 ;; Hardware stack levels required when called:    2
  2768 ;; This function calls:
  2769 ;;		Nothing
  2770 ;; This function is called by:
  2771 ;;		_putch
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           	psect	text18
  2776  001B9E                     __ptext18:
  2777                           	opt stack 0
  2778  001B9E                     _EUSART1_Write:
  2779                           	opt stack 25
  2780                           
  2781                           ;incstack = 0
  2782                           ;EUSART1_Write@txData stored from wreg
  2783  001B9E  6E13               	movwf	EUSART1_Write@txData,c
  2784  001BA0                     
  2785                           ;eusart1.c: 104: {
  2786                           
  2787                           ;eusart1.c: 103: while(0 == PIR1bits.TX1IF)
  2788  001BA0  A89E               	btfss	3998,4,c	;volatile
  2789  001BA2  D7FE               	goto	l1714
  2790                           
  2791                           ;eusart1.c: 105: }
  2792                           ;eusart1.c: 107: TXREG = txData;
  2793  001BA4  C013  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  2794  001BA8  0012               	return		;funcret
  2795  001BAA                     __end_of_EUSART1_Write:
  2796                           	opt stack 0
  2797                           tblptru	equ	0xFF8
  2798                           tblptrh	equ	0xFF7
  2799                           tblptrl	equ	0xFF6
  2800                           tablat	equ	0xFF5
  2801                           prodh	equ	0xFF4
  2802                           prodl	equ	0xFF3
  2803                           intcon	equ	0xFF2
  2804                           postinc0	equ	0xFEE
  2805                           wreg	equ	0xFE8
  2806                           postinc2	equ	0xFDE
  2807                           postdec2	equ	0xFDD
  2808                           fsr2h	equ	0xFDA
  2809                           fsr2l	equ	0xFD9
  2810                           status	equ	0xFD8
  2811                           
  2812 ;; *************** function _isdigit *****************
  2813 ;; Defined at:
  2814 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  2815 ;; Parameters:    Size  Location     Type
  2816 ;;  c               1    wreg     unsigned char 
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;  c               1   20[COMRAM] unsigned char 
  2819 ;; Return value:  Size  Location     Type
  2820 ;;		None               void
  2821 ;; Registers used:
  2822 ;;		wreg, status,2, status,0
  2823 ;; Tracked objects:
  2824 ;;		On entry : 0/0
  2825 ;;		On exit  : 0/0
  2826 ;;		Unchanged: 0/0
  2827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2829 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2830 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2831 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2832 ;;Total ram usage:        3 bytes
  2833 ;; Hardware stack levels used:    1
  2834 ;; Hardware stack levels required when called:    2
  2835 ;; This function calls:
  2836 ;;		Nothing
  2837 ;; This function is called by:
  2838 ;;		_printf
  2839 ;; This function uses a non-reentrant model
  2840 ;;
  2841                           
  2842                           	psect	text19
  2843  001AD2                     __ptext19:
  2844                           	opt stack 0
  2845  001AD2                     _isdigit:
  2846                           	opt stack 26
  2847                           
  2848                           ;incstack = 0
  2849                           ;isdigit@c stored from wreg
  2850  001AD2  6E15               	movwf	isdigit@c,c
  2851  001AD4  0E00               	movlw	0
  2852  001AD6  6E14               	movwf	_isdigit$1518,c
  2853  001AD8  0E3A               	movlw	58
  2854  001ADA  6015               	cpfslt	isdigit@c,c
  2855  001ADC  D005               	goto	l713
  2856  001ADE  0E2F               	movlw	47
  2857  001AE0  6415               	cpfsgt	isdigit@c,c
  2858  001AE2  D002               	goto	l713
  2859  001AE4  0E01               	movlw	1
  2860  001AE6  6E14               	movwf	_isdigit$1518,c
  2861  001AE8                     l713:
  2862  001AE8  C014  F013         	movff	_isdigit$1518,??_isdigit
  2863  001AEC  3013               	rrcf	??_isdigit,w,c
  2864  001AEE  0012               	return	
  2865  001AF0                     __end_of_isdigit:
  2866                           	opt stack 0
  2867                           tblptru	equ	0xFF8
  2868                           tblptrh	equ	0xFF7
  2869                           tblptrl	equ	0xFF6
  2870                           tablat	equ	0xFF5
  2871                           prodh	equ	0xFF4
  2872                           prodl	equ	0xFF3
  2873                           intcon	equ	0xFF2
  2874                           postinc0	equ	0xFEE
  2875                           wreg	equ	0xFE8
  2876                           postinc2	equ	0xFDE
  2877                           postdec2	equ	0xFDD
  2878                           fsr2h	equ	0xFDA
  2879                           fsr2l	equ	0xFD9
  2880                           status	equ	0xFD8
  2881                           
  2882 ;; *************** function ___wmul *****************
  2883 ;; Defined at:
  2884 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  2885 ;; Parameters:    Size  Location     Type
  2886 ;;  multiplier      2   18[COMRAM] unsigned int 
  2887 ;;  multiplicand    2   20[COMRAM] unsigned int 
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;  product         2   22[COMRAM] unsigned int 
  2890 ;; Return value:  Size  Location     Type
  2891 ;;                  2   18[COMRAM] unsigned int 
  2892 ;; Registers used:
  2893 ;;		wreg, status,2, status,0, prodl, prodh
  2894 ;; Tracked objects:
  2895 ;;		On entry : 0/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2899 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2900 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2902 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2903 ;;Total ram usage:        6 bytes
  2904 ;; Hardware stack levels used:    1
  2905 ;; Hardware stack levels required when called:    2
  2906 ;; This function calls:
  2907 ;;		Nothing
  2908 ;; This function is called by:
  2909 ;;		_printf
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           	psect	text20
  2914  001A6E                     __ptext20:
  2915                           	opt stack 0
  2916  001A6E                     ___wmul:
  2917                           	opt stack 26
  2918                           
  2919                           ;incstack = 0
  2920  001A6E  5013               	movf	___wmul@multiplier,w,c
  2921  001A70  0215               	mulwf	___wmul@multiplicand,c
  2922  001A72  CFF3 F017          	movff	prodl,___wmul@product
  2923  001A76  CFF4 F018          	movff	prodh,___wmul@product+1
  2924  001A7A  5013               	movf	___wmul@multiplier,w,c
  2925  001A7C  0216               	mulwf	___wmul@multiplicand+1,c
  2926  001A7E  50F3               	movf	prodl,w,c
  2927  001A80  2618               	addwf	___wmul@product+1,f,c
  2928  001A82  5014               	movf	___wmul@multiplier+1,w,c
  2929  001A84  0215               	mulwf	___wmul@multiplicand,c
  2930  001A86  50F3               	movf	prodl,w,c
  2931  001A88  2618               	addwf	___wmul@product+1,f,c
  2932  001A8A  C017  F013         	movff	___wmul@product,?___wmul
  2933  001A8E  C018  F014         	movff	___wmul@product+1,?___wmul+1
  2934  001A92  0012               	return	
  2935  001A94                     __end_of___wmul:
  2936                           	opt stack 0
  2937                           tblptru	equ	0xFF8
  2938                           tblptrh	equ	0xFF7
  2939                           tblptrl	equ	0xFF6
  2940                           tablat	equ	0xFF5
  2941                           prodh	equ	0xFF4
  2942                           prodl	equ	0xFF3
  2943                           intcon	equ	0xFF2
  2944                           postinc0	equ	0xFEE
  2945                           wreg	equ	0xFE8
  2946                           postinc2	equ	0xFDE
  2947                           postdec2	equ	0xFDD
  2948                           fsr2h	equ	0xFDA
  2949                           fsr2l	equ	0xFD9
  2950                           status	equ	0xFD8
  2951                           
  2952 ;; *************** function ___lwmod *****************
  2953 ;; Defined at:
  2954 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;  dividend        2   25[COMRAM] unsigned int 
  2957 ;;  divisor         2   27[COMRAM] unsigned int 
  2958 ;; Auto vars:     Size  Location     Type
  2959 ;;  counter         1   29[COMRAM] unsigned char 
  2960 ;; Return value:  Size  Location     Type
  2961 ;;                  2   25[COMRAM] unsigned int 
  2962 ;; Registers used:
  2963 ;;		wreg, status,2, status,0
  2964 ;; Tracked objects:
  2965 ;;		On entry : 0/0
  2966 ;;		On exit  : 0/0
  2967 ;;		Unchanged: 0/0
  2968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2969 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2970 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2973 ;;Total ram usage:        5 bytes
  2974 ;; Hardware stack levels used:    1
  2975 ;; Hardware stack levels required when called:    2
  2976 ;; This function calls:
  2977 ;;		Nothing
  2978 ;; This function is called by:
  2979 ;;		_printf
  2980 ;; This function uses a non-reentrant model
  2981 ;;
  2982                           
  2983                           	psect	text21
  2984  0019C8                     __ptext21:
  2985                           	opt stack 0
  2986  0019C8                     ___lwmod:
  2987                           	opt stack 26
  2988                           
  2989                           ;incstack = 0
  2990  0019C8  501C               	movf	___lwmod@divisor,w,c
  2991  0019CA  101D               	iorwf	___lwmod@divisor+1,w,c
  2992  0019CC  B4D8               	btfsc	status,2,c
  2993  0019CE  D018               	goto	l807
  2994  0019D0  0E01               	movlw	1
  2995  0019D2  6E1E               	movwf	___lwmod@counter,c
  2996  0019D4  D004               	goto	l802
  2997  0019D6  90D8               	bcf	status,0,c
  2998  0019D8  361C               	rlcf	___lwmod@divisor,f,c
  2999  0019DA  361D               	rlcf	___lwmod@divisor+1,f,c
  3000  0019DC  2A1E               	incf	___lwmod@counter,f,c
  3001  0019DE                     l802:
  3002  0019DE  AE1D               	btfss	___lwmod@divisor+1,7,c
  3003  0019E0  D7FA               	goto	l803
  3004  0019E2                     u880:
  3005  0019E2  501C               	movf	___lwmod@divisor,w,c
  3006  0019E4  5C1A               	subwf	___lwmod@dividend,w,c
  3007  0019E6  501D               	movf	___lwmod@divisor+1,w,c
  3008  0019E8  581B               	subwfb	___lwmod@dividend+1,w,c
  3009  0019EA  A0D8               	btfss	status,0,c
  3010  0019EC  D004               	goto	l806
  3011  0019EE  501C               	movf	___lwmod@divisor,w,c
  3012  0019F0  5E1A               	subwf	___lwmod@dividend,f,c
  3013  0019F2  501D               	movf	___lwmod@divisor+1,w,c
  3014  0019F4  5A1B               	subwfb	___lwmod@dividend+1,f,c
  3015  0019F6                     l806:
  3016  0019F6  90D8               	bcf	status,0,c
  3017  0019F8  321D               	rrcf	___lwmod@divisor+1,f,c
  3018  0019FA  321C               	rrcf	___lwmod@divisor,f,c
  3019  0019FC  2E1E               	decfsz	___lwmod@counter,f,c
  3020  0019FE  D7F1               	goto	u880
  3021  001A00                     l807:
  3022  001A00  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
  3023  001A04  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
  3024  001A08  0012               	return		;funcret
  3025  001A0A                     __end_of___lwmod:
  3026                           	opt stack 0
  3027                           tblptru	equ	0xFF8
  3028                           tblptrh	equ	0xFF7
  3029                           tblptrl	equ	0xFF6
  3030                           tablat	equ	0xFF5
  3031                           prodh	equ	0xFF4
  3032                           prodl	equ	0xFF3
  3033                           intcon	equ	0xFF2
  3034                           postinc0	equ	0xFEE
  3035                           wreg	equ	0xFE8
  3036                           postinc2	equ	0xFDE
  3037                           postdec2	equ	0xFDD
  3038                           fsr2h	equ	0xFDA
  3039                           fsr2l	equ	0xFD9
  3040                           status	equ	0xFD8
  3041                           
  3042 ;; *************** function ___lwdiv *****************
  3043 ;; Defined at:
  3044 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;  dividend        2   18[COMRAM] unsigned int 
  3047 ;;  divisor         2   20[COMRAM] unsigned int 
  3048 ;; Auto vars:     Size  Location     Type
  3049 ;;  quotient        2   22[COMRAM] unsigned int 
  3050 ;;  counter         1   24[COMRAM] unsigned char 
  3051 ;; Return value:  Size  Location     Type
  3052 ;;                  2   18[COMRAM] unsigned int 
  3053 ;; Registers used:
  3054 ;;		wreg, status,2, status,0
  3055 ;; Tracked objects:
  3056 ;;		On entry : 0/0
  3057 ;;		On exit  : 0/0
  3058 ;;		Unchanged: 0/0
  3059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3060 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3061 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3063 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3064 ;;Total ram usage:        7 bytes
  3065 ;; Hardware stack levels used:    1
  3066 ;; Hardware stack levels required when called:    2
  3067 ;; This function calls:
  3068 ;;		Nothing
  3069 ;; This function is called by:
  3070 ;;		_printf
  3071 ;; This function uses a non-reentrant model
  3072 ;;
  3073                           
  3074                           	psect	text22
  3075  0018DE                     __ptext22:
  3076                           	opt stack 0
  3077  0018DE                     ___lwdiv:
  3078                           	opt stack 26
  3079                           
  3080                           ;incstack = 0
  3081  0018DE  0E00               	movlw	0
  3082  0018E0  6E18               	movwf	___lwdiv@quotient+1,c
  3083  0018E2  0E00               	movlw	0
  3084  0018E4  6E17               	movwf	___lwdiv@quotient,c
  3085  0018E6  5015               	movf	___lwdiv@divisor,w,c
  3086  0018E8  1016               	iorwf	___lwdiv@divisor+1,w,c
  3087  0018EA  B4D8               	btfsc	status,2,c
  3088  0018EC  D01C               	goto	l797
  3089  0018EE  0E01               	movlw	1
  3090  0018F0  6E19               	movwf	___lwdiv@counter,c
  3091  0018F2  D004               	goto	l792
  3092  0018F4  90D8               	bcf	status,0,c
  3093  0018F6  3615               	rlcf	___lwdiv@divisor,f,c
  3094  0018F8  3616               	rlcf	___lwdiv@divisor+1,f,c
  3095  0018FA  2A19               	incf	___lwdiv@counter,f,c
  3096  0018FC                     l792:
  3097  0018FC  AE16               	btfss	___lwdiv@divisor+1,7,c
  3098  0018FE  D7FA               	goto	l793
  3099  001900                     u850:
  3100  001900  90D8               	bcf	status,0,c
  3101  001902  3617               	rlcf	___lwdiv@quotient,f,c
  3102  001904  3618               	rlcf	___lwdiv@quotient+1,f,c
  3103  001906  5015               	movf	___lwdiv@divisor,w,c
  3104  001908  5C13               	subwf	___lwdiv@dividend,w,c
  3105  00190A  5016               	movf	___lwdiv@divisor+1,w,c
  3106  00190C  5814               	subwfb	___lwdiv@dividend+1,w,c
  3107  00190E  A0D8               	btfss	status,0,c
  3108  001910  D005               	goto	l796
  3109  001912  5015               	movf	___lwdiv@divisor,w,c
  3110  001914  5E13               	subwf	___lwdiv@dividend,f,c
  3111  001916  5016               	movf	___lwdiv@divisor+1,w,c
  3112  001918  5A14               	subwfb	___lwdiv@dividend+1,f,c
  3113  00191A  8017               	bsf	___lwdiv@quotient,0,c
  3114  00191C                     l796:
  3115  00191C  90D8               	bcf	status,0,c
  3116  00191E  3216               	rrcf	___lwdiv@divisor+1,f,c
  3117  001920  3215               	rrcf	___lwdiv@divisor,f,c
  3118  001922  2E19               	decfsz	___lwdiv@counter,f,c
  3119  001924  D7ED               	goto	u850
  3120  001926                     l797:
  3121  001926  C017  F013         	movff	___lwdiv@quotient,?___lwdiv
  3122  00192A  C018  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3123  00192E  0012               	return		;funcret
  3124  001930                     __end_of___lwdiv:
  3125                           	opt stack 0
  3126                           tblptru	equ	0xFF8
  3127                           tblptrh	equ	0xFF7
  3128                           tblptrl	equ	0xFF6
  3129                           tablat	equ	0xFF5
  3130                           prodh	equ	0xFF4
  3131                           prodl	equ	0xFF3
  3132                           intcon	equ	0xFF2
  3133                           postinc0	equ	0xFEE
  3134                           wreg	equ	0xFE8
  3135                           postinc2	equ	0xFDE
  3136                           postdec2	equ	0xFDD
  3137                           fsr2h	equ	0xFDA
  3138                           fsr2l	equ	0xFD9
  3139                           status	equ	0xFD8
  3140                           
  3141 ;; *************** function ___awmod *****************
  3142 ;; Defined at:
  3143 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;  dividend        2   18[COMRAM] int 
  3146 ;;  divisor         2   20[COMRAM] int 
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;  sign            1   23[COMRAM] unsigned char 
  3149 ;;  counter         1   22[COMRAM] unsigned char 
  3150 ;; Return value:  Size  Location     Type
  3151 ;;                  2   18[COMRAM] int 
  3152 ;; Registers used:
  3153 ;;		wreg, status,2, status,0
  3154 ;; Tracked objects:
  3155 ;;		On entry : 0/0
  3156 ;;		On exit  : 0/0
  3157 ;;		Unchanged: 0/0
  3158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3159 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;Total ram usage:        6 bytes
  3164 ;; Hardware stack levels used:    1
  3165 ;; Hardware stack levels required when called:    2
  3166 ;; This function calls:
  3167 ;;		Nothing
  3168 ;; This function is called by:
  3169 ;;		_disp_Clock
  3170 ;; This function uses a non-reentrant model
  3171 ;;
  3172                           
  3173                           	psect	text23
  3174  001680                     __ptext23:
  3175                           	opt stack 0
  3176  001680                     ___awmod:
  3177                           	opt stack 24
  3178                           
  3179                           ;incstack = 0
  3180  001680  0E00               	movlw	0
  3181  001682  6E18               	movwf	___awmod@sign,c
  3182  001684  AE14               	btfss	___awmod@dividend+1,7,c
  3183  001686  D006               	goto	l564
  3184  001688  6C13               	negf	___awmod@dividend,c
  3185  00168A  1E14               	comf	___awmod@dividend+1,f,c
  3186  00168C  B0D8               	btfsc	status,0,c
  3187  00168E  2A14               	incf	___awmod@dividend+1,f,c
  3188  001690  0E01               	movlw	1
  3189  001692  6E18               	movwf	___awmod@sign,c
  3190  001694                     l564:
  3191  001694  AE16               	btfss	___awmod@divisor+1,7,c
  3192  001696  D004               	goto	l565
  3193  001698  6C15               	negf	___awmod@divisor,c
  3194  00169A  1E16               	comf	___awmod@divisor+1,f,c
  3195  00169C  B0D8               	btfsc	status,0,c
  3196  00169E  2A16               	incf	___awmod@divisor+1,f,c
  3197  0016A0                     l565:
  3198  0016A0  5015               	movf	___awmod@divisor,w,c
  3199  0016A2  1016               	iorwf	___awmod@divisor+1,w,c
  3200  0016A4  B4D8               	btfsc	status,2,c
  3201  0016A6  D018               	goto	l572
  3202  0016A8  0E01               	movlw	1
  3203  0016AA  6E17               	movwf	___awmod@counter,c
  3204  0016AC  D004               	goto	l567
  3205  0016AE  90D8               	bcf	status,0,c
  3206  0016B0  3615               	rlcf	___awmod@divisor,f,c
  3207  0016B2  3616               	rlcf	___awmod@divisor+1,f,c
  3208  0016B4  2A17               	incf	___awmod@counter,f,c
  3209  0016B6                     l567:
  3210  0016B6  AE16               	btfss	___awmod@divisor+1,7,c
  3211  0016B8  D7FA               	goto	l568
  3212  0016BA                     u1190:
  3213  0016BA  5015               	movf	___awmod@divisor,w,c
  3214  0016BC  5C13               	subwf	___awmod@dividend,w,c
  3215  0016BE  5016               	movf	___awmod@divisor+1,w,c
  3216  0016C0  5814               	subwfb	___awmod@dividend+1,w,c
  3217  0016C2  A0D8               	btfss	status,0,c
  3218  0016C4  D004               	goto	l571
  3219  0016C6  5015               	movf	___awmod@divisor,w,c
  3220  0016C8  5E13               	subwf	___awmod@dividend,f,c
  3221  0016CA  5016               	movf	___awmod@divisor+1,w,c
  3222  0016CC  5A14               	subwfb	___awmod@dividend+1,f,c
  3223  0016CE                     l571:
  3224  0016CE  90D8               	bcf	status,0,c
  3225  0016D0  3216               	rrcf	___awmod@divisor+1,f,c
  3226  0016D2  3215               	rrcf	___awmod@divisor,f,c
  3227  0016D4  2E17               	decfsz	___awmod@counter,f,c
  3228  0016D6  D7F1               	goto	u1190
  3229  0016D8                     l572:
  3230  0016D8  5018               	movf	___awmod@sign,w,c
  3231  0016DA  B4D8               	btfsc	status,2,c
  3232  0016DC  D004               	goto	l573
  3233  0016DE  6C13               	negf	___awmod@dividend,c
  3234  0016E0  1E14               	comf	___awmod@dividend+1,f,c
  3235  0016E2  B0D8               	btfsc	status,0,c
  3236  0016E4  2A14               	incf	___awmod@dividend+1,f,c
  3237  0016E6                     l573:
  3238  0016E6  C013  F013         	movff	___awmod@dividend,?___awmod
  3239  0016EA  C014  F014         	movff	___awmod@dividend+1,?___awmod+1
  3240  0016EE  0012               	return	
  3241  0016F0                     __end_of___awmod:
  3242                           	opt stack 0
  3243                           tblptru	equ	0xFF8
  3244                           tblptrh	equ	0xFF7
  3245                           tblptrl	equ	0xFF6
  3246                           tablat	equ	0xFF5
  3247                           prodh	equ	0xFF4
  3248                           prodl	equ	0xFF3
  3249                           intcon	equ	0xFF2
  3250                           postinc0	equ	0xFEE
  3251                           wreg	equ	0xFE8
  3252                           postinc2	equ	0xFDE
  3253                           postdec2	equ	0xFDD
  3254                           fsr2h	equ	0xFDA
  3255                           fsr2l	equ	0xFD9
  3256                           status	equ	0xFD8
  3257                           
  3258 ;; *************** function ___awdiv *****************
  3259 ;; Defined at:
  3260 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3261 ;; Parameters:    Size  Location     Type
  3262 ;;  dividend        2   18[COMRAM] int 
  3263 ;;  divisor         2   20[COMRAM] int 
  3264 ;; Auto vars:     Size  Location     Type
  3265 ;;  quotient        2   24[COMRAM] int 
  3266 ;;  sign            1   23[COMRAM] unsigned char 
  3267 ;;  counter         1   22[COMRAM] unsigned char 
  3268 ;; Return value:  Size  Location     Type
  3269 ;;                  2   18[COMRAM] int 
  3270 ;; Registers used:
  3271 ;;		wreg, status,2, status,0
  3272 ;; Tracked objects:
  3273 ;;		On entry : 0/0
  3274 ;;		On exit  : 0/0
  3275 ;;		Unchanged: 0/0
  3276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3277 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3278 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3280 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3281 ;;Total ram usage:        8 bytes
  3282 ;; Hardware stack levels used:    1
  3283 ;; Hardware stack levels required when called:    2
  3284 ;; This function calls:
  3285 ;;		Nothing
  3286 ;; This function is called by:
  3287 ;;		_disp_Clock
  3288 ;; This function uses a non-reentrant model
  3289 ;;
  3290                           
  3291                           	psect	text24
  3292  00157A                     __ptext24:
  3293                           	opt stack 0
  3294  00157A                     ___awdiv:
  3295                           	opt stack 24
  3296                           
  3297                           ;incstack = 0
  3298  00157A  0E00               	movlw	0
  3299  00157C  6E18               	movwf	___awdiv@sign,c
  3300  00157E  AE16               	btfss	___awdiv@divisor+1,7,c
  3301  001580  D006               	goto	l551
  3302  001582  6C15               	negf	___awdiv@divisor,c
  3303  001584  1E16               	comf	___awdiv@divisor+1,f,c
  3304  001586  B0D8               	btfsc	status,0,c
  3305  001588  2A16               	incf	___awdiv@divisor+1,f,c
  3306  00158A  0E01               	movlw	1
  3307  00158C  6E18               	movwf	___awdiv@sign,c
  3308  00158E                     l551:
  3309  00158E  AE14               	btfss	___awdiv@dividend+1,7,c
  3310  001590  D006               	goto	l552
  3311  001592  6C13               	negf	___awdiv@dividend,c
  3312  001594  1E14               	comf	___awdiv@dividend+1,f,c
  3313  001596  B0D8               	btfsc	status,0,c
  3314  001598  2A14               	incf	___awdiv@dividend+1,f,c
  3315  00159A  0E01               	movlw	1
  3316  00159C  1A18               	xorwf	___awdiv@sign,f,c
  3317  00159E                     l552:
  3318  00159E  0E00               	movlw	0
  3319  0015A0  6E1A               	movwf	___awdiv@quotient+1,c
  3320  0015A2  0E00               	movlw	0
  3321  0015A4  6E19               	movwf	___awdiv@quotient,c
  3322  0015A6  5015               	movf	___awdiv@divisor,w,c
  3323  0015A8  1016               	iorwf	___awdiv@divisor+1,w,c
  3324  0015AA  B4D8               	btfsc	status,2,c
  3325  0015AC  D01C               	goto	l559
  3326  0015AE  0E01               	movlw	1
  3327  0015B0  6E17               	movwf	___awdiv@counter,c
  3328  0015B2  D004               	goto	l554
  3329  0015B4  90D8               	bcf	status,0,c
  3330  0015B6  3615               	rlcf	___awdiv@divisor,f,c
  3331  0015B8  3616               	rlcf	___awdiv@divisor+1,f,c
  3332  0015BA  2A17               	incf	___awdiv@counter,f,c
  3333  0015BC                     l554:
  3334  0015BC  AE16               	btfss	___awdiv@divisor+1,7,c
  3335  0015BE  D7FA               	goto	l555
  3336  0015C0                     u1130:
  3337  0015C0  90D8               	bcf	status,0,c
  3338  0015C2  3619               	rlcf	___awdiv@quotient,f,c
  3339  0015C4  361A               	rlcf	___awdiv@quotient+1,f,c
  3340  0015C6  5015               	movf	___awdiv@divisor,w,c
  3341  0015C8  5C13               	subwf	___awdiv@dividend,w,c
  3342  0015CA  5016               	movf	___awdiv@divisor+1,w,c
  3343  0015CC  5814               	subwfb	___awdiv@dividend+1,w,c
  3344  0015CE  A0D8               	btfss	status,0,c
  3345  0015D0  D005               	goto	l558
  3346  0015D2  5015               	movf	___awdiv@divisor,w,c
  3347  0015D4  5E13               	subwf	___awdiv@dividend,f,c
  3348  0015D6  5016               	movf	___awdiv@divisor+1,w,c
  3349  0015D8  5A14               	subwfb	___awdiv@dividend+1,f,c
  3350  0015DA  8019               	bsf	___awdiv@quotient,0,c
  3351  0015DC                     l558:
  3352  0015DC  90D8               	bcf	status,0,c
  3353  0015DE  3216               	rrcf	___awdiv@divisor+1,f,c
  3354  0015E0  3215               	rrcf	___awdiv@divisor,f,c
  3355  0015E2  2E17               	decfsz	___awdiv@counter,f,c
  3356  0015E4  D7ED               	goto	u1130
  3357  0015E6                     l559:
  3358  0015E6  5018               	movf	___awdiv@sign,w,c
  3359  0015E8  B4D8               	btfsc	status,2,c
  3360  0015EA  D004               	goto	l560
  3361  0015EC  6C19               	negf	___awdiv@quotient,c
  3362  0015EE  1E1A               	comf	___awdiv@quotient+1,f,c
  3363  0015F0  B0D8               	btfsc	status,0,c
  3364  0015F2  2A1A               	incf	___awdiv@quotient+1,f,c
  3365  0015F4                     l560:
  3366  0015F4  C019  F013         	movff	___awdiv@quotient,?___awdiv
  3367  0015F8  C01A  F014         	movff	___awdiv@quotient+1,?___awdiv+1
  3368  0015FC  0012               	return	
  3369  0015FE                     __end_of___awdiv:
  3370                           	opt stack 0
  3371                           tblptru	equ	0xFF8
  3372                           tblptrh	equ	0xFF7
  3373                           tblptrl	equ	0xFF6
  3374                           tablat	equ	0xFF5
  3375                           prodh	equ	0xFF4
  3376                           prodl	equ	0xFF3
  3377                           intcon	equ	0xFF2
  3378                           postinc0	equ	0xFEE
  3379                           wreg	equ	0xFE8
  3380                           postinc2	equ	0xFDE
  3381                           postdec2	equ	0xFDD
  3382                           fsr2h	equ	0xFDA
  3383                           fsr2l	equ	0xFD9
  3384                           status	equ	0xFD8
  3385                           
  3386 ;; *************** function _LCDPutStr *****************
  3387 ;; Defined at:
  3388 ;;		line 198 in file "BBSPI_LCD.c"
  3389 ;; Parameters:    Size  Location     Type
  3390 ;;  ptr             2   25[COMRAM] PTR const unsigned char 
  3391 ;;		 -> STR_14(17), STR_13(16), STR_11(17), STR_9(17), 
  3392 ;;		 -> STR_5(9), STR_2(17), STR_1(17), 
  3393 ;; Auto vars:     Size  Location     Type
  3394 ;;		None
  3395 ;; Return value:  Size  Location     Type
  3396 ;;                  1    wreg      void 
  3397 ;; Registers used:
  3398 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3404 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;Total ram usage:        2 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    5
  3411 ;; This function calls:
  3412 ;;		_LCDPutChar
  3413 ;; This function is called by:
  3414 ;;		_Clock
  3415 ;;		_disp_Clock
  3416 ;;		_count_Clock
  3417 ;;		_set_Clock
  3418 ;;		_Intro
  3419 ;; This function uses a non-reentrant model
  3420 ;;
  3421                           
  3422                           	psect	text25
  3423  001A0A                     __ptext25:
  3424                           	opt stack 0
  3425  001A0A                     _LCDPutStr:
  3426                           	opt stack 24
  3427                           
  3428                           ;BBSPI_LCD.c: 200: while(*ptr) LCDPutChar(*(ptr++));
  3429                           
  3430                           ;incstack = 0
  3431  001A0A  D00C               	goto	l54
  3432  001A0C  C01A  FFF6         	movff	LCDPutStr@ptr,tblptrl
  3433  001A10  C01B  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  3434  001A14                     	if	0	;tblptru may be non-zero
  3435  001A14                     	endif
  3436  001A14                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3437  001A14  0E00               	movlw	low (__mediumconst shr (0+16))
  3438  001A16  6EF8               	movwf	tblptru,c
  3439  001A18                     	endif
  3440  001A18  0008               	tblrd		*
  3441  001A1A  50F5               	movf	tablat,w,c
  3442  001A1C  EC78  F00B         	call	_LCDPutChar
  3443  001A20  4A1A               	infsnz	LCDPutStr@ptr,f,c
  3444  001A22  2A1B               	incf	LCDPutStr@ptr+1,f,c
  3445  001A24                     l54:
  3446  001A24  C01A  FFF6         	movff	LCDPutStr@ptr,tblptrl
  3447  001A28  C01B  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  3448  001A2C                     	if	0	;tblptru may be non-zero
  3449  001A2C                     	endif
  3450  001A2C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3451  001A2C  0E00               	movlw	low (__mediumconst shr (0+16))
  3452  001A2E  6EF8               	movwf	tblptru,c
  3453  001A30                     	endif
  3454  001A30  0008               	tblrd		*
  3455  001A32  50F5               	movf	tablat,w,c
  3456  001A34  0900               	iorlw	0
  3457  001A36  B4D8               	btfsc	status,2,c
  3458  001A38  0012               	return	
  3459  001A3A  D7E8               	goto	l55
  3460  001A3C                     __end_of_LCDPutStr:
  3461                           	opt stack 0
  3462                           tblptru	equ	0xFF8
  3463                           tblptrh	equ	0xFF7
  3464                           tblptrl	equ	0xFF6
  3465                           tablat	equ	0xFF5
  3466                           prodh	equ	0xFF4
  3467                           prodl	equ	0xFF3
  3468                           intcon	equ	0xFF2
  3469                           postinc0	equ	0xFEE
  3470                           wreg	equ	0xFE8
  3471                           postinc2	equ	0xFDE
  3472                           postdec2	equ	0xFDD
  3473                           fsr2h	equ	0xFDA
  3474                           fsr2l	equ	0xFD9
  3475                           status	equ	0xFD8
  3476                           
  3477 ;; *************** function _LCDPutChar *****************
  3478 ;; Defined at:
  3479 ;;		line 160 in file "BBSPI_LCD.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;  ch              1    wreg     unsigned char 
  3482 ;; Auto vars:     Size  Location     Type
  3483 ;;  ch              1   24[COMRAM] unsigned char 
  3484 ;; Return value:  Size  Location     Type
  3485 ;;                  1    wreg      void 
  3486 ;; Registers used:
  3487 ;;		wreg, status,2, status,0, cstack
  3488 ;; Tracked objects:
  3489 ;;		On entry : 0/0
  3490 ;;		On exit  : 0/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3494 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3495 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;Total ram usage:        2 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; Hardware stack levels required when called:    4
  3500 ;; This function calls:
  3501 ;;		_WritePort_BBSPI
  3502 ;; This function is called by:
  3503 ;;		_LCDPutStr
  3504 ;;		_disp_Clock
  3505 ;; This function uses a non-reentrant model
  3506 ;;
  3507                           
  3508                           	psect	text26
  3509  0016F0                     __ptext26:
  3510                           	opt stack 0
  3511  0016F0                     _LCDPutChar:
  3512                           	opt stack 24
  3513                           
  3514                           ;incstack = 0
  3515                           ;LCDPutChar@ch stored from wreg
  3516  0016F0  6E19               	movwf	LCDPutChar@ch,c
  3517                           
  3518                           ;BBSPI_LCD.c: 162: _delay((unsigned long)((5)*(40000000/4000.0)));
  3519  0016F2  0E41               	movlw	65
  3520  0016F4  6E18               	movwf	??_LCDPutChar& (0+255),c
  3521  0016F6  0EEE               	movlw	238
  3522  0016F8                     u1527:
  3523  0016F8  2EE8               	decfsz	wreg,f,c
  3524  0016FA  D7FE               	bra	u1527
  3525  0016FC  2E18               	decfsz	??_LCDPutChar& (0+255),f,c
  3526  0016FE  D7FC               	bra	u1527
  3527  001700  D000               	nop2	
  3528                           
  3529                           ;BBSPI_LCD.c: 163: WritePort_BBSPI (0x12, 0x80);
  3530  001702  0E80               	movlw	128
  3531  001704  6E16               	movwf	WritePort_BBSPI@a,c
  3532  001706  0E12               	movlw	18
  3533  001708  EC93  F00D         	call	_WritePort_BBSPI
  3534                           
  3535                           ;BBSPI_LCD.c: 164: _delay((unsigned long)((1)*(40000000/4000.0)));
  3536  00170C  0E0D               	movlw	13
  3537  00170E  6E18               	movwf	??_LCDPutChar& (0+255),c
  3538  001710  0EFC               	movlw	252
  3539  001712                     u1537:
  3540  001712  2EE8               	decfsz	wreg,f,c
  3541  001714  D7FE               	bra	u1537
  3542  001716  2E18               	decfsz	??_LCDPutChar& (0+255),f,c
  3543  001718  D7FC               	bra	u1537
  3544                           
  3545                           ;BBSPI_LCD.c: 165: WritePort_BBSPI (0x13, ch);
  3546  00171A  C019  F016         	movff	LCDPutChar@ch,WritePort_BBSPI@a
  3547  00171E  0E13               	movlw	19
  3548  001720  EC93  F00D         	call	_WritePort_BBSPI
  3549                           
  3550                           ;BBSPI_LCD.c: 166: _delay((unsigned long)((1)*(40000000/4000.0)));
  3551  001724  0E0D               	movlw	13
  3552  001726  6E18               	movwf	??_LCDPutChar& (0+255),c
  3553  001728  0EFC               	movlw	252
  3554  00172A                     u1547:
  3555  00172A  2EE8               	decfsz	wreg,f,c
  3556  00172C  D7FE               	bra	u1547
  3557  00172E  2E18               	decfsz	??_LCDPutChar& (0+255),f,c
  3558  001730  D7FC               	bra	u1547
  3559                           
  3560                           ;BBSPI_LCD.c: 167: WritePort_BBSPI (0x12, 0xC0);
  3561  001732  0EC0               	movlw	192
  3562  001734  6E16               	movwf	WritePort_BBSPI@a,c
  3563  001736  0E12               	movlw	18
  3564  001738  EC93  F00D         	call	_WritePort_BBSPI
  3565                           
  3566                           ;BBSPI_LCD.c: 168: _delay((unsigned long)((1)*(40000000/4000.0)));
  3567  00173C  0E0D               	movlw	13
  3568  00173E  6E18               	movwf	??_LCDPutChar& (0+255),c
  3569  001740  0EFC               	movlw	252
  3570  001742                     u1557:
  3571  001742  2EE8               	decfsz	wreg,f,c
  3572  001744  D7FE               	bra	u1557
  3573  001746  2E18               	decfsz	??_LCDPutChar& (0+255),f,c
  3574  001748  D7FC               	bra	u1557
  3575                           
  3576                           ;BBSPI_LCD.c: 169: WritePort_BBSPI (0x12, 0x00);
  3577  00174A  0E00               	movlw	0
  3578  00174C  6E16               	movwf	WritePort_BBSPI@a,c
  3579  00174E  0E12               	movlw	18
  3580  001750  EC93  F00D         	call	_WritePort_BBSPI
  3581  001754  0012               	return		;funcret
  3582  001756                     __end_of_LCDPutChar:
  3583                           	opt stack 0
  3584                           tblptru	equ	0xFF8
  3585                           tblptrh	equ	0xFF7
  3586                           tblptrl	equ	0xFF6
  3587                           tablat	equ	0xFF5
  3588                           prodh	equ	0xFF4
  3589                           prodl	equ	0xFF3
  3590                           intcon	equ	0xFF2
  3591                           postinc0	equ	0xFEE
  3592                           wreg	equ	0xFE8
  3593                           postinc2	equ	0xFDE
  3594                           postdec2	equ	0xFDD
  3595                           fsr2h	equ	0xFDA
  3596                           fsr2l	equ	0xFD9
  3597                           status	equ	0xFD8
  3598                           
  3599 ;; *************** function _LCDPutInst *****************
  3600 ;; Defined at:
  3601 ;;		line 179 in file "BBSPI_LCD.c"
  3602 ;; Parameters:    Size  Location     Type
  3603 ;;  ch              1    wreg     unsigned char 
  3604 ;; Auto vars:     Size  Location     Type
  3605 ;;  ch              1   24[COMRAM] unsigned char 
  3606 ;; Return value:  Size  Location     Type
  3607 ;;                  1    wreg      void 
  3608 ;; Registers used:
  3609 ;;		wreg, status,2, status,0, cstack
  3610 ;; Tracked objects:
  3611 ;;		On entry : 0/0
  3612 ;;		On exit  : 0/0
  3613 ;;		Unchanged: 0/0
  3614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3616 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3617 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3618 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3619 ;;Total ram usage:        2 bytes
  3620 ;; Hardware stack levels used:    1
  3621 ;; Hardware stack levels required when called:    4
  3622 ;; This function calls:
  3623 ;;		_WritePort_BBSPI
  3624 ;; This function is called by:
  3625 ;;		_LCDInit
  3626 ;;		_Clock
  3627 ;;		_disp_Clock
  3628 ;;		_count_Clock
  3629 ;;		_set_Clock
  3630 ;;		_Intro
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           	psect	text27
  3635  001756                     __ptext27:
  3636                           	opt stack 0
  3637  001756                     _LCDPutInst:
  3638                           	opt stack 25
  3639                           
  3640                           ;incstack = 0
  3641                           ;LCDPutInst@ch stored from wreg
  3642  001756  6E19               	movwf	LCDPutInst@ch,c
  3643                           
  3644                           ;BBSPI_LCD.c: 181: _delay((unsigned long)((5)*(40000000/4000.0)));
  3645  001758  0E41               	movlw	65
  3646  00175A  6E18               	movwf	??_LCDPutInst& (0+255),c
  3647  00175C  0EEE               	movlw	238
  3648  00175E                     u1567:
  3649  00175E  2EE8               	decfsz	wreg,f,c
  3650  001760  D7FE               	bra	u1567
  3651  001762  2E18               	decfsz	??_LCDPutInst& (0+255),f,c
  3652  001764  D7FC               	bra	u1567
  3653  001766  D000               	nop2	
  3654                           
  3655                           ;BBSPI_LCD.c: 182: WritePort_BBSPI (0x12, 0x00);
  3656  001768  0E00               	movlw	0
  3657  00176A  6E16               	movwf	WritePort_BBSPI@a,c
  3658  00176C  0E12               	movlw	18
  3659  00176E  EC93  F00D         	call	_WritePort_BBSPI
  3660                           
  3661                           ;BBSPI_LCD.c: 183: _delay((unsigned long)((1)*(40000000/4000.0)));
  3662  001772  0E0D               	movlw	13
  3663  001774  6E18               	movwf	??_LCDPutInst& (0+255),c
  3664  001776  0EFC               	movlw	252
  3665  001778                     u1577:
  3666  001778  2EE8               	decfsz	wreg,f,c
  3667  00177A  D7FE               	bra	u1577
  3668  00177C  2E18               	decfsz	??_LCDPutInst& (0+255),f,c
  3669  00177E  D7FC               	bra	u1577
  3670                           
  3671                           ;BBSPI_LCD.c: 184: WritePort_BBSPI (0x13, ch);
  3672  001780  C019  F016         	movff	LCDPutInst@ch,WritePort_BBSPI@a
  3673  001784  0E13               	movlw	19
  3674  001786  EC93  F00D         	call	_WritePort_BBSPI
  3675                           
  3676                           ;BBSPI_LCD.c: 185: _delay((unsigned long)((1)*(40000000/4000.0)));
  3677  00178A  0E0D               	movlw	13
  3678  00178C  6E18               	movwf	??_LCDPutInst& (0+255),c
  3679  00178E  0EFC               	movlw	252
  3680  001790                     u1587:
  3681  001790  2EE8               	decfsz	wreg,f,c
  3682  001792  D7FE               	bra	u1587
  3683  001794  2E18               	decfsz	??_LCDPutInst& (0+255),f,c
  3684  001796  D7FC               	bra	u1587
  3685                           
  3686                           ;BBSPI_LCD.c: 186: WritePort_BBSPI (0x12,0x40);
  3687  001798  0E40               	movlw	64
  3688  00179A  6E16               	movwf	WritePort_BBSPI@a,c
  3689  00179C  0E12               	movlw	18
  3690  00179E  EC93  F00D         	call	_WritePort_BBSPI
  3691                           
  3692                           ;BBSPI_LCD.c: 187: _delay((unsigned long)((1)*(40000000/4000.0)));
  3693  0017A2  0E0D               	movlw	13
  3694  0017A4  6E18               	movwf	??_LCDPutInst& (0+255),c
  3695  0017A6  0EFC               	movlw	252
  3696  0017A8                     u1597:
  3697  0017A8  2EE8               	decfsz	wreg,f,c
  3698  0017AA  D7FE               	bra	u1597
  3699  0017AC  2E18               	decfsz	??_LCDPutInst& (0+255),f,c
  3700  0017AE  D7FC               	bra	u1597
  3701                           
  3702                           ;BBSPI_LCD.c: 188: WritePort_BBSPI (0x12, 0x00);
  3703  0017B0  0E00               	movlw	0
  3704  0017B2  6E16               	movwf	WritePort_BBSPI@a,c
  3705  0017B4  0E12               	movlw	18
  3706  0017B6  EC93  F00D         	call	_WritePort_BBSPI
  3707  0017BA  0012               	return		;funcret
  3708  0017BC                     __end_of_LCDPutInst:
  3709                           	opt stack 0
  3710                           tblptru	equ	0xFF8
  3711                           tblptrh	equ	0xFF7
  3712                           tblptrl	equ	0xFF6
  3713                           tablat	equ	0xFF5
  3714                           prodh	equ	0xFF4
  3715                           prodl	equ	0xFF3
  3716                           intcon	equ	0xFF2
  3717                           postinc0	equ	0xFEE
  3718                           wreg	equ	0xFE8
  3719                           postinc2	equ	0xFDE
  3720                           postdec2	equ	0xFDD
  3721                           fsr2h	equ	0xFDA
  3722                           fsr2l	equ	0xFD9
  3723                           status	equ	0xFD8
  3724                           
  3725 ;; *************** function _WritePort_BBSPI *****************
  3726 ;; Defined at:
  3727 ;;		line 144 in file "BBSPI_LCD.c"
  3728 ;; Parameters:    Size  Location     Type
  3729 ;;  port_add        1    wreg     unsigned char 
  3730 ;;  a               1   21[COMRAM] unsigned char 
  3731 ;; Auto vars:     Size  Location     Type
  3732 ;;  port_add        1   22[COMRAM] unsigned char 
  3733 ;; Return value:  Size  Location     Type
  3734 ;;                  1    wreg      void 
  3735 ;; Registers used:
  3736 ;;		wreg, status,2, status,0, cstack
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3742 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;Total ram usage:        2 bytes
  3747 ;; Hardware stack levels used:    1
  3748 ;; Hardware stack levels required when called:    3
  3749 ;; This function calls:
  3750 ;;		_SendByteBBSPI
  3751 ;; This function is called by:
  3752 ;;		_LCDInit
  3753 ;;		_LCDPutChar
  3754 ;;		_LCDPutInst
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           	psect	text28
  3759  001B26                     __ptext28:
  3760                           	opt stack 0
  3761  001B26                     _WritePort_BBSPI:
  3762                           	opt stack 24
  3763                           
  3764                           ;incstack = 0
  3765                           ;WritePort_BBSPI@port_add stored from wreg
  3766  001B26  6E17               	movwf	WritePort_BBSPI@port_add,c
  3767                           
  3768                           ;BBSPI_LCD.c: 146: LATAbits.LATA2 = 0;
  3769  001B28  9489               	bcf	3977,2,c	;volatile
  3770                           
  3771                           ;BBSPI_LCD.c: 147: SendByteBBSPI(0x40);
  3772  001B2A  0E40               	movlw	64
  3773  001B2C  EC98  F00C         	call	_SendByteBBSPI
  3774                           
  3775                           ;BBSPI_LCD.c: 148: SendByteBBSPI(port_add);
  3776  001B30  5017               	movf	WritePort_BBSPI@port_add,w,c
  3777  001B32  EC98  F00C         	call	_SendByteBBSPI
  3778                           
  3779                           ;BBSPI_LCD.c: 149: SendByteBBSPI(a);
  3780  001B36  5016               	movf	WritePort_BBSPI@a,w,c
  3781  001B38  EC98  F00C         	call	_SendByteBBSPI
  3782                           
  3783                           ;BBSPI_LCD.c: 150: LATAbits.LATA2 = 1;
  3784  001B3C  8489               	bsf	3977,2,c	;volatile
  3785  001B3E  0012               	return		;funcret
  3786  001B40                     __end_of_WritePort_BBSPI:
  3787                           	opt stack 0
  3788                           tblptru	equ	0xFF8
  3789                           tblptrh	equ	0xFF7
  3790                           tblptrl	equ	0xFF6
  3791                           tablat	equ	0xFF5
  3792                           prodh	equ	0xFF4
  3793                           prodl	equ	0xFF3
  3794                           intcon	equ	0xFF2
  3795                           postinc0	equ	0xFEE
  3796                           wreg	equ	0xFE8
  3797                           postinc2	equ	0xFDE
  3798                           postdec2	equ	0xFDD
  3799                           fsr2h	equ	0xFDA
  3800                           fsr2l	equ	0xFD9
  3801                           status	equ	0xFD8
  3802                           
  3803 ;; *************** function _SendByteBBSPI *****************
  3804 ;; Defined at:
  3805 ;;		line 91 in file "BBSPI_LCD.c"
  3806 ;; Parameters:    Size  Location     Type
  3807 ;;  output          1    wreg     unsigned char 
  3808 ;; Auto vars:     Size  Location     Type
  3809 ;;  output          1   18[COMRAM] unsigned char 
  3810 ;;  input           1   20[COMRAM] unsigned char 
  3811 ;;  bitcount        1   19[COMRAM] unsigned char 
  3812 ;; Return value:  Size  Location     Type
  3813 ;;                  1    wreg      void 
  3814 ;; Registers used:
  3815 ;;		wreg, status,2, status,0
  3816 ;; Tracked objects:
  3817 ;;		On entry : 0/0
  3818 ;;		On exit  : 0/0
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3822 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3824 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3825 ;;Total ram usage:        3 bytes
  3826 ;; Hardware stack levels used:    1
  3827 ;; Hardware stack levels required when called:    2
  3828 ;; This function calls:
  3829 ;;		Nothing
  3830 ;; This function is called by:
  3831 ;;		_Port_BBSPIInit
  3832 ;;		_WritePort_BBSPI
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836                           	psect	text29
  3837  001930                     __ptext29:
  3838                           	opt stack 0
  3839  001930                     _SendByteBBSPI:
  3840                           	opt stack 24
  3841                           
  3842                           ;incstack = 0
  3843                           ;SendByteBBSPI@output stored from wreg
  3844  001930  6E13               	movwf	SendByteBBSPI@output,c
  3845                           
  3846                           ;BBSPI_LCD.c: 93: unsigned char bitcount;
  3847                           ;BBSPI_LCD.c: 94: unsigned char input = output;
  3848  001932  C013  F015         	movff	SendByteBBSPI@output,SendByteBBSPI@input
  3849                           
  3850                           ;BBSPI_LCD.c: 96: for(bitcount=0;bitcount<8;bitcount++)
  3851  001936  0E00               	movlw	0
  3852  001938  6E14               	movwf	SendByteBBSPI@bitcount,c
  3853  00193A                     l1666:
  3854  00193A  0E07               	movlw	7
  3855  00193C  6414               	cpfsgt	SendByteBBSPI@bitcount,c
  3856  00193E  D001               	goto	l33
  3857  001940  0012               	return	
  3858  001942                     l33:
  3859                           
  3860                           ;BBSPI_LCD.c: 97: {
  3861                           ;BBSPI_LCD.c: 99: if(output & 0x80)
  3862  001942  AE13               	btfss	SendByteBBSPI@output,7,c
  3863  001944  D002               	goto	l35
  3864                           
  3865                           ;BBSPI_LCD.c: 100: LATCbits.LATC5 = 1;
  3866  001946  8A8B               	bsf	3979,5,c	;volatile
  3867  001948  D001               	goto	l36
  3868  00194A                     l35:
  3869                           
  3870                           ;BBSPI_LCD.c: 101: else
  3871                           ;BBSPI_LCD.c: 102: LATCbits.LATC5 = 0;
  3872  00194A  9A8B               	bcf	3979,5,c	;volatile
  3873  00194C                     l36:
  3874                           
  3875                           ;BBSPI_LCD.c: 104: if (LATCbits.LATC4)
  3876  00194C  A88B               	btfss	3979,4,c	;volatile
  3877  00194E  D003               	goto	l37
  3878                           
  3879                           ;BBSPI_LCD.c: 105: input = (input << 1) | 0x1;
  3880  001950  80D8               	bsf	status,0,c
  3881  001952  3615               	rlcf	SendByteBBSPI@input,f,c
  3882  001954  D003               	goto	l38
  3883  001956                     l37:
  3884                           
  3885                           ;BBSPI_LCD.c: 106: else
  3886                           ;BBSPI_LCD.c: 107: input = input << 1;
  3887  001956  5015               	movf	SendByteBBSPI@input,w,c
  3888  001958  2415               	addwf	SendByteBBSPI@input,w,c
  3889  00195A  6E15               	movwf	SendByteBBSPI@input,c
  3890  00195C                     l38:
  3891                           
  3892                           ;BBSPI_LCD.c: 108: LATCbits.LATC3 = 1;
  3893  00195C  868B               	bsf	3979,3,c	;volatile
  3894                           
  3895                           ;BBSPI_LCD.c: 109: __nop();__nop();__nop();__nop();__nop();__nop();
  3896  00195E  F000               	nop	
  3897  001960  F000               	nop	
  3898  001962  F000               	nop	
  3899  001964  F000               	nop	
  3900  001966  F000               	nop	
  3901  001968  F000               	nop	
  3902                           
  3903                           ;BBSPI_LCD.c: 110: __nop();__nop();__nop();__nop();__nop();__nop();
  3904  00196A  F000               	nop	
  3905  00196C  F000               	nop	
  3906  00196E  F000               	nop	
  3907  001970  F000               	nop	
  3908  001972  F000               	nop	
  3909  001974  F000               	nop	
  3910                           
  3911                           ;BBSPI_LCD.c: 111: LATCbits.LATC3 = 0;
  3912  001976  968B               	bcf	3979,3,c	;volatile
  3913                           
  3914                           ;BBSPI_LCD.c: 112: output <<= 1;
  3915  001978  90D8               	bcf	status,0,c
  3916  00197A  3613               	rlcf	SendByteBBSPI@output,f,c
  3917  00197C  2A14               	incf	SendByteBBSPI@bitcount,f,c
  3918  00197E  D7DD               	goto	l1666
  3919  001980                     __end_of_SendByteBBSPI:
  3920                           	opt stack 0
  3921                           tblptru	equ	0xFF8
  3922                           tblptrh	equ	0xFF7
  3923                           tblptrl	equ	0xFF6
  3924                           tablat	equ	0xFF5
  3925                           prodh	equ	0xFF4
  3926                           prodl	equ	0xFF3
  3927                           intcon	equ	0xFF2
  3928                           postinc0	equ	0xFEE
  3929                           wreg	equ	0xFE8
  3930                           postinc2	equ	0xFDE
  3931                           postdec2	equ	0xFDD
  3932                           fsr2h	equ	0xFDA
  3933                           fsr2l	equ	0xFD9
  3934                           status	equ	0xFD8
  3935                           
  3936 ;; *************** function _SWdelay *****************
  3937 ;; Defined at:
  3938 ;;		line 33 in file "SystemInitialize.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;		None
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;		None
  3943 ;; Return value:  Size  Location     Type
  3944 ;;                  1    wreg      void 
  3945 ;; Registers used:
  3946 ;;		wreg, status,2
  3947 ;; Tracked objects:
  3948 ;;		On entry : 0/0
  3949 ;;		On exit  : 0/0
  3950 ;;		Unchanged: 0/0
  3951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3954 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3955 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;Total ram usage:        1 bytes
  3957 ;; Hardware stack levels used:    1
  3958 ;; Hardware stack levels required when called:    2
  3959 ;; This function calls:
  3960 ;;		Nothing
  3961 ;; This function is called by:
  3962 ;;		_Clock
  3963 ;;		_count_Clock
  3964 ;;		_set_Clock
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           	psect	text30
  3969  001A3C                     __ptext30:
  3970                           	opt stack 0
  3971  001A3C                     _SWdelay:
  3972                           	opt stack 25
  3973                           
  3974                           ;SystemInitialize.c: 35: while(PORTAbits.RA5 == 0)
  3975                           
  3976                           ;incstack = 0
  3977  001A3C  D009               	goto	l303
  3978  001A3E                     
  3979                           ;SystemInitialize.c: 36: {
  3980                           ;SystemInitialize.c: 37: _delay((unsigned long)((1)*(40000000/4000.0)));
  3981  001A3E  0E0D               	movlw	13
  3982  001A40  6E13               	movwf	??_SWdelay& (0+255),c
  3983  001A42  0EFC               	movlw	252
  3984  001A44                     u1607:
  3985  001A44  2EE8               	decfsz	wreg,f,c
  3986  001A46  D7FE               	bra	u1607
  3987  001A48  2E13               	decfsz	??_SWdelay& (0+255),f,c
  3988  001A4A  D7FC               	bra	u1607
  3989                           
  3990                           ;SystemInitialize.c: 38: PORTD = 0x0F;
  3991  001A4C  0E0F               	movlw	15
  3992  001A4E  6E83               	movwf	3971,c	;volatile
  3993  001A50                     l303:
  3994  001A50  BA80               	btfsc	3968,5,c	;volatile
  3995  001A52  D00A               	goto	l306
  3996  001A54  D7F4               	goto	l304
  3997  001A56                     
  3998                           ;SystemInitialize.c: 41: {
  3999                           ;SystemInitialize.c: 42: _delay((unsigned long)((1)*(40000000/4000.0)));
  4000  001A56  0E0D               	movlw	13
  4001  001A58  6E13               	movwf	??_SWdelay& (0+255),c
  4002  001A5A  0EFC               	movlw	252
  4003  001A5C                     u1617:
  4004  001A5C  2EE8               	decfsz	wreg,f,c
  4005  001A5E  D7FE               	bra	u1617
  4006  001A60  2E13               	decfsz	??_SWdelay& (0+255),f,c
  4007  001A62  D7FC               	bra	u1617
  4008                           
  4009                           ;SystemInitialize.c: 43: PORTD = 0xF0;
  4010  001A64  0EF0               	movlw	240
  4011  001A66  6E83               	movwf	3971,c	;volatile
  4012  001A68                     l306:
  4013  001A68  B081               	btfsc	3969,0,c	;volatile
  4014  001A6A  0012               	return	
  4015  001A6C  D7F4               	goto	l307
  4016  001A6E                     __end_of_SWdelay:
  4017                           	opt stack 0
  4018                           tblptru	equ	0xFF8
  4019                           tblptrh	equ	0xFF7
  4020                           tblptrl	equ	0xFF6
  4021                           tablat	equ	0xFF5
  4022                           prodh	equ	0xFF4
  4023                           prodl	equ	0xFF3
  4024                           intcon	equ	0xFF2
  4025                           postinc0	equ	0xFEE
  4026                           wreg	equ	0xFE8
  4027                           postinc2	equ	0xFDE
  4028                           postdec2	equ	0xFDD
  4029                           fsr2h	equ	0xFDA
  4030                           fsr2l	equ	0xFD9
  4031                           status	equ	0xFD8
  4032                           
  4033 ;; *************** function _InterruptManager *****************
  4034 ;; Defined at:
  4035 ;;		line 28 in file "InterruptManager.c"
  4036 ;; Parameters:    Size  Location     Type
  4037 ;;		None
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;		None
  4040 ;; Return value:  Size  Location     Type
  4041 ;;                  1    wreg      void 
  4042 ;; Registers used:
  4043 ;;		wreg, status,2, cstack
  4044 ;; Tracked objects:
  4045 ;;		On entry : 0/0
  4046 ;;		On exit  : 0/0
  4047 ;;		Unchanged: 0/0
  4048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4051 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4052 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4053 ;;Total ram usage:       18 bytes
  4054 ;; Hardware stack levels used:    1
  4055 ;; Hardware stack levels required when called:    1
  4056 ;; This function calls:
  4057 ;;		_TMR1InterruptRoutine
  4058 ;; This function is called by:
  4059 ;;		Interrupt level 2
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063                           	psect	intcode
  4064  000008                     __pintcode:
  4065                           	opt stack 0
  4066  000008                     _InterruptManager:
  4067                           	opt stack 21
  4068                           
  4069                           ;incstack = 0
  4070  000008  8238               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4071  00000A  ED2A  F00A         	call	int_func,f	;refresh shadow registers
  4072                           tblptru	equ	0xFF8
  4073                           tblptrh	equ	0xFF7
  4074                           tblptrl	equ	0xFF6
  4075                           tablat	equ	0xFF5
  4076                           prodh	equ	0xFF4
  4077                           prodl	equ	0xFF3
  4078                           intcon	equ	0xFF2
  4079                           postinc0	equ	0xFEE
  4080                           wreg	equ	0xFE8
  4081                           postinc2	equ	0xFDE
  4082                           postdec2	equ	0xFDD
  4083                           fsr2h	equ	0xFDA
  4084                           fsr2l	equ	0xFD9
  4085                           status	equ	0xFD8
  4086                           
  4087                           	psect	intcode_body
  4088  001454                     __pintcode_body:
  4089                           	opt stack 21
  4090  001454                     int_func:
  4091                           	opt stack 21
  4092  001454  0006               	pop		; remove dummy address from shadow register refresh
  4093  001456  CFFA F001          	movff	pclath,??_InterruptManager
  4094  00145A  CFFB F002          	movff	pclatu,??_InterruptManager+1
  4095  00145E  CFE9 F003          	movff	fsr0l,??_InterruptManager+2
  4096  001462  CFEA F004          	movff	fsr0h,??_InterruptManager+3
  4097  001466  CFE1 F005          	movff	fsr1l,??_InterruptManager+4
  4098  00146A  CFE2 F006          	movff	fsr1h,??_InterruptManager+5
  4099  00146E  CFD9 F007          	movff	fsr2l,??_InterruptManager+6
  4100  001472  CFDA F008          	movff	fsr2h,??_InterruptManager+7
  4101  001476  CFF3 F009          	movff	prodl,??_InterruptManager+8
  4102  00147A  CFF4 F00A          	movff	prodh,??_InterruptManager+9
  4103  00147E  CFF6 F00B          	movff	tblptrl,??_InterruptManager+10
  4104  001482  CFF7 F00C          	movff	tblptrh,??_InterruptManager+11
  4105  001486  CFF8 F00D          	movff	tblptru,??_InterruptManager+12
  4106  00148A  CFF5 F00E          	movff	tablat,??_InterruptManager+13
  4107  00148E  C038  F00F         	movff	btemp,??_InterruptManager+14
  4108  001492  C039  F010         	movff	btemp+1,??_InterruptManager+15
  4109  001496  C03A  F011         	movff	btemp+2,??_InterruptManager+16
  4110  00149A  C03B  F012         	movff	btemp+3,??_InterruptManager+17
  4111                           
  4112                           ;InterruptManager.c: 30: if(PIR1bits.TMR1IF == 1)
  4113  00149E  B09E               	btfsc	3998,0,c	;volatile
  4114                           
  4115                           ;InterruptManager.c: 31: {
  4116                           ;InterruptManager.c: 33: TMR1InterruptRoutine();
  4117  0014A0  ECC7  F00D         	call	_TMR1InterruptRoutine	;wreg free
  4118  0014A4  C012  F03B         	movff	??_InterruptManager+17,btemp+3
  4119  0014A8  C011  F03A         	movff	??_InterruptManager+16,btemp+2
  4120  0014AC  C010  F039         	movff	??_InterruptManager+15,btemp+1
  4121  0014B0  C00F  F038         	movff	??_InterruptManager+14,btemp
  4122  0014B4  C00E  FFF5         	movff	??_InterruptManager+13,tablat
  4123  0014B8  C00D  FFF8         	movff	??_InterruptManager+12,tblptru
  4124  0014BC  C00C  FFF7         	movff	??_InterruptManager+11,tblptrh
  4125  0014C0  C00B  FFF6         	movff	??_InterruptManager+10,tblptrl
  4126  0014C4  C00A  FFF4         	movff	??_InterruptManager+9,prodh
  4127  0014C8  C009  FFF3         	movff	??_InterruptManager+8,prodl
  4128  0014CC  C008  FFDA         	movff	??_InterruptManager+7,fsr2h
  4129  0014D0  C007  FFD9         	movff	??_InterruptManager+6,fsr2l
  4130  0014D4  C006  FFE2         	movff	??_InterruptManager+5,fsr1h
  4131  0014D8  C005  FFE1         	movff	??_InterruptManager+4,fsr1l
  4132  0014DC  C004  FFEA         	movff	??_InterruptManager+3,fsr0h
  4133  0014E0  C003  FFE9         	movff	??_InterruptManager+2,fsr0l
  4134  0014E4  C002  FFFB         	movff	??_InterruptManager+1,pclatu
  4135  0014E8  C001  FFFA         	movff	??_InterruptManager,pclath
  4136  0014EC  9238               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4137  0014EE  0011               	retfie		f
  4138  0014F0                     __end_of_InterruptManager:
  4139                           	opt stack 0
  4140                           pclatu	equ	0xFFB
  4141                           pclath	equ	0xFFA
  4142                           tblptru	equ	0xFF8
  4143                           tblptrh	equ	0xFF7
  4144                           tblptrl	equ	0xFF6
  4145                           tablat	equ	0xFF5
  4146                           prodh	equ	0xFF4
  4147                           prodl	equ	0xFF3
  4148                           intcon	equ	0xFF2
  4149                           postinc0	equ	0xFEE
  4150                           fsr0h	equ	0xFEA
  4151                           fsr0l	equ	0xFE9
  4152                           wreg	equ	0xFE8
  4153                           fsr1h	equ	0xFE2
  4154                           fsr1l	equ	0xFE1
  4155                           postinc2	equ	0xFDE
  4156                           postdec2	equ	0xFDD
  4157                           fsr2h	equ	0xFDA
  4158                           fsr2l	equ	0xFD9
  4159                           status	equ	0xFD8
  4160                           
  4161 ;; *************** function _TMR1InterruptRoutine *****************
  4162 ;; Defined at:
  4163 ;;		line 129 in file "tmr1.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;		None
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;		None
  4168 ;; Return value:  Size  Location     Type
  4169 ;;                  1    wreg      void 
  4170 ;; Registers used:
  4171 ;;		wreg, status,2
  4172 ;; Tracked objects:
  4173 ;;		On entry : 0/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4181 ;;Total ram usage:        0 bytes
  4182 ;; Hardware stack levels used:    1
  4183 ;; This function calls:
  4184 ;;		Nothing
  4185 ;; This function is called by:
  4186 ;;		_InterruptManager
  4187 ;; This function uses a non-reentrant model
  4188 ;;
  4189                           
  4190                           	psect	text32
  4191  001B8E                     __ptext32:
  4192                           	opt stack 0
  4193  001B8E                     _TMR1InterruptRoutine:
  4194                           	opt stack 21
  4195                           
  4196                           ;tmr1.c: 132: PIR1bits.TMR1IF = 0;
  4197                           
  4198                           ;incstack = 0
  4199  001B8E  909E               	bcf	3998,0,c	;volatile
  4200                           
  4201                           ;tmr1.c: 135: TMR1H = 0x80;
  4202  001B90  0E80               	movlw	128
  4203  001B92  6ECF               	movwf	4047,c	;volatile
  4204                           
  4205                           ;tmr1.c: 136: TMR1L = 0x00;
  4206  001B94  0E00               	movlw	0
  4207  001B96  6ECE               	movwf	4046,c	;volatile
  4208                           
  4209                           ;tmr1.c: 139: Timer1Flag = 1;
  4210  001B98  0E01               	movlw	1
  4211  001B9A  6E37               	movwf	_Timer1Flag,c
  4212  001B9C  0012               	return	
  4213  001B9E                     __end_of_TMR1InterruptRoutine:
  4214                           	opt stack 0
  4215                           pclatu	equ	0xFFB
  4216                           pclath	equ	0xFFA
  4217                           tblptru	equ	0xFF8
  4218                           tblptrh	equ	0xFF7
  4219                           tblptrl	equ	0xFF6
  4220                           tablat	equ	0xFF5
  4221                           prodh	equ	0xFF4
  4222                           prodl	equ	0xFF3
  4223                           intcon	equ	0xFF2
  4224                           postinc0	equ	0xFEE
  4225                           fsr0h	equ	0xFEA
  4226                           fsr0l	equ	0xFE9
  4227                           wreg	equ	0xFE8
  4228                           fsr1h	equ	0xFE2
  4229                           fsr1l	equ	0xFE1
  4230                           postinc2	equ	0xFDE
  4231                           postdec2	equ	0xFDD
  4232                           fsr2h	equ	0xFDA
  4233                           fsr2l	equ	0xFD9
  4234                           status	equ	0xFD8
  4235                           pclatu	equ	0xFFB
  4236                           pclath	equ	0xFFA
  4237                           tblptru	equ	0xFF8
  4238                           tblptrh	equ	0xFF7
  4239                           tblptrl	equ	0xFF6
  4240                           tablat	equ	0xFF5
  4241                           prodh	equ	0xFF4
  4242                           prodl	equ	0xFF3
  4243                           intcon	equ	0xFF2
  4244                           postinc0	equ	0xFEE
  4245                           fsr0h	equ	0xFEA
  4246                           fsr0l	equ	0xFE9
  4247                           wreg	equ	0xFE8
  4248                           fsr1h	equ	0xFE2
  4249                           fsr1l	equ	0xFE1
  4250                           postinc2	equ	0xFDE
  4251                           postdec2	equ	0xFDD
  4252                           fsr2h	equ	0xFDA
  4253                           fsr2l	equ	0xFD9
  4254                           status	equ	0xFD8
  4255                           
  4256                           	psect	rparam
  4257  0000                     pclatu	equ	0xFFB
  4258                           pclath	equ	0xFFA
  4259                           tblptru	equ	0xFF8
  4260                           tblptrh	equ	0xFF7
  4261                           tblptrl	equ	0xFF6
  4262                           tablat	equ	0xFF5
  4263                           prodh	equ	0xFF4
  4264                           prodl	equ	0xFF3
  4265                           intcon	equ	0xFF2
  4266                           postinc0	equ	0xFEE
  4267                           fsr0h	equ	0xFEA
  4268                           fsr0l	equ	0xFE9
  4269                           wreg	equ	0xFE8
  4270                           fsr1h	equ	0xFE2
  4271                           fsr1l	equ	0xFE1
  4272                           postinc2	equ	0xFDE
  4273                           postdec2	equ	0xFDD
  4274                           fsr2h	equ	0xFDA
  4275                           fsr2l	equ	0xFD9
  4276                           status	equ	0xFD8
  4277                           
  4278                           	psect	temp
  4279  000038                     btemp:
  4280                           	opt stack 0
  4281  000038                     	ds	1
  4282  0000                     int$flags	set	btemp
  4283  0000                     wtemp6	set	btemp+1
  4284                           pclatu	equ	0xFFB
  4285                           pclath	equ	0xFFA
  4286                           tblptru	equ	0xFF8
  4287                           tblptrh	equ	0xFF7
  4288                           tblptrl	equ	0xFF6
  4289                           tablat	equ	0xFF5
  4290                           prodh	equ	0xFF4
  4291                           prodl	equ	0xFF3
  4292                           intcon	equ	0xFF2
  4293                           postinc0	equ	0xFEE
  4294                           fsr0h	equ	0xFEA
  4295                           fsr0l	equ	0xFE9
  4296                           wreg	equ	0xFE8
  4297                           fsr1h	equ	0xFE2
  4298                           fsr1l	equ	0xFE1
  4299                           postinc2	equ	0xFDE
  4300                           postdec2	equ	0xFDD
  4301                           fsr2h	equ	0xFDA
  4302                           fsr2l	equ	0xFD9
  4303                           status	equ	0xFD8


Data Sizes:
    Strings     235
    Constant    10
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     47      55
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_16(CODE[19]), STR_15(CODE[19]), STR_12(CODE[18]), STR_10(CODE[18]), 
		 -> STR_8(CODE[7]), STR_7(CODE[6]), STR_6(CODE[6]), STR_4(CODE[19]), 
		 -> STR_3(CODE[19]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    LCDPutStr@ptr	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_14(CODE[17]), STR_13(CODE[16]), STR_11(CODE[17]), STR_9(CODE[17]), 
		 -> STR_5(CODE[9]), STR_2(CODE[17]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _Intro->_printf
    _LCDInit->_LCDPutInst
    _Port_BBSPIInit->_SendByteBBSPI
    _Clock->_printf
    _count_Clock->_printf
    _set_Clock->_printf
    _disp_Clock->_printf
    _printf->___lwmod
    _putch->_EUSART1_Write
    ___lwmod->___lwdiv
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_WritePort_BBSPI
    _LCDPutInst->_WritePort_BBSPI
    _WritePort_BBSPI->_SendByteBBSPI

Critical Paths under _InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   35910
                              _Clock
                              _Intro
                      _SysInitialize
 ---------------------------------------------------------------------------------
 (1) _SysInitialize                                        0     0      0       0
                 _EUSART1_Initialize
                _InterruptInitialize
                     _PortInitialize
                     _TMR1Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1Initialize                                       0     0      0       0
                          _TMR1Start
 ---------------------------------------------------------------------------------
 (3) _TMR1Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PortInitialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InterruptInitialize                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Intro                                                0     0      0    6953
                         _IntroDelay
                            _LCDInit
                         _LCDPutInst
                          _LCDPutStr
                             _printf
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0    1914
                                             25 COMRAM     1     1      0
                          _InitBBSPI
                         _LCDPutInst
                     _Port_BBSPIInit
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (3) _Port_BBSPIInit                                       1     1      0     160
                                             21 COMRAM     1     1      0
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (3) _InitBBSPI                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IntroDelay                                           5     5      0     206
                                             18 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _Clock                                                0     0      0   28957
                         _LCDPutInst
                          _LCDPutStr
                            _SWdelay
                        _count_Clock
                             _printf
 ---------------------------------------------------------------------------------
 (2) _count_Clock                                          0     0      0   24124
                         _LCDPutInst
                          _LCDPutStr
                            _SWdelay
                         _disp_Clock
                             _printf
                          _set_Clock
 ---------------------------------------------------------------------------------
 (3) _set_Clock                                            0     0      0   12062
                         _LCDPutInst
                          _LCDPutStr
                            _SWdelay
                         _disp_Clock
                             _printf
 ---------------------------------------------------------------------------------
 (4) _disp_Clock                                           0     0      0    7229
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              26    22      4    2480
                                             30 COMRAM    17    13      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                             19 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART1_Write                                        1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     311
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     311
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     752
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     756
                                             18 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _LCDPutStr                                            2     0      2    1465
                                             25 COMRAM     2     0      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (3) _LCDPutChar                                           2     2      0     888
                                             23 COMRAM     2     2      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (2) _LCDPutInst                                           2     2      0     888
                                             23 COMRAM     2     2      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (4) _WritePort_BBSPI                                      2     1      1     866
                                             21 COMRAM     2     1      1
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (5) _SendByteBBSPI                                        3     3      0     138
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _SWdelay                                              1     1      0       0
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _InterruptManager                                    18    18      0       0
                                              0 COMRAM    18    18      0
               _TMR1InterruptRoutine
 ---------------------------------------------------------------------------------
 (10) _TMR1InterruptRoutine                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Clock
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     _SWdelay
     _count_Clock
       _LCDPutInst
         _WritePort_BBSPI
           _SendByteBBSPI
       _LCDPutStr
         _LCDPutChar
           _WritePort_BBSPI
             _SendByteBBSPI
       _SWdelay
       _disp_Clock
         _LCDPutChar
           _WritePort_BBSPI
             _SendByteBBSPI
         _LCDPutInst
           _WritePort_BBSPI
             _SendByteBBSPI
         _LCDPutStr
           _LCDPutChar
             _WritePort_BBSPI
               _SendByteBBSPI
         ___awdiv
         ___awmod
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART1_Write
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART1_Write
       _set_Clock
         _LCDPutInst
           _WritePort_BBSPI
             _SendByteBBSPI
         _LCDPutStr
           _LCDPutChar
             _WritePort_BBSPI
               _SendByteBBSPI
         _SWdelay
         _disp_Clock
           _LCDPutChar
             _WritePort_BBSPI
               _SendByteBBSPI
           _LCDPutInst
             _WritePort_BBSPI
               _SendByteBBSPI
           _LCDPutStr
             _LCDPutChar
               _WritePort_BBSPI
                 _SendByteBBSPI
           ___awdiv
           ___awmod
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
             _putch
               _EUSART1_Write
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART1_Write
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART1_Write
   _Intro
     _IntroDelay
     _LCDInit
       _InitBBSPI
       _LCDPutInst
         _WritePort_BBSPI
           _SendByteBBSPI
       _Port_BBSPIInit
         _SendByteBBSPI
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART1_Write
   _SysInitialize
     _EUSART1_Initialize
     _InterruptInitialize
     _PortInitialize
     _TMR1Initialize
       _TMR1Start

 _InterruptManager (ROOT)
   _TMR1InterruptRoutine

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2F      37       1       58.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      37      32        0.0%
DATA                 0      0      37       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Mar 08 11:23:06 2018

           ??_InterruptManager 0001                             l33 1942                             l35 194A  
                  ?_LCDPutChar 0001                             l36 194C                             l37 1956  
                           l38 195C                             l54 1A24                             l55 1A0C  
                 ___awdiv@sign 0018                    ?_LCDPutInst 0001                             _hr 0035  
          ___wmul@multiplicand 0015                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                 __CFG_CP4$OFF 000000                   __CFG_CP5$OFF 000000          SendByteBBSPI@bitcount 0014  
                 __CFG_CP6$OFF 000000                   __CFG_CP7$OFF 000000                            l303 1A50  
                          l304 1A3E                            l224 17D0                            l306 1A68  
                          l307 1A56                            l163 18BE                            l227 17E8  
                          l180 1678                            l164 18CA                            l165 18D6  
                          l229 17FE                            l261 1AA0                            l174 1600  
                          l175 165C                            l360 11EA                            l344 1102  
                          l176 1614                            l353 115C                            l345 1112  
                          l193 1572                            l177 1620                            l370 12A4  
                          l362 1212                            l194 153C                            l186 14F4  
                          l178 1636                            l355 11C0                            l347 1126  
                          l187 1564                            l195 1556                            l179 166C  
                          l259 1A9A                            l380 12EE                            l348 1120  
                          l188 1514                            l189 152E                            l366 1262  
                          l551 158E                            l367 1286                            l560 15F4  
                          l552 159E                            l368 128E                            l713 1AE8  
                          l369 12BA                            l554 15BC                            l802 19DE  
                          l378 12E8                            l555 15B4                            l571 16CE  
                          l803 19D6                            l379 133C                            l572 16D8  
                          l564 1694                            l573 16E6                            l565 16A0  
                          l558 15DC                            l806 19F6                            l559 15E6  
                          l567 16B6                            l807 1A00                            l568 16AE  
                          l792 18FC                            l793 18F4                            l796 191C  
                          l797 1926                   __CFG_CPB$OFF 000000                   __CFG_CPD$OFF 000000  
                          u850 1900                            u880 19E2                            u970 1248  
                          _min 0034                            _sec 0033                   ___awmod@sign 0018  
                          wreg 000FE8                   __CFG_MODE$MC 000000                __end_of_LCDInit 1880  
                 __CFG_LVP$OFF 000000                   __CFG_WDT$OFF 000000                           l2172 17C8  
                         l2264 1AA4                           l1714 1BA0                           l1666 193A  
                         l1858 1216                           STR_1 108C                           STR_2 10BF  
                         STR_3 1031                           STR_4 1044                           STR_5 10E0  
                         STR_6 10F0                           STR_7 10F0                   ?_count_Clock 0001  
                         STR_8 10E9                           STR_9 10AE                           u1130 15C0  
                         u1050 12C2                           u1060 12D6                           u1080 1344  
                         _LATA 000F89                           u1190 16BA                           _LATB 000F8A  
                         u1450 181A                           u1507 1856                           u1517 1808  
                         u1607 1A44                           u1527 16F8                           u1617 1A5C  
                         u1537 1712                           u1547 172A                           u1557 1742  
                         u1567 175E                           u1577 1778                           u1497 182E  
                         u1587 1790                           u1597 17A8          ??_InterruptInitialize 0013  
                 __CFG_PWRT$ON 000000                  _EUSART1_Write 1B9E                           _Time 0031  
                         _main 1A94                           fsr0h 000FEA                           fsr1h 000FE2  
                         fsr2h 000FDA                           fsr0l 000FE9                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 0038               ?_WritePort_BBSPI 0016  
                         prodh 000FF4                           prodl 000FF3                           start 000E  
           __size_of_LCDPutStr 0032                  __CFG_IESO$OFF 000000                  _SysInitialize 1B6A  
                __CFG_MCLRE$ON 000000                   ___param_bank 000000                __end_of_SWdelay 1A6E  
                __CFG_WAIT$OFF 000000                          ?_main 0001                __end_of___awdiv 15FE  
                        STR_10 1069                          STR_11 109D                          STR_12 1057  
                        STR_13 10D0                          STR_14 107B                          STR_15 100B  
                        STR_16 101E                __end_of___awmod 16F0                ___awdiv@divisor 0015  
              __end_of___lwdiv 1930                __end_of___lwmod 1A0A                ___awdiv@counter 0017  
                        _RCREG 000FAE                          _RCSTA 000FAB                          _TMR1H 000FCF  
                        _TMR1L 000FCE                          _SPBRG 000FAF                          _PORTD 000F83  
                        _TRISD 000F95                          _TXREG 000FAD                          _TXSTA 000FAC  
                        _Clock 1880                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
                __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000                  __CFG_WRT4$OFF 000000  
                __CFG_WRT5$OFF 000000                  __CFG_WRT6$OFF 000000                  __CFG_WRT7$OFF 000000  
               __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000                          _Intro 1980  
               __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000  
               __CFG_EBTR4$OFF 000000                 __CFG_EBTR5$OFF 000000                 __CFG_EBTR6$OFF 000000  
               __CFG_EBTR7$OFF 000000                          _State 0036                  __CFG_WRTB$OFF 000000  
      __size_of_Port_BBSPIInit 001A                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
               __CFG_EBTRB$OFF 000000             __size_of_TMR1Start 0004                __end_of_dpowers 100B  
              __end_of_isdigit 1AF0                          _putch 1BB4                 ?_EUSART1_Write 0001  
                        pclath 000FFA                          tablat 000FF5            __size_of_LCDPutChar 0066  
          __size_of_LCDPutInst 0066                          status 000FD8                          wtemp6 0039  
               ?_SysInitialize 0001                __initialization 1B40     __end_of_EUSART1_Initialize 1B6A  
                 __end_of_main 1AB4                 __CFG_OSC$HSPLL 000000                         ??_main 0030  
                __activetblptr 000003                      ??_LCDInit 001A                   LCDPutChar@ch 0019  
            __end_of_LCDPutStr 1A3C                     _IntroDelay 17BC                         ?_Clock 0001  
                       ?_Intro 0001             __size_of_InitBBSPI 0012               ___awdiv@dividend 0013  
                 LCDPutInst@ch 0019                         ?_putch 0001                __CFG_BBSIZ$BB2K 000000  
                 LCDPutStr@ptr 001A                      ??_SWdelay 0013                     _Timer1Flag 0037  
               __CFG_XINST$OFF 000000                         ___wmul 1A6E                      ??___awdiv 0017  
            __end_of_TMR1Start 1BC2                 __CFG_STVREN$ON 000000                      ??___awmod 0017  
                    ??___lwdiv 0017                      ??___lwmod 001E                    IntroDelay@i 0015  
                  IntroDelay@n 0016                         clear_0 1B46               ___awdiv@quotient 0019  
              ___awmod@divisor 0015                ___awmod@counter 0017                         _printf 10F8  
                    ??_isdigit 0013         Port_BBSPIInit@port_dir 0016                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
              ??_EUSART1_Write 0013        __size_of_PortInitialize 001E                     __accesstop 0060  
      __end_of__initialization 1B4C           __size_of_count_Clock 0082                ??_SysInitialize 0013  
                ___rparam_used 000001         __size_of_SendByteBBSPI 0050        __size_of_TMR1Initialize 001C  
                __end_of_Clock 18DE                 __pcstackCOMRAM 0001                  __end_of_Intro 19C8  
            __end_of_InitBBSPI 1B8E                   ??_LCDPutChar 0018                   ??_LCDPutInst 0018  
                __end_of_putch 1BBE  __size_of_TMR1InterruptRoutine 0010      __size_of_InterruptManager 14E8  
                  ?_IntroDelay 0001                        ??_Clock 0030                 _Port_BBSPIInit 1B0C  
                      ??_Intro 0030                        ??_putch 0014             __end_of_LCDPutChar 1756  
           __end_of_LCDPutInst 17BC                        ?___wmul 0013             __size_of_set_Clock 008A  
                      ?_printf 001F                     _disp_Clock 1362         __end_of_Port_BBSPIInit 1B26  
                      _LCDInit 1820                  _SendByteBBSPI 1930    __end_of_InterruptInitialize 1BB4  
             WritePort_BBSPI@a 0016                        _SWdelay 1A3C                        __Hparam 0000  
                      __Lparam 0000            __size_of_IntroDelay 0064                        ___awdiv 157A  
                      ___awmod 1680                __size_of___wmul 0026                        ___lwdiv 18DE  
                      ___lwmod 19C8       __size_of_WritePort_BBSPI 001A                   __psmallconst 1000  
                      __pcinit 1B40                        __ramtop 1000                        __ptext0 1A94  
                      __ptext1 1B6A                        __ptext2 1AF0                        __ptext3 1BBE  
                      __ptext4 1AB4                        __ptext5 1BAA                        __ptext6 1B56  
                      __ptext7 1980                        __ptext8 1820                        __ptext9 1B0C  
              __size_of_printf 026A                      _T1CONbits 000FCD                 ?_SendByteBBSPI 0001  
              ?_Port_BBSPIInit 0001                        _dpowers 1001                        _isdigit 1AD2  
             ___awmod@dividend 0013             _EUSART1_Initialize 1B56                        _timeset 0032  
               _PortInitialize 1AB4                      _LCDPutStr 1A0A                 __pintcode_body 1454  
         end_of_initialization 1B4C              __end_of_set_Clock 157A            ?_EUSART1_Initialize 0001  
                      int_func 1454                 _TMR1Initialize 1AF0                      _RCSTAbits 000FAB  
                      printf@c 002F                        printf@f 001F                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE           ??_EUSART1_Initialize 0013  
                    _PORTAbits 000F80                      _PORTBbits 000F81                      _TMR1Start 1BBE  
                  ?_disp_Clock 0001               _InterruptManager 0008                      _TRISAbits 000F92  
                    _TRISBbits 000F93         __end_of_PortInitialize 1AD2                      _TRISCbits 000F94  
                    _TRISFbits 000F97                     ?_LCDPutStr 001A            EUSART1_Write@txData 0013  
          SendByteBBSPI@output 0013         __end_of_TMR1Initialize 1B0C                    printf@width 002D  
               __end_of___wmul 1A94                ??_SendByteBBSPI 0013                     ?_TMR1Start 0001  
                    _InitBBSPI 1B7C                 __end_of_printf 1362                   ??_IntroDelay 0013  
            ??_WritePort_BBSPI 0017            start_initialization 1B40                ?_PortInitialize 0001  
                ??_count_Clock 0030                    putch@txData 0014          __end_of_EUSART1_Write 1BAA  
 __end_of_TMR1InterruptRoutine 1B9E                ?_TMR1Initialize 0001            __size_of_disp_Clock 00F2  
        __end_of_SysInitialize 1B7C             __end_of_IntroDelay 1820                       ??___wmul 0017  
             __CFG_LPT1OSC$OFF 000000                       ??_printf 0023                     ?_InitBBSPI 0001  
                     ?_LCDInit 0001                    __pbssCOMRAM 0030                   _isdigit$1518 0014  
                  ??_LCDPutStr 001C                       ?_SWdelay 0001            __end_of_count_Clock 1680  
             ___lwdiv@dividend 0013              __CFG_CCP2MX$PORTC 000000                      __pintcode 0008  
                     ?___awdiv 0013                       ?___awmod 0013                       ?___lwdiv 0013  
                     ?___lwmod 001A               ??_Port_BBSPIInit 0016                    ??_TMR1Start 0013  
                  __smallconst 1000                       ?_isdigit 0001                 __size_of_Clock 005E  
               __size_of_Intro 0048               ___lwdiv@quotient 0017                 __size_of_putch 000A  
 __size_of_InterruptInitialize 000A                 ___wmul@product 0017                       _LATAbits 000F89  
                     _LATCbits 000F8B                       _LATFbits 000F8E                      _set_Clock 14F0  
     __end_of_InterruptManager 14F0                       _PIE1bits 000F9D                       _PIR1bits 000F9E  
        __CFG_DATABW$DATA16BIT 000000                       _RCONbits 000FD0               __CFG_WDTPS$32768 000000  
            __CFG_ECCPMX$PORTE 000000                     _ADCON1bits 000FC1              ___wmul@multiplier 0013  
                  ??_InitBBSPI 0013             SendByteBBSPI@input 0015                   ??_disp_Clock 0030  
         _TMR1InterruptRoutine 1B8E                     printf@flag 002C                     printf@prec 0029  
             __size_of_LCDInit 0060                    _count_Clock 15FE                     ?_set_Clock 0001  
             __size_of_SWdelay 0032                       __Hrparam 0000             __end_of_disp_Clock 1454  
                     __Lrparam 0000             __CFG_BOREN$SBORDIS 000000                _WritePort_BBSPI 1B26  
             __size_of___awdiv 0084               __size_of___awmod 0070    __size_of_EUSART1_Initialize 0014  
             __size_of___lwdiv 0052               __size_of___lwmod 0042               ??_PortInitialize 0013  
        ?_TMR1InterruptRoutine 0001               __size_of_isdigit 001E                ___lwdiv@divisor 0015  
              ___lwdiv@counter 0019                       __ptext10 1B7C                       __ptext11 17BC  
                     __ptext20 1A6E                       __ptext12 1880                       __ptext21 19C8  
                     __ptext13 15FE                       __ptext30 1A3C                       __ptext22 18DE  
                     __ptext14 14F0                       __ptext23 1680                       __ptext15 1362  
                     __ptext32 1B8E                       __ptext24 157A                       __ptext16 10F8  
                     __ptext25 1A0A                       __ptext17 1BB4                       __ptext26 16F0  
                     __ptext18 1B9E                       __ptext27 1756                       __ptext19 1AD2  
                     __ptext28 1B26                       __ptext29 1930               ??_TMR1Initialize 0013  
                IntroDelay@aux 0017                  __size_of_main 0020                       int$flags 0038  
                   _LCDPutChar 16F0                      printf@val 002A                     _LCDPutInst 1756  
        __end_of_SendByteBBSPI 1980          __CFG_ADDRBW$ADDR20BIT 000000                     _INTCONbits 000FF2  
                     isdigit@c 0015                       intlevel2 0000                   _StateMachine 0030  
             ___lwmod@dividend 001A        __end_of_WritePort_BBSPI 1B40                    ??_set_Clock 0030  
                     printf@ap 0027         ??_TMR1InterruptRoutine 0001            _InterruptInitialize 1BAA  
       __size_of_EUSART1_Write 000C        WritePort_BBSPI@port_add 0017                ___lwmod@divisor 001C  
              ___lwmod@counter 001E         __size_of_SysInitialize 0012           ?_InterruptInitialize 0001  
            ?_InterruptManager 0001  
