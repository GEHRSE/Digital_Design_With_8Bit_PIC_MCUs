

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Apr 27 22:10:35 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41  0000                     
    42                           ; Version 1.45
    43                           ; Generated 16/11/2017 GMT
    44                           ; 
    45                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F45K20 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     
    77                           	psect	idataCOMRAM
    78  0023D6                     __pidataCOMRAM:
    79                           	opt stack 0
    80                           
    81                           ;initializer for _b
    82  0023D6  10                 	db	16
    83  0023D7  49                 	db	73
    84  0023D8  40                 	db	64
    85                           
    86                           ;initializer for _u16_a
    87  0023D9  001F               	dw	31
    88                           
    89                           ;initializer for _Caracter
    90  0023DB  41                 	db	65
    91                           
    92                           	psect	idataBANK0
    93  0023C0                     __pidataBANK0:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _Mensaje
    97  0023C0  44                 	db	68
    98  0023C1  69                 	db	105
    99  0023C2  67                 	db	103
   100  0023C3  69                 	db	105
   101  0023C4  74                 	db	116
   102  0023C5  61                 	db	97
   103  0023C6  6C                 	db	108
   104  0023C7  65                 	db	101
   105  0023C8  73                 	db	115
   106  0023C9  20                 	db	32
   107  0023CA  49                 	db	73
   108  0023CB  49                 	db	73
   109  0023CC  00                 	db	0
   110                           
   111                           	psect	smallconst
   112  000600                     __psmallconst:
   113                           	opt stack 0
   114  000600  00                 	db	0
   115  000601                     _dpowers:
   116                           	opt stack 0
   117  000601  0001               	dw	1
   118  000603  0000               	dw	0
   119  000605  000A               	dw	10
   120  000607  0000               	dw	0
   121  000609  0064               	dw	100
   122  00060B  0000               	dw	0
   123  00060D  03E8               	dw	1000
   124  00060F  0000               	dw	0
   125  000611  2710               	dw	10000
   126  000613  0000               	dw	0
   127  000615  86A0               	dw	34464
   128  000617  0001               	dw	1
   129  000619  4240               	dw	16960
   130  00061B  000F               	dw	15
   131  00061D  9680               	dw	38528
   132  00061F  0098               	dw	152
   133  000621  E100               	dw	57600
   134  000623  05F5               	dw	1525
   135  000625  CA00               	dw	51712
   136  000627  3B9A               	dw	15258
   137  000629                     __end_of_dpowers:
   138                           	opt stack 0
   139  000629                     __powers_:
   140                           	opt stack 0
   141  000629  00                 	db	0
   142  00062A  80                 	db	128
   143  00062B  3F                 	db	63
   144  00062C  00                 	db	0
   145  00062D  20                 	db	32
   146  00062E  41                 	db	65
   147  00062F  00                 	db	0
   148  000630  C8                 	db	200
   149  000631  42                 	db	66
   150  000632  00                 	db	0
   151  000633  7A                 	db	122
   152  000634  44                 	db	68
   153  000635  40                 	db	64
   154  000636  1C                 	db	28
   155  000637  46                 	db	70
   156  000638  50                 	db	80
   157  000639  C3                 	db	195
   158  00063A  47                 	db	71
   159  00063B  24                 	db	36
   160  00063C  74                 	db	116
   161  00063D  49                 	db	73
   162  00063E  97                 	db	151
   163  00063F  18                 	db	24
   164  000640  4B                 	db	75
   165  000641  BC                 	db	188
   166  000642  BE                 	db	190
   167  000643  4C                 	db	76
   168  000644  6B                 	db	107
   169  000645  6E                 	db	110
   170  000646  4E                 	db	78
   171  000647  03                 	db	3
   172  000648  15                 	db	21
   173  000649  50                 	db	80
   174  00064A  79                 	db	121
   175  00064B  AD                 	db	173
   176  00064C  60                 	db	96
   177  00064D  F3                 	db	243
   178  00064E  49                 	db	73
   179  00064F  71                 	db	113
   180  000650                     __end_of__powers_:
   181                           	opt stack 0
   182  000650                     __npowers_:
   183                           	opt stack 0
   184  000650  00                 	db	0
   185  000651  80                 	db	128
   186  000652  3F                 	db	63
   187  000653  CD                 	db	205
   188  000654  CC                 	db	204
   189  000655  3D                 	db	61
   190  000656  D7                 	db	215
   191  000657  23                 	db	35
   192  000658  3C                 	db	60
   193  000659  12                 	db	18
   194  00065A  83                 	db	131
   195  00065B  3A                 	db	58
   196  00065C  B7                 	db	183
   197  00065D  D1                 	db	209
   198  00065E  38                 	db	56
   199  00065F  C6                 	db	198
   200  000660  27                 	db	39
   201  000661  37                 	db	55
   202  000662  38                 	db	56
   203  000663  86                 	db	134
   204  000664  35                 	db	53
   205  000665  C0                 	db	192
   206  000666  D6                 	db	214
   207  000667  33                 	db	51
   208  000668  CC                 	db	204
   209  000669  2B                 	db	43
   210  00066A  32                 	db	50
   211  00066B  70                 	db	112
   212  00066C  89                 	db	137
   213  00066D  30                 	db	48
   214  00066E  E7                 	db	231
   215  00066F  DB                 	db	219
   216  000670  2E                 	db	46
   217  000671  E5                 	db	229
   218  000672  3C                 	db	60
   219  000673  1E                 	db	30
   220  000674  42                 	db	66
   221  000675  A2                 	db	162
   222  000676  0D                 	db	13
   223  000677                     __end_of__npowers_:
   224                           	opt stack 0
   225  0000                     _OSCCONbits	set	4051
   226  0000                     _PORTDbits	set	3971
   227  0000                     _TRISDbits	set	3989
   228  000677                     STR_1:
   229  000677  61                 	db	97	;'a'
   230  000678  3D                 	db	61	;'='
   231  000679  25                 	db	37
   232  00067A  64                 	db	100	;'d'
   233  00067B  2C                 	db	44
   234  00067C  62                 	db	98	;'b'
   235  00067D  3D                 	db	61	;'='
   236  00067E  25                 	db	37
   237  00067F  2E                 	db	46
   238  000680  33                 	db	51	;'3'
   239  000681  66                 	db	102	;'f'
   240  000682  00                 	db	0
   241                           
   242                           ; #config settings
   243  000683  00                 	db	0	; dummy byte at the end
   244  0000                     
   245                           	psect	cinit
   246  0022C2                     __pcinit:
   247                           	opt stack 0
   248  0022C2                     start_initialization:
   249                           	opt stack 0
   250  0022C2                     __initialization:
   251                           	opt stack 0
   252                           
   253                           ; Initialize objects allocated to BANK0 (13 bytes)
   254                           ; load TBLPTR registers with __pidataBANK0
   255  0022C2  0EC0               	movlw	low __pidataBANK0
   256  0022C4  6EF6               	movwf	tblptrl,c
   257  0022C6  0E23               	movlw	high __pidataBANK0
   258  0022C8  6EF7               	movwf	tblptrh,c
   259  0022CA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   260  0022CC  6EF8               	movwf	tblptru,c
   261  0022CE  EE00  F087         	lfsr	0,__pdataBANK0
   262  0022D2  EE10 F00D          	lfsr	1,13
   263  0022D6                     copy_data0:
   264  0022D6  0009               	tblrd		*+
   265  0022D8  CFF5 FFEE          	movff	tablat,postinc0
   266  0022DC  50E5               	movf	postdec1,w,c
   267  0022DE  50E1               	movf	fsr1l,w,c
   268  0022E0  E1FA               	bnz	copy_data0
   269                           
   270                           ; Initialize objects allocated to COMRAM (6 bytes)
   271                           ; load TBLPTR registers with __pidataCOMRAM
   272  0022E2  0ED6               	movlw	low __pidataCOMRAM
   273  0022E4  6EF6               	movwf	tblptrl,c
   274  0022E6  0E23               	movlw	high __pidataCOMRAM
   275  0022E8  6EF7               	movwf	tblptrh,c
   276  0022EA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   277  0022EC  6EF8               	movwf	tblptru,c
   278  0022EE  EE00  F04F         	lfsr	0,__pdataCOMRAM
   279  0022F2  EE10 F006          	lfsr	1,6
   280  0022F6                     copy_data1:
   281  0022F6  0009               	tblrd		*+
   282  0022F8  CFF5 FFEE          	movff	tablat,postinc0
   283  0022FC  50E5               	movf	postdec1,w,c
   284  0022FE  50E1               	movf	fsr1l,w,c
   285  002300  E1FA               	bnz	copy_data1
   286                           
   287                           ; Clear objects allocated to BANK0 (16 bytes)
   288  002302  EE00  F077         	lfsr	0,__pbssBANK0
   289  002306  0E10               	movlw	16
   290  002308                     clear_0:
   291  002308  6AEE               	clrf	postinc0,c
   292  00230A  06E8               	decf	wreg,f,c
   293  00230C  E1FD               	bnz	clear_0
   294  00230E                     end_of_initialization:
   295                           	opt stack 0
   296  00230E                     __end_of__initialization:
   297                           	opt stack 0
   298  00230E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   299  002310  6EF8               	movwf	tblptru,c
   300  002312  0100               	movlb	0
   301  002314  EF9B  F010         	goto	_main	;jump to C main() function
   302                           tblptru	equ	0xFF8
   303                           tblptrh	equ	0xFF7
   304                           tblptrl	equ	0xFF6
   305                           tablat	equ	0xFF5
   306                           postinc0	equ	0xFEE
   307                           wreg	equ	0xFE8
   308                           postdec1	equ	0xFE5
   309                           fsr1l	equ	0xFE1
   310                           
   311                           	psect	dataCOMRAM
   312  00004F                     __pdataCOMRAM:
   313                           	opt stack 0
   314  00004F                     _b:
   315                           	opt stack 0
   316  00004F                     	ds	3
   317  000052                     _u16_a:
   318                           	opt stack 0
   319  000052                     	ds	2
   320  000054                     _Caracter:
   321                           	opt stack 0
   322  000054                     	ds	1
   323                           tblptru	equ	0xFF8
   324                           tblptrh	equ	0xFF7
   325                           tblptrl	equ	0xFF6
   326                           tablat	equ	0xFF5
   327                           postinc0	equ	0xFEE
   328                           wreg	equ	0xFE8
   329                           postdec1	equ	0xFE5
   330                           fsr1l	equ	0xFE1
   331                           
   332                           	psect	bssBANK0
   333  000077                     __pbssBANK0:
   334                           	opt stack 0
   335  000077                     _TextoLCD:
   336                           	opt stack 0
   337  000077                     	ds	16
   338                           tblptru	equ	0xFF8
   339                           tblptrh	equ	0xFF7
   340                           tblptrl	equ	0xFF6
   341                           tablat	equ	0xFF5
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           postdec1	equ	0xFE5
   345                           fsr1l	equ	0xFE1
   346                           
   347                           	psect	dataBANK0
   348  000087                     __pdataBANK0:
   349                           	opt stack 0
   350  000087                     _Mensaje:
   351                           	opt stack 0
   352  000087                     	ds	13
   353                           tblptru	equ	0xFF8
   354                           tblptrh	equ	0xFF7
   355                           tblptrl	equ	0xFF6
   356                           tablat	equ	0xFF5
   357                           postinc0	equ	0xFEE
   358                           wreg	equ	0xFE8
   359                           postdec1	equ	0xFE5
   360                           fsr1l	equ	0xFE1
   361                           
   362                           	psect	cstackBANK0
   363  000060                     __pcstackBANK0:
   364                           	opt stack 0
   365  000060                     _sprintf$843:
   366                           	opt stack 0
   367                           
   368                           ; 3 bytes @ 0x0
   369  000060                     	ds	3
   370  000063                     sprintf@ap:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x3
   374  000063                     	ds	2
   375  000065                     sprintf@flag:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x5
   379  000065                     	ds	2
   380  000067                     sprintf@exp:
   381                           	opt stack 0
   382                           
   383                           ; 2 bytes @ 0x7
   384  000067                     	ds	2
   385  000069                     sprintf@tmpval:
   386                           	opt stack 0
   387                           
   388                           ; 4 bytes @ 0x9
   389  000069                     	ds	4
   390  00006D                     sprintf@val:
   391                           	opt stack 0
   392                           
   393                           ; 4 bytes @ 0xD
   394  00006D                     	ds	4
   395  000071                     sprintf@prec:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x11
   399  000071                     	ds	2
   400  000073                     sprintf@fval:
   401                           	opt stack 0
   402                           
   403                           ; 3 bytes @ 0x13
   404  000073                     	ds	3
   405  000076                     sprintf@c:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x16
   409  000076                     	ds	1
   410                           tblptru	equ	0xFF8
   411                           tblptrh	equ	0xFF7
   412                           tblptrl	equ	0xFF6
   413                           tablat	equ	0xFF5
   414                           postinc0	equ	0xFEE
   415                           wreg	equ	0xFE8
   416                           postdec1	equ	0xFE5
   417                           fsr1l	equ	0xFE1
   418                           
   419                           	psect	cstackCOMRAM
   420  000001                     __pcstackCOMRAM:
   421                           	opt stack 0
   422  000001                     ??_Lcd_Cmd:
   423  000001                     ??_Lcd_Chr_CP:
   424  000001                     ??_isdigit:
   425  000001                     ?___awmod:
   426                           	opt stack 0
   427  000001                     ?___ftpack:
   428                           	opt stack 0
   429  000001                     ?___ftneg:
   430                           	opt stack 0
   431  000001                     ?__tdiv_to_l_:
   432                           	opt stack 0
   433  000001                     ?__div_to_l_:
   434                           	opt stack 0
   435  000001                     ?___lldiv:
   436                           	opt stack 0
   437  000001                     ___awmod@dividend:
   438                           	opt stack 0
   439  000001                     __div_to_l_@f1:
   440                           	opt stack 0
   441  000001                     ___ftpack@arg:
   442                           	opt stack 0
   443  000001                     __tdiv_to_l_@f1:
   444                           	opt stack 0
   445  000001                     ___ftge@ff1:
   446                           	opt stack 0
   447  000001                     ___ftneg@f1:
   448                           	opt stack 0
   449  000001                     ___lldiv@dividend:
   450                           	opt stack 0
   451                           
   452                           ; 4 bytes @ 0x0
   453  000001                     	ds	1
   454  000002                     _isdigit$506:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0x1
   458  000002                     	ds	1
   459  000003                     Lcd_Chr_CP@data:
   460                           	opt stack 0
   461  000003                     Lcd_Cmd@data:
   462                           	opt stack 0
   463  000003                     isdigit@c:
   464                           	opt stack 0
   465  000003                     ___awmod@divisor:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x2
   469  000003                     	ds	1
   470  000004                     ??_Lcd_Init:
   471  000004                     Lcd_Out@x:
   472                           	opt stack 0
   473  000004                     ___ftpack@exp:
   474                           	opt stack 0
   475  000004                     __div_to_l_@f2:
   476                           	opt stack 0
   477  000004                     __tdiv_to_l_@f2:
   478                           	opt stack 0
   479  000004                     ___ftge@ff2:
   480                           	opt stack 0
   481                           
   482                           ; 3 bytes @ 0x3
   483  000004                     	ds	1
   484  000005                     Lcd_Init@data:
   485                           	opt stack 0
   486  000005                     ___awmod@counter:
   487                           	opt stack 0
   488  000005                     ___ftpack@sign:
   489                           	opt stack 0
   490  000005                     Lcd_Out@buffer:
   491                           	opt stack 0
   492  000005                     ___lldiv@divisor:
   493                           	opt stack 0
   494                           
   495                           ; 4 bytes @ 0x4
   496  000005                     	ds	1
   497  000006                     ??___ftpack:
   498  000006                     ___awmod@sign:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x5
   502  000006                     	ds	1
   503  000007                     ??__tdiv_to_l_:
   504  000007                     ??___ftge:
   505  000007                     ?___awdiv:
   506                           	opt stack 0
   507  000007                     Lcd_Out@y:
   508                           	opt stack 0
   509  000007                     ___awdiv@dividend:
   510                           	opt stack 0
   511  000007                     __div_to_l_@quot:
   512                           	opt stack 0
   513                           
   514                           ; 4 bytes @ 0x6
   515  000007                     	ds	1
   516  000008                     Lcd_Out@data:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x7
   520  000008                     	ds	1
   521  000009                     ?___lltoft:
   522                           	opt stack 0
   523  000009                     ___awdiv@divisor:
   524                           	opt stack 0
   525  000009                     ___lldiv@quotient:
   526                           	opt stack 0
   527  000009                     ___lltoft@c:
   528                           	opt stack 0
   529                           
   530                           ; 4 bytes @ 0x8
   531  000009                     	ds	1
   532  00000A                     __tdiv_to_l_@quot:
   533                           	opt stack 0
   534                           
   535                           ; 4 bytes @ 0x9
   536  00000A                     	ds	1
   537  00000B                     ___awdiv@counter:
   538                           	opt stack 0
   539  00000B                     __div_to_l_@cntr:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0xA
   543  00000B                     	ds	1
   544  00000C                     ___awdiv@sign:
   545                           	opt stack 0
   546  00000C                     __div_to_l_@exp1:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0xB
   550  00000C                     	ds	1
   551  00000D                     ??___lltoft:
   552  00000D                     ___lldiv@counter:
   553                           	opt stack 0
   554  00000D                     ___awdiv@quotient:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0xC
   558  00000D                     	ds	1
   559  00000E                     ?___llmod:
   560                           	opt stack 0
   561  00000E                     __tdiv_to_l_@cntr:
   562                           	opt stack 0
   563  00000E                     ___llmod@dividend:
   564                           	opt stack 0
   565                           
   566                           ; 4 bytes @ 0xD
   567  00000E                     	ds	1
   568  00000F                     ?___wmul:
   569                           	opt stack 0
   570  00000F                     __tdiv_to_l_@exp1:
   571                           	opt stack 0
   572  00000F                     ___wmul@multiplier:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0xE
   576  00000F                     	ds	2
   577  000011                     ___lltoft@exp:
   578                           	opt stack 0
   579  000011                     ___wmul@multiplicand:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x10
   583  000011                     	ds	1
   584  000012                     ___llmod@divisor:
   585                           	opt stack 0
   586                           
   587                           ; 4 bytes @ 0x11
   588  000012                     	ds	1
   589  000013                     ___wmul@product:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x12
   593  000013                     	ds	2
   594  000015                     ?___ftmul:
   595                           	opt stack 0
   596  000015                     ___ftmul@f1:
   597                           	opt stack 0
   598                           
   599                           ; 3 bytes @ 0x14
   600  000015                     	ds	1
   601  000016                     ___llmod@counter:
   602                           	opt stack 0
   603                           
   604                           ; 1 bytes @ 0x15
   605  000016                     	ds	2
   606  000018                     ___ftmul@f2:
   607                           	opt stack 0
   608                           
   609                           ; 3 bytes @ 0x17
   610  000018                     	ds	3
   611  00001B                     ??___ftmul:
   612                           
   613                           ; 1 bytes @ 0x1A
   614  00001B                     	ds	3
   615  00001E                     ___ftmul@exp:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x1D
   619  00001E                     	ds	1
   620  00001F                     ___ftmul@f3_as_product:
   621                           	opt stack 0
   622                           
   623                           ; 3 bytes @ 0x1E
   624  00001F                     	ds	3
   625  000022                     ___ftmul@cntr:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0x21
   629  000022                     	ds	1
   630  000023                     ___ftmul@sign:
   631                           	opt stack 0
   632                           
   633                           ; 1 bytes @ 0x22
   634  000023                     	ds	1
   635  000024                     ?_fround:
   636                           	opt stack 0
   637  000024                     ?_scale:
   638                           	opt stack 0
   639                           
   640                           ; 3 bytes @ 0x23
   641  000024                     	ds	3
   642  000027                     _fround$841:
   643                           	opt stack 0
   644  000027                     _scale$842:
   645                           	opt stack 0
   646                           
   647                           ; 3 bytes @ 0x26
   648  000027                     	ds	3
   649  00002A                     scale@scl:
   650                           	opt stack 0
   651  00002A                     _fround$840:
   652                           	opt stack 0
   653                           
   654                           ; 3 bytes @ 0x29
   655  00002A                     	ds	1
   656  00002B                     ?___fttol:
   657                           	opt stack 0
   658  00002B                     ___fttol@f1:
   659                           	opt stack 0
   660                           
   661                           ; 3 bytes @ 0x2A
   662  00002B                     	ds	2
   663  00002D                     fround@prec:
   664                           	opt stack 0
   665                           
   666                           ; 1 bytes @ 0x2C
   667  00002D                     	ds	1
   668  00002E                     ?___ftadd:
   669                           	opt stack 0
   670  00002E                     ___ftadd@f1:
   671                           	opt stack 0
   672                           
   673                           ; 3 bytes @ 0x2D
   674  00002E                     	ds	1
   675  00002F                     ??___fttol:
   676                           
   677                           ; 1 bytes @ 0x2E
   678  00002F                     	ds	2
   679  000031                     ___ftadd@f2:
   680                           	opt stack 0
   681                           
   682                           ; 3 bytes @ 0x30
   683  000031                     	ds	3
   684  000034                     ??___ftadd:
   685  000034                     ___fttol@sign1:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x33
   689  000034                     	ds	1
   690  000035                     ___fttol@lval:
   691                           	opt stack 0
   692                           
   693                           ; 4 bytes @ 0x34
   694  000035                     	ds	2
   695  000037                     ___ftadd@sign:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x36
   699  000037                     	ds	1
   700  000038                     ___ftadd@exp2:
   701                           	opt stack 0
   702                           
   703                           ; 1 bytes @ 0x37
   704  000038                     	ds	1
   705  000039                     ___ftadd@exp1:
   706                           	opt stack 0
   707  000039                     ___fttol@exp1:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0x38
   711  000039                     	ds	1
   712  00003A                     ?___ftsub:
   713                           	opt stack 0
   714  00003A                     ___ftsub@f1:
   715                           	opt stack 0
   716                           
   717                           ; 3 bytes @ 0x39
   718  00003A                     	ds	3
   719  00003D                     ___ftsub@f2:
   720                           	opt stack 0
   721                           
   722                           ; 3 bytes @ 0x3C
   723  00003D                     	ds	3
   724  000040                     ?_sprintf:
   725                           	opt stack 0
   726  000040                     sprintf@sp:
   727                           	opt stack 0
   728                           
   729                           ; 2 bytes @ 0x3F
   730  000040                     	ds	2
   731  000042                     sprintf@f:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0x41
   735  000042                     	ds	7
   736  000049                     ??_sprintf:
   737                           
   738                           ; 1 bytes @ 0x48
   739  000049                     	ds	6
   740  00004F                     tblptru	equ	0xFF8
   741                           tblptrh	equ	0xFF7
   742                           tblptrl	equ	0xFF6
   743                           tablat	equ	0xFF5
   744                           postinc0	equ	0xFEE
   745                           wreg	equ	0xFE8
   746                           postdec1	equ	0xFE5
   747                           fsr1l	equ	0xFE1
   748                           
   749                           ; 1 bytes @ 0x4E
   750 ;;
   751 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   752 ;;
   753 ;; *************** function _main *****************
   754 ;; Defined at:
   755 ;;		line 47 in file "main.c"
   756 ;; Parameters:    Size  Location     Type
   757 ;;		None
   758 ;; Auto vars:     Size  Location     Type
   759 ;;		None
   760 ;; Return value:  Size  Location     Type
   761 ;;                  1    wreg      void 
   762 ;; Registers used:
   763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   764 ;; Tracked objects:
   765 ;;		On entry : 0/0
   766 ;;		On exit  : 0/0
   767 ;;		Unchanged: 0/0
   768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   769 ;;      Params:         0       0       0       0       0       0       0
   770 ;;      Locals:         0       0       0       0       0       0       0
   771 ;;      Temps:          0       0       0       0       0       0       0
   772 ;;      Totals:         0       0       0       0       0       0       0
   773 ;;Total ram usage:        0 bytes
   774 ;; Hardware stack levels required when called:    4
   775 ;; This function calls:
   776 ;;		_Lcd_Chr_CP
   777 ;;		_Lcd_Cmd
   778 ;;		_Lcd_Init
   779 ;;		_Lcd_Out
   780 ;;		_SetUp
   781 ;;		_sprintf
   782 ;; This function is called by:
   783 ;;		Startup code after reset
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           	psect	text0
   788  002136                     __ptext0:
   789                           	opt stack 0
   790  002136                     _main:
   791                           	opt stack 27
   792                           
   793                           ;main.c: 49: SetUp();
   794                           
   795                           ;incstack = 0
   796  002136  ECE7  F011         	call	_SetUp	;wreg free
   797                           
   798                           ;main.c: 51: Lcd_Init();
   799  00213A  EC23  F00D         	call	_Lcd_Init	;wreg free
   800                           
   801                           ;main.c: 52: Lcd_Cmd(12);
   802  00213E  0E0C               	movlw	12
   803  002140  EC8C  F00C         	call	_Lcd_Cmd
   804                           
   805                           ;main.c: 55: Lcd_Out(1,0,Mensaje);
   806  002144  0E00               	movlw	0
   807  002146  6E04               	movwf	Lcd_Out@x,c
   808  002148  0E87               	movlw	low _Mensaje
   809  00214A  6E05               	movwf	Lcd_Out@buffer,c
   810  00214C  0E00               	movlw	high _Mensaje
   811  00214E  6E06               	movwf	Lcd_Out@buffer+1,c
   812  002150  0E01               	movlw	1
   813  002152  EC02  F011         	call	_Lcd_Out
   814                           
   815                           ;main.c: 56: Lcd_Cmd(20);
   816  002156  0E14               	movlw	20
   817  002158  EC8C  F00C         	call	_Lcd_Cmd
   818                           
   819                           ;main.c: 57: Lcd_Chr_CP(Caracter);
   820  00215C  5054               	movf	_Caracter,w,c
   821  00215E  EC57  F00B         	call	_Lcd_Chr_CP
   822                           
   823                           ;main.c: 60: sprintf(TextoLCD,"a=%d,b=%.3f",u16_a,b);
   824  002162  0E77               	movlw	low _TextoLCD
   825  002164  6E40               	movwf	sprintf@sp,c
   826  002166  0E00               	movlw	high _TextoLCD
   827  002168  6E41               	movwf	sprintf@sp+1,c
   828  00216A  0E77               	movlw	low STR_1
   829  00216C  6E42               	movwf	sprintf@f,c
   830  00216E  0E06               	movlw	high STR_1
   831  002170  6E43               	movwf	sprintf@f+1,c
   832  002172  C052  F044         	movff	_u16_a,?_sprintf+4
   833  002176  C053  F045         	movff	_u16_a+1,?_sprintf+5
   834  00217A  C04F  F046         	movff	_b,?_sprintf+6
   835  00217E  C050  F047         	movff	_b+1,?_sprintf+7
   836  002182  C051  F048         	movff	_b+2,?_sprintf+8
   837  002186  EC42  F003         	call	_sprintf	;wreg free
   838                           
   839                           ;main.c: 61: Lcd_Out(2,0,TextoLCD);
   840  00218A  0E00               	movlw	0
   841  00218C  6E04               	movwf	Lcd_Out@x,c
   842  00218E  0E77               	movlw	low _TextoLCD
   843  002190  6E05               	movwf	Lcd_Out@buffer,c
   844  002192  0E00               	movlw	high _TextoLCD
   845  002194  6E06               	movwf	Lcd_Out@buffer+1,c
   846  002196  0E02               	movlw	2
   847  002198  EC02  F011         	call	_Lcd_Out
   848  00219C                     l68:
   849  00219C  D7FF               	goto	l68
   850  00219E                     __end_of_main:
   851                           	opt stack 0
   852                           tblptru	equ	0xFF8
   853                           tblptrh	equ	0xFF7
   854                           tblptrl	equ	0xFF6
   855                           tablat	equ	0xFF5
   856                           postinc0	equ	0xFEE
   857                           wreg	equ	0xFE8
   858                           postdec1	equ	0xFE5
   859                           fsr1l	equ	0xFE1
   860                           
   861 ;; *************** function _sprintf *****************
   862 ;; Defined at:
   863 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
   864 ;; Parameters:    Size  Location     Type
   865 ;;  sp              2   63[COMRAM] PTR unsigned char 
   866 ;;		 -> TextoLCD(16), 
   867 ;;  f               2   65[COMRAM] PTR const unsigned char 
   868 ;;		 -> STR_1(12), 
   869 ;; Auto vars:     Size  Location     Type
   870 ;;  val             4   13[BANK0 ] unsigned long 
   871 ;;  tmpval          4    9[BANK0 ] struct .
   872 ;;  fval            3   19[BANK0 ] struct .
   873 ;;  cp              3    0        PTR const unsigned char 
   874 ;;  prec            2   17[BANK0 ] int 
   875 ;;  exp             2    7[BANK0 ] int 
   876 ;;  flag            2    5[BANK0 ] unsigned short 
   877 ;;  ap              2    3[BANK0 ] PTR void [1]
   878 ;;		 -> ?_sprintf(2), 
   879 ;;  len             2    0        unsigned int 
   880 ;;  width           2    0        int 
   881 ;;  c               1   22[BANK0 ] char 
   882 ;;  d               1    0        unsigned char 
   883 ;; Return value:  Size  Location     Type
   884 ;;                  2   63[COMRAM] int 
   885 ;; Registers used:
   886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   887 ;; Tracked objects:
   888 ;;		On entry : 0/0
   889 ;;		On exit  : 0/0
   890 ;;		Unchanged: 0/0
   891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   892 ;;      Params:         9       0       0       0       0       0       0
   893 ;;      Locals:         0      23       0       0       0       0       0
   894 ;;      Temps:          6       0       0       0       0       0       0
   895 ;;      Totals:        15      23       0       0       0       0       0
   896 ;;Total ram usage:       38 bytes
   897 ;; Hardware stack levels used:    1
   898 ;; Hardware stack levels required when called:    3
   899 ;; This function calls:
   900 ;;		___awdiv
   901 ;;		___ftadd
   902 ;;		___ftge
   903 ;;		___ftmul
   904 ;;		___ftneg
   905 ;;		___ftsub
   906 ;;		___fttol
   907 ;;		___lldiv
   908 ;;		___llmod
   909 ;;		___lltoft
   910 ;;		___wmul
   911 ;;		__div_to_l_
   912 ;;		__tdiv_to_l_
   913 ;;		_fround
   914 ;;		_isdigit
   915 ;;		_scale
   916 ;; This function is called by:
   917 ;;		_main
   918 ;; This function uses a non-reentrant model
   919 ;;
   920                           
   921                           	psect	text1
   922  000684                     __ptext1:
   923                           	opt stack 0
   924  000684                     _sprintf:
   925                           	opt stack 27
   926                           
   927                           ;doprnt.c: 494: va_list ap;
   928                           ;doprnt.c: 499: signed char c;
   929                           ;doprnt.c: 501: int width;
   930                           ;doprnt.c: 504: int prec;
   931                           ;doprnt.c: 508: unsigned short flag;
   932                           ;doprnt.c: 515: char d;
   933                           ;doprnt.c: 516: double fval;
   934                           ;doprnt.c: 517: int exp;
   935                           ;doprnt.c: 523: union {
   936                           ;doprnt.c: 524: unsigned long vd;
   937                           ;doprnt.c: 525: double integ;
   938                           ;doprnt.c: 526: } tmpval;
   939                           ;doprnt.c: 528: unsigned long val;
   940                           ;doprnt.c: 529: unsigned len;
   941                           ;doprnt.c: 530: const char * cp;
   942                           ;doprnt.c: 533: *ap = __va_start();
   943                           
   944                           ;incstack = 0
   945  000684  0E44               	movlw	low (?_sprintf+4)
   946  000686  0100               	movlb	0	; () banked
   947  000688  6F63               	movwf	sprintf@ap& (0+255),b
   948  00068A  0E00               	movlw	high (?_sprintf+4)
   949  00068C  6F64               	movwf	(sprintf@ap+1)& (0+255),b
   950                           
   951                           ;doprnt.c: 536: while(c = *f++) {
   952  00068E  D3F8               	goto	u2780
   953  000690                     
   954                           ; BSR set to: 0
   955                           ;doprnt.c: 538: if(c != '%')
   956                           
   957                           ; BSR set to: 0
   958  000690  0E25               	movlw	37
   959  000692  1976               	xorwf	sprintf@c& (0+255),w,b
   960  000694  B4D8               	btfsc	status,2,c
   961  000696  D009               	goto	l111
   962                           
   963                           ; BSR set to: 0
   964                           ;doprnt.c: 540: {
   965                           ;doprnt.c: 541: ((*sp++ = (c)));
   966  000698  C040  FFD9         	movff	sprintf@sp,fsr2l
   967  00069C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
   968  0006A0  C076  FFDF         	movff	sprintf@c,indf2
   969                           
   970                           ; BSR set to: 0
   971  0006A4  4A40               	infsnz	sprintf@sp,f,c
   972  0006A6  2A41               	incf	sprintf@sp+1,f,c
   973                           
   974                           ;doprnt.c: 542: continue;
   975  0006A8  D3EB               	goto	u2780
   976  0006AA                     l111:
   977                           
   978                           ; BSR set to: 0
   979                           ;doprnt.c: 543: }
   980                           ;doprnt.c: 548: flag = 0;
   981                           
   982                           ; BSR set to: 0
   983  0006AA  0E00               	movlw	0
   984  0006AC  6F66               	movwf	(sprintf@flag+1)& (0+255),b
   985  0006AE  0E00               	movlw	0
   986  0006B0  6F65               	movwf	sprintf@flag& (0+255),b
   987                           
   988                           ; BSR set to: 0
   989                           ;doprnt.c: 611: if(*f == '.') {
   990  0006B2  C042  FFF6         	movff	sprintf@f,tblptrl
   991  0006B6  C043  FFF7         	movff	sprintf@f+1,tblptrh
   992  0006BA                     	if	0	;tblptru may be non-zero
   993  0006BA                     	endif
   994  0006BA                     	if	0	;tblptru may be non-zero
   995  0006BA                     	endif
   996  0006BA  0008               	tblrd		*
   997  0006BC  50F5               	movf	tablat,w,c
   998  0006BE  0A2E               	xorlw	46
   999  0006C0  A4D8               	btfss	status,2,c
  1000  0006C2  D02F               	goto	l112
  1001                           
  1002                           ; BSR set to: 0
  1003                           ;doprnt.c: 612: flag |= 0x4000;
  1004  0006C4  8D66               	bsf	(sprintf@flag+1)& (0+255),6,b
  1005                           
  1006                           ;doprnt.c: 613: f++;
  1007  0006C6  4A42               	infsnz	sprintf@f,f,c
  1008  0006C8  2A43               	incf	sprintf@f+1,f,c
  1009                           
  1010                           ; BSR set to: 0
  1011                           ;doprnt.c: 620: {
  1012                           ;doprnt.c: 621: prec = 0;
  1013  0006CA  0E00               	movlw	0
  1014  0006CC  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1015  0006CE  0E00               	movlw	0
  1016  0006D0  6F71               	movwf	sprintf@prec& (0+255),b
  1017                           
  1018                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1019  0006D2  D01C               	goto	l113
  1020  0006D4                     
  1021                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1022                           
  1023                           ; BSR set to: 0
  1024  0006D4  C071  F00F         	movff	sprintf@prec,___wmul@multiplier
  1025  0006D8  C072  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1026  0006DC  0E00               	movlw	0
  1027  0006DE  6E12               	movwf	___wmul@multiplicand+1,c
  1028  0006E0  0E0A               	movlw	10
  1029  0006E2  6E11               	movwf	___wmul@multiplicand,c
  1030  0006E4  ECAC  F011         	call	___wmul	;wreg free
  1031  0006E8  C042  FFF6         	movff	sprintf@f,tblptrl
  1032  0006EC  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1033  0006F0                     	if	0	;tblptru may be non-zero
  1034  0006F0                     	endif
  1035  0006F0                     	if	0	;tblptru may be non-zero
  1036  0006F0                     	endif
  1037  0006F0  0008               	tblrd		*
  1038  0006F2  50F5               	movf	tablat,w,c
  1039  0006F4  260F               	addwf	?___wmul,f,c
  1040  0006F6  0E00               	movlw	0
  1041  0006F8  2210               	addwfc	?___wmul+1,f,c
  1042  0006FA  0ED0               	movlw	208
  1043  0006FC  240F               	addwf	?___wmul,w,c
  1044  0006FE  0100               	movlb	0	; () banked
  1045  000700  6F71               	movwf	sprintf@prec& (0+255),b
  1046  000702  0EFF               	movlw	255
  1047  000704  2010               	addwfc	?___wmul+1,w,c
  1048  000706  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1049                           
  1050                           ; BSR set to: 0
  1051  000708  4A42               	infsnz	sprintf@f,f,c
  1052  00070A  2A43               	incf	sprintf@f+1,f,c
  1053  00070C                     l113:
  1054                           
  1055                           ; BSR set to: 0
  1056                           
  1057                           ; BSR set to: 0
  1058  00070C  C042  FFF6         	movff	sprintf@f,tblptrl
  1059  000710  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1060  000714                     	if	0	;tblptru may be non-zero
  1061  000714                     	endif
  1062  000714                     	if	0	;tblptru may be non-zero
  1063  000714                     	endif
  1064  000714  0008               	tblrd		*
  1065  000716  50F5               	movf	tablat,w,c
  1066  000718  ECD1  F011         	call	_isdigit
  1067  00071C  A0D8               	btfss	status,0,c
  1068  00071E  D00A               	goto	l117
  1069  000720  D7D9               	goto	l114
  1070  000722                     l112:
  1071                           
  1072                           ;doprnt.c: 626: prec = 0;
  1073  000722  0E00               	movlw	0
  1074  000724  0100               	movlb	0	; () banked
  1075  000726  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1076  000728  0E00               	movlw	0
  1077  00072A  6F71               	movwf	sprintf@prec& (0+255),b
  1078                           
  1079                           ; BSR set to: 0
  1080                           ;doprnt.c: 628: flag |= 0x1000;
  1081  00072C  8966               	bsf	(sprintf@flag+1)& (0+255),4,b
  1082                           
  1083                           ; BSR set to: 0
  1084                           ;doprnt.c: 630: }
  1085                           ;doprnt.c: 635: switch(c = *f++) {
  1086  00072E  D002               	goto	l117
  1087  000730                     
  1088                           ; BSR set to: 0
  1089                           ;doprnt.c: 663: flag |= 0x400;
  1090                           
  1091                           ; BSR set to: 0
  1092  000730  8566               	bsf	(sprintf@flag+1)& (0+255),2,b
  1093                           
  1094                           ; BSR set to: 0
  1095                           ;doprnt.c: 698: case 'i':
  1096                           ;doprnt.c: 699: break;
  1097                           
  1098                           ; BSR set to: 0
  1099                           
  1100                           ;doprnt.c: 697: case 'd':
  1101                           
  1102                           ;doprnt.c: 664: break;
  1103  000732  D017               	goto	l121
  1104  000734                     l117:
  1105                           
  1106                           ; BSR set to: 0
  1107  000734  C042  FFF6         	movff	sprintf@f,tblptrl
  1108  000738  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1109  00073C  4A42               	infsnz	sprintf@f,f,c
  1110  00073E  2A43               	incf	sprintf@f+1,f,c
  1111  000740                     	if	0	;tblptru may be non-zero
  1112  000740                     	endif
  1113  000740                     	if	0	;tblptru may be non-zero
  1114  000740                     	endif
  1115  000740  0008               	tblrd		*
  1116  000742  CFF5 F076          	movff	tablat,sprintf@c
  1117  000746  0100               	movlb	0	; () banked
  1118  000748  5176               	movf	sprintf@c& (0+255),w,b
  1119                           
  1120                           ; Switch size 1, requested type "space"
  1121                           ; Number of cases is 4, Range of values is 0 to 105
  1122                           ; switch strategies available:
  1123                           ; Name         Instructions Cycles
  1124                           ; simple_byte           13     7 (average)
  1125                           ;	Chosen strategy is simple_byte
  1126  00074A  0A00               	xorlw	0	; case 0
  1127  00074C  B4D8               	btfsc	status,2,c
  1128  00074E  D3A5               	goto	u2790
  1129  000750  0A64               	xorlw	100	; case 100
  1130  000752  B4D8               	btfsc	status,2,c
  1131  000754  D006               	goto	l121
  1132  000756  0A02               	xorlw	2	; case 102
  1133  000758  B4D8               	btfsc	status,2,c
  1134  00075A  D7EA               	goto	l120
  1135  00075C  0A0F               	xorlw	15	; case 105
  1136  00075E  A4D8               	btfss	status,2,c
  1137  000760  D38F               	goto	u2780
  1138  000762                     l121:
  1139                           
  1140                           ; BSR set to: 0
  1141                           ;doprnt.c: 825: if(flag & (0x700)) {
  1142                           
  1143                           ; BSR set to: 0
  1144  000762  0E07               	movlw	7
  1145  000764  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  1146  000766  B4D8               	btfsc	status,2,c
  1147  000768  D2C9               	goto	l125
  1148                           
  1149                           ; BSR set to: 0
  1150                           ;doprnt.c: 827: if(flag & 0x1000)
  1151  00076A  A966               	btfss	(sprintf@flag+1)& (0+255),4,b
  1152  00076C  D004               	goto	l126
  1153                           
  1154                           ; BSR set to: 0
  1155                           ;doprnt.c: 829: prec = 6;
  1156  00076E  0E00               	movlw	0
  1157  000770  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1158  000772  0E06               	movlw	6
  1159  000774  6F71               	movwf	sprintf@prec& (0+255),b
  1160  000776                     l126:
  1161                           
  1162                           ; BSR set to: 0
  1163                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1164                           
  1165                           ; BSR set to: 0
  1166  000776  C063  FFD9         	movff	sprintf@ap,fsr2l
  1167  00077A  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  1168  00077E  CFDE F073          	movff	postinc2,sprintf@fval
  1169  000782  CFDE F074          	movff	postinc2,sprintf@fval+1
  1170  000786  CFDD F075          	movff	postdec2,sprintf@fval+2
  1171                           
  1172                           ; BSR set to: 0
  1173  00078A  0E03               	movlw	3
  1174  00078C  2763               	addwf	sprintf@ap& (0+255),f,b
  1175  00078E  0E00               	movlw	0
  1176  000790  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1177                           
  1178                           ; BSR set to: 0
  1179                           ;doprnt.c: 831: if(fval < 0.0) {
  1180  000792  AF75               	btfss	(sprintf@fval+2)& (0+255),7,b
  1181  000794  D011               	goto	l127
  1182                           
  1183                           ; BSR set to: 0
  1184                           ;doprnt.c: 832: fval = -fval;
  1185  000796  C073  F001         	movff	sprintf@fval,___ftneg@f1
  1186  00079A  C074  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1187  00079E  C075  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1188  0007A2  ECBF  F011         	call	___ftneg	;wreg free
  1189  0007A6  C001  F073         	movff	?___ftneg,sprintf@fval
  1190  0007AA  C002  F074         	movff	?___ftneg+1,sprintf@fval+1
  1191  0007AE  C003  F075         	movff	?___ftneg+2,sprintf@fval+2
  1192                           
  1193                           ;doprnt.c: 833: flag |= 0x03;
  1194  0007B2  0E03               	movlw	3
  1195  0007B4  0100               	movlb	0	; () banked
  1196  0007B6  1365               	iorwf	sprintf@flag& (0+255),f,b
  1197  0007B8                     l127:
  1198                           
  1199                           ; BSR set to: 0
  1200                           ;doprnt.c: 834: }
  1201                           ;doprnt.c: 835: exp = 0;
  1202                           
  1203                           ; BSR set to: 0
  1204  0007B8  0E00               	movlw	0
  1205  0007BA  6F68               	movwf	(sprintf@exp+1)& (0+255),b
  1206  0007BC  0E00               	movlw	0
  1207  0007BE  6F67               	movwf	sprintf@exp& (0+255),b
  1208                           
  1209                           ; BSR set to: 0
  1210                           ;doprnt.c: 836: if( fval!=0) {
  1211  0007C0  5173               	movf	sprintf@fval& (0+255),w,b
  1212  0007C2  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1213  0007C4  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1214  0007C6  B4D8               	btfsc	status,2,c
  1215  0007C8  D086               	goto	l132
  1216                           
  1217                           ; BSR set to: 0
  1218                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1219  0007CA  0E82               	movlw	130
  1220  0007CC  6E49               	movwf	??_sprintf& (0+255),c
  1221  0007CE  0EFF               	movlw	255
  1222  0007D0  6E4A               	movwf	(??_sprintf+1)& (0+255),c
  1223  0007D2  C073  F04B         	movff	sprintf@fval,??_sprintf+2
  1224  0007D6  C074  F04C         	movff	sprintf@fval+1,??_sprintf+3
  1225  0007DA  C075  F04D         	movff	sprintf@fval+2,??_sprintf+4
  1226  0007DE  C076  F04E         	movff	sprintf@fval+3,??_sprintf+5
  1227  0007E2  0E10               	movlw	16
  1228  0007E4  D005               	goto	u2490
  1229  0007E6                     u2495:
  1230  0007E6  90D8               	bcf	status,0,c
  1231  0007E8  324E               	rrcf	??_sprintf+5,f,c
  1232  0007EA  324D               	rrcf	??_sprintf+4,f,c
  1233  0007EC  324C               	rrcf	??_sprintf+3,f,c
  1234  0007EE  324B               	rrcf	??_sprintf+2,f,c
  1235  0007F0                     u2490:
  1236  0007F0  2EE8               	decfsz	wreg,f,c
  1237  0007F2  D7F9               	goto	u2495
  1238  0007F4  504B               	movf	??_sprintf+2,w,c
  1239  0007F6  2449               	addwf	??_sprintf,w,c
  1240  0007F8  6F67               	movwf	sprintf@exp& (0+255),b
  1241  0007FA  0E00               	movlw	0
  1242  0007FC  204A               	addwfc	??_sprintf+1,w,c
  1243  0007FE  6F68               	movwf	(sprintf@exp+1)& (0+255),b
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;doprnt.c: 838: exp--;
  1247  000800  0767               	decf	sprintf@exp& (0+255),f,b
  1248  000802  A0D8               	btfss	status,0,c
  1249  000804  0768               	decf	(sprintf@exp+1)& (0+255),f,b
  1250                           
  1251                           ; BSR set to: 0
  1252                           ;doprnt.c: 839: exp *= 3;
  1253  000806  C067  F00F         	movff	sprintf@exp,___wmul@multiplier
  1254  00080A  C068  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1255  00080E  0E00               	movlw	0
  1256  000810  6E12               	movwf	___wmul@multiplicand+1,c
  1257  000812  0E03               	movlw	3
  1258  000814  6E11               	movwf	___wmul@multiplicand,c
  1259  000816  ECAC  F011         	call	___wmul	;wreg free
  1260  00081A  C00F  F067         	movff	?___wmul,sprintf@exp
  1261  00081E  C010  F068         	movff	?___wmul+1,sprintf@exp+1
  1262                           
  1263                           ;doprnt.c: 840: exp /= 10;
  1264  000822  C067  F007         	movff	sprintf@exp,___awdiv@dividend
  1265  000826  C068  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1266  00082A  0E00               	movlw	0
  1267  00082C  6E0A               	movwf	___awdiv@divisor+1,c
  1268  00082E  0E0A               	movlw	10
  1269  000830  6E09               	movwf	___awdiv@divisor,c
  1270  000832  ECE0  F00F         	call	___awdiv	;wreg free
  1271  000836  C007  F067         	movff	?___awdiv,sprintf@exp
  1272  00083A  C008  F068         	movff	?___awdiv+1,sprintf@exp+1
  1273                           
  1274                           ;doprnt.c: 841: if(exp < 0)
  1275  00083E  0100               	movlb	0	; () banked
  1276  000840  AF68               	btfss	(sprintf@exp+1)& (0+255),7,b
  1277  000842  D003               	goto	l129
  1278                           
  1279                           ; BSR set to: 0
  1280                           ;doprnt.c: 842: exp--;
  1281  000844  0767               	decf	sprintf@exp& (0+255),f,b
  1282  000846  A0D8               	btfss	status,0,c
  1283  000848  0768               	decf	(sprintf@exp+1)& (0+255),f,b
  1284  00084A                     l129:
  1285                           
  1286                           ; BSR set to: 0
  1287                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1288                           
  1289                           ; BSR set to: 0
  1290  00084A  5167               	movf	sprintf@exp& (0+255),w,b
  1291  00084C  0800               	sublw	0
  1292  00084E  EC54  F007         	call	_scale
  1293  000852  C024  F069         	movff	?_scale,sprintf@tmpval
  1294  000856  C025  F06A         	movff	?_scale+1,sprintf@tmpval+1
  1295  00085A  C026  F06B         	movff	?_scale+2,sprintf@tmpval+2
  1296                           
  1297                           ;doprnt.c: 847: tmpval.integ *= fval;
  1298  00085E  C069  F015         	movff	sprintf@tmpval,___ftmul@f1
  1299  000862  C06A  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1300  000866  C06B  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1301  00086A  C073  F018         	movff	sprintf@fval,___ftmul@f2
  1302  00086E  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1303  000872  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1304  000876  EC4D  F00E         	call	___ftmul	;wreg free
  1305  00087A  C015  F069         	movff	?___ftmul,sprintf@tmpval
  1306  00087E  C016  F06A         	movff	?___ftmul+1,sprintf@tmpval+1
  1307  000882  C017  F06B         	movff	?___ftmul+2,sprintf@tmpval+2
  1308                           
  1309                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1310  000886  C069  F001         	movff	sprintf@tmpval,___ftge@ff1
  1311  00088A  C06A  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1312  00088E  C06B  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1313  000892  0E00               	movlw	0
  1314  000894  6E04               	movwf	___ftge@ff2,c
  1315  000896  0E80               	movlw	128
  1316  000898  6E05               	movwf	___ftge@ff2+1,c
  1317  00089A  0E3F               	movlw	63
  1318  00089C  6E06               	movwf	___ftge@ff2+2,c
  1319  00089E  EC98  F00F         	call	___ftge	;wreg free
  1320  0008A2  B0D8               	btfsc	status,0,c
  1321  0008A4  D005               	goto	l130
  1322                           
  1323                           ;doprnt.c: 849: exp--;
  1324  0008A6  0100               	movlb	0	; () banked
  1325  0008A8  0767               	decf	sprintf@exp& (0+255),f,b
  1326  0008AA  A0D8               	btfss	status,0,c
  1327  0008AC  0768               	decf	(sprintf@exp+1)& (0+255),f,b
  1328  0008AE  D013               	goto	l132
  1329  0008B0                     l130:
  1330                           
  1331                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1332                           
  1333                           ; BSR set to: 0
  1334  0008B0  C069  F001         	movff	sprintf@tmpval,___ftge@ff1
  1335  0008B4  C06A  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1336  0008B8  C06B  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1337  0008BC  0E00               	movlw	0
  1338  0008BE  6E04               	movwf	___ftge@ff2,c
  1339  0008C0  0E20               	movlw	32
  1340  0008C2  6E05               	movwf	___ftge@ff2+1,c
  1341  0008C4  0E41               	movlw	65
  1342  0008C6  6E06               	movwf	___ftge@ff2+2,c
  1343  0008C8  EC98  F00F         	call	___ftge	;wreg free
  1344  0008CC  A0D8               	btfss	status,0,c
  1345  0008CE  D003               	goto	l132
  1346                           
  1347                           ;doprnt.c: 851: exp++;
  1348  0008D0  0100               	movlb	0	; () banked
  1349  0008D2  4B67               	infsnz	sprintf@exp& (0+255),f,b
  1350  0008D4  2B68               	incf	(sprintf@exp+1)& (0+255),f,b
  1351  0008D6                     l132:
  1352                           
  1353                           ;doprnt.c: 852: }
  1354                           ;doprnt.c: 1112: if(prec <= 12)
  1355                           
  1356                           ; BSR set to: 0
  1357                           
  1358                           ; BSR set to: 0
  1359                           
  1360                           ; BSR set to: 0
  1361  0008D6  0100               	movlb	0	; () banked
  1362  0008D8  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1363  0008DA  D006               	goto	u2530
  1364  0008DC  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  1365  0008DE  E11B               	bnz	l2569
  1366  0008E0  0E0D               	movlw	13
  1367  0008E2  5D71               	subwf	sprintf@prec& (0+255),w,b
  1368  0008E4  B0D8               	btfsc	status,0,c
  1369  0008E6  D017               	goto	l133
  1370  0008E8                     u2530:
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;doprnt.c: 1113: fval += fround(prec);
  1374  0008E8  C073  F02E         	movff	sprintf@fval,___ftadd@f1
  1375  0008EC  C074  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  1376  0008F0  C075  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  1377  0008F4  5171               	movf	sprintf@prec& (0+255),w,b
  1378  0008F6  EC58  F009         	call	_fround
  1379  0008FA  C024  F031         	movff	?_fround,___ftadd@f2
  1380  0008FE  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1381  000902  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1382  000906  EC81  F00A         	call	___ftadd	;wreg free
  1383  00090A  C02E  F073         	movff	?___ftadd,sprintf@fval
  1384  00090E  C02F  F074         	movff	?___ftadd+1,sprintf@fval+1
  1385  000912  C030  F075         	movff	?___ftadd+2,sprintf@fval+2
  1386  000916                     l133:
  1387  000916                     l2569:
  1388                           
  1389                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1390  000916  0100               	movlb	0	; () banked
  1391  000918  BF68               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1392  00091A  D006               	goto	u2540
  1393  00091C  5168               	movf	(sprintf@exp+1)& (0+255),w,b
  1394  00091E  E120               	bnz	l2577
  1395  000920  0E0A               	movlw	10
  1396  000922  5D67               	subwf	sprintf@exp& (0+255),w,b
  1397  000924  B0D8               	btfsc	status,0,c
  1398  000926  D01C               	goto	u2570
  1399  000928                     u2540:
  1400                           
  1401                           ; BSR set to: 0
  1402  000928  5173               	movf	sprintf@fval& (0+255),w,b
  1403  00092A  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1404  00092C  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1405  00092E  B4D8               	btfsc	status,2,c
  1406  000930  D056               	goto	l134
  1407                           
  1408                           ; BSR set to: 0
  1409  000932  C073  F02B         	movff	sprintf@fval,___fttol@f1
  1410  000936  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1411  00093A  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1412  00093E  ECC7  F00E         	call	___fttol	;wreg free
  1413  000942  502B               	movf	?___fttol,w,c
  1414  000944  102C               	iorwf	?___fttol+1,w,c
  1415  000946  102D               	iorwf	?___fttol+2,w,c
  1416  000948  102E               	iorwf	?___fttol+3,w,c
  1417  00094A  A4D8               	btfss	status,2,c
  1418  00094C  D048               	goto	l134
  1419  00094E  0100               	movlb	0	; () banked
  1420  000950  BF68               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1421  000952  D045               	goto	l134
  1422  000954  5168               	movf	(sprintf@exp+1)& (0+255),w,b
  1423  000956  E104               	bnz	l2577
  1424  000958  0E02               	movlw	2
  1425  00095A  5D67               	subwf	sprintf@exp& (0+255),w,b
  1426  00095C  A0D8               	btfss	status,0,c
  1427  00095E  D03F               	goto	l134
  1428  000960                     u2570:
  1429  000960                     l2577:
  1430                           
  1431                           ; BSR set to: 0
  1432                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1433  000960  C069  F001         	movff	sprintf@tmpval,___ftge@ff1
  1434  000964  C06A  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1435  000968  C06B  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1436  00096C  0E70               	movlw	112
  1437  00096E  6E04               	movwf	___ftge@ff2,c
  1438  000970  0E89               	movlw	137
  1439  000972  6E05               	movwf	___ftge@ff2+1,c
  1440  000974  0E40               	movlw	64
  1441  000976  6E06               	movwf	___ftge@ff2+2,c
  1442  000978  EC98  F00F         	call	___ftge	;wreg free
  1443  00097C  B0D8               	btfsc	status,0,c
  1444  00097E  D003               	goto	l137
  1445                           
  1446                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1447  000980  0100               	movlb	0	; () banked
  1448  000982  0EF7               	movlw	247
  1449  000984  D002               	goto	L1
  1450  000986                     l137:
  1451                           
  1452                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1453                           
  1454                           ; BSR set to: 0
  1455  000986  0100               	movlb	0	; () banked
  1456  000988  0EF8               	movlw	248
  1457  00098A                     L1:
  1458  00098A  2767               	addwf	sprintf@exp& (0+255),f,b
  1459  00098C  0EFF               	movlw	255
  1460  00098E  2368               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1461                           
  1462                           ; BSR set to: 0
  1463                           ;doprnt.c: 1124: }
  1464                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1465                           
  1466                           ; BSR set to: 0
  1467  000990  5167               	movf	sprintf@exp& (0+255),w,b
  1468  000992  EC54  F007         	call	_scale
  1469  000996  C024  F069         	movff	?_scale,sprintf@tmpval
  1470  00099A  C025  F06A         	movff	?_scale+1,sprintf@tmpval+1
  1471  00099E  C026  F06B         	movff	?_scale+2,sprintf@tmpval+2
  1472                           
  1473                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1474  0009A2  C073  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  1475  0009A6  C074  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1476  0009AA  C075  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1477  0009AE  C069  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1478  0009B2  C06A  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1479  0009B6  C06B  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1480  0009BA  ECF3  F00B         	call	__tdiv_to_l_	;wreg free
  1481  0009BE  C001  F06D         	movff	?__tdiv_to_l_,sprintf@val
  1482  0009C2  C002  F06E         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1483  0009C6  C003  F06F         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1484  0009CA  C004  F070         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1485                           
  1486                           ;doprnt.c: 1129: fval = 0.0;
  1487  0009CE  0E00               	movlw	0
  1488  0009D0  0100               	movlb	0	; () banked
  1489  0009D2  6F73               	movwf	sprintf@fval& (0+255),b
  1490  0009D4  0E00               	movlw	0
  1491  0009D6  6F74               	movwf	(sprintf@fval+1)& (0+255),b
  1492  0009D8  0E00               	movlw	0
  1493  0009DA  6F75               	movwf	(sprintf@fval+2)& (0+255),b
  1494                           
  1495                           ;doprnt.c: 1130: } else {
  1496  0009DC  D033               	goto	l143
  1497  0009DE                     l134:
  1498                           
  1499                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1500                           
  1501                           ; BSR set to: 0
  1502  0009DE  C073  F02B         	movff	sprintf@fval,___fttol@f1
  1503  0009E2  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1504  0009E6  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1505  0009EA  ECC7  F00E         	call	___fttol	;wreg free
  1506  0009EE  C02B  F06D         	movff	?___fttol,sprintf@val
  1507  0009F2  C02C  F06E         	movff	?___fttol+1,sprintf@val+1
  1508  0009F6  C02D  F06F         	movff	?___fttol+2,sprintf@val+2
  1509  0009FA  C02E  F070         	movff	?___fttol+3,sprintf@val+3
  1510                           
  1511                           ;doprnt.c: 1132: fval -= (double)val;
  1512  0009FE  C073  F03A         	movff	sprintf@fval,___ftsub@f1
  1513  000A02  C074  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  1514  000A06  C075  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  1515  000A0A  C06D  F009         	movff	sprintf@val,___lltoft@c
  1516  000A0E  C06E  F00A         	movff	sprintf@val+1,___lltoft@c+1
  1517  000A12  C06F  F00B         	movff	sprintf@val+2,___lltoft@c+2
  1518  000A16  C070  F00C         	movff	sprintf@val+3,___lltoft@c+3
  1519  000A1A  EC33  F011         	call	___lltoft	;wreg free
  1520  000A1E  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1521  000A22  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1522  000A26  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1523  000A2A  EC8C  F011         	call	___ftsub	;wreg free
  1524  000A2E  C03A  F073         	movff	?___ftsub,sprintf@fval
  1525  000A32  C03B  F074         	movff	?___ftsub+1,sprintf@fval+1
  1526  000A36  C03C  F075         	movff	?___ftsub+2,sprintf@fval+2
  1527                           
  1528                           ;doprnt.c: 1133: exp = 0;
  1529  000A3A  0E00               	movlw	0
  1530  000A3C  0100               	movlb	0	; () banked
  1531  000A3E  6F68               	movwf	(sprintf@exp+1)& (0+255),b
  1532  000A40  0E00               	movlw	0
  1533  000A42  6F67               	movwf	sprintf@exp& (0+255),b
  1534  000A44                     l143:
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;doprnt.c: 1134: }
  1538                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1539                           
  1540                           ; BSR set to: 0
  1541  000A44  0E01               	movlw	1
  1542  000A46  6F76               	movwf	sprintf@c& (0+255),b
  1543  000A48                     l2597:
  1544                           
  1545                           ; BSR set to: 0
  1546  000A48  0E0A               	movlw	10
  1547  000A4A  1976               	xorwf	sprintf@c& (0+255),w,b
  1548  000A4C  B4D8               	btfsc	status,2,c
  1549  000A4E  D018               	goto	u2610
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;doprnt.c: 1137: if(val < dpowers[c])
  1553                           
  1554                           ; BSR set to: 0
  1555                           
  1556                           ; BSR set to: 0
  1557  000A50  5176               	movf	sprintf@c& (0+255),w,b
  1558  000A52  0D04               	mullw	4
  1559  000A54  0E01               	movlw	low _dpowers
  1560  000A56  24F3               	addwf	prodl,w,c
  1561  000A58  6EF6               	movwf	tblptrl,c
  1562  000A5A  0E06               	movlw	high _dpowers
  1563  000A5C  20F4               	addwfc	prodh,w,c
  1564  000A5E  6EF7               	movwf	tblptrh,c
  1565  000A60                     	if	0	;There are less than 3 active tblptr bytes
  1566  000A60                     	endif
  1567  000A60  0009               	tblrd		*+
  1568  000A62  50F5               	movf	tablat,w,c
  1569  000A64  5D6D               	subwf	sprintf@val& (0+255),w,b
  1570  000A66  0009               	tblrd		*+
  1571  000A68  50F5               	movf	tablat,w,c
  1572  000A6A  596E               	subwfb	(sprintf@val+1)& (0+255),w,b
  1573  000A6C  0009               	tblrd		*+
  1574  000A6E  50F5               	movf	tablat,w,c
  1575  000A70  596F               	subwfb	(sprintf@val+2)& (0+255),w,b
  1576  000A72  0009               	tblrd		*+
  1577  000A74  50F5               	movf	tablat,w,c
  1578  000A76  5970               	subwfb	(sprintf@val+3)& (0+255),w,b
  1579  000A78  A0D8               	btfss	status,0,c
  1580  000A7A  D002               	goto	u2610
  1581                           
  1582                           ; BSR set to: 0
  1583                           
  1584                           ; BSR set to: 0
  1585                           
  1586                           ; BSR set to: 0
  1587                           ;doprnt.c: 1138: break;
  1588  000A7C  2B76               	incf	sprintf@c& (0+255),f,b
  1589  000A7E  D7E4               	goto	l2597
  1590  000A80                     u2610:
  1591                           
  1592                           ; BSR set to: 0
  1593                           ;doprnt.c: 1175: {
  1594                           ;doprnt.c: 1188: if(flag & 0x03)
  1595                           
  1596                           ; BSR set to: 0
  1597  000A80  0E03               	movlw	3
  1598  000A82  1565               	andwf	sprintf@flag& (0+255),w,b
  1599  000A84  6E49               	movwf	??_sprintf& (0+255),c
  1600  000A86  0E00               	movlw	0
  1601  000A88  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  1602  000A8A  6E4A               	movwf	(??_sprintf+1)& (0+255),c
  1603  000A8C  5049               	movf	??_sprintf,w,c
  1604  000A8E  104A               	iorwf	??_sprintf+1,w,c
  1605  000A90  B4D8               	btfsc	status,2,c
  1606  000A92  D050               	goto	l148
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1610  000A94  C040  FFD9         	movff	sprintf@sp,fsr2l
  1611  000A98  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1612  000A9C  0E2D               	movlw	45
  1613  000A9E  D047               	goto	L2
  1614  000AA0                     
  1615                           ; BSR set to: 0
  1616                           ;doprnt.c: 1200: {
  1617                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1618                           
  1619                           ; BSR set to: 0
  1620  000AA0  C06D  F001         	movff	sprintf@val,___lldiv@dividend
  1621  000AA4  C06E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1622  000AA8  C06F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1623  000AAC  C070  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1624  000AB0  5176               	movf	sprintf@c& (0+255),w,b
  1625  000AB2  0D04               	mullw	4
  1626  000AB4  0E01               	movlw	low _dpowers
  1627  000AB6  24F3               	addwf	prodl,w,c
  1628  000AB8  6EF6               	movwf	tblptrl,c
  1629  000ABA  0E06               	movlw	high _dpowers
  1630  000ABC  20F4               	addwfc	prodh,w,c
  1631  000ABE  6EF7               	movwf	tblptrh,c
  1632  000AC0                     	if	0	;There are less than 3 active tblptr bytes
  1633  000AC0                     	endif
  1634  000AC0  0009               	tblrd		*+
  1635  000AC2  CFF5 F005          	movff	tablat,___lldiv@divisor
  1636  000AC6  0009               	tblrd		*+
  1637  000AC8  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1638  000ACC  0009               	tblrd		*+
  1639  000ACE  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1640  000AD2  000A               	tblrd		*-
  1641  000AD4  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1642  000AD8  EC22  F010         	call	___lldiv	;wreg free
  1643  000ADC  C001  F069         	movff	?___lldiv,sprintf@tmpval
  1644  000AE0  C002  F06A         	movff	?___lldiv+1,sprintf@tmpval+1
  1645  000AE4  C003  F06B         	movff	?___lldiv+2,sprintf@tmpval+2
  1646  000AE8  C004  F06C         	movff	?___lldiv+3,sprintf@tmpval+3
  1647                           
  1648                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1649  000AEC  C069  F00E         	movff	sprintf@tmpval,___llmod@dividend
  1650  000AF0  C06A  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1651  000AF4  C06B  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1652  000AF8  C06C  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1653  000AFC  0E0A               	movlw	10
  1654  000AFE  6E12               	movwf	___llmod@divisor,c
  1655  000B00  0E00               	movlw	0
  1656  000B02  6E13               	movwf	___llmod@divisor+1,c
  1657  000B04  0E00               	movlw	0
  1658  000B06  6E14               	movwf	___llmod@divisor+2,c
  1659  000B08  0E00               	movlw	0
  1660  000B0A  6E15               	movwf	___llmod@divisor+3,c
  1661  000B0C  ECCF  F010         	call	___llmod	;wreg free
  1662  000B10  C00E  F069         	movff	?___llmod,sprintf@tmpval
  1663  000B14  C00F  F06A         	movff	?___llmod+1,sprintf@tmpval+1
  1664  000B18  C010  F06B         	movff	?___llmod+2,sprintf@tmpval+2
  1665  000B1C  C011  F06C         	movff	?___llmod+3,sprintf@tmpval+3
  1666                           
  1667                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  1668  000B20  0100               	movlb	0	; () banked
  1669  000B22  5169               	movf	sprintf@tmpval& (0+255),w,b
  1670  000B24  0F30               	addlw	48
  1671  000B26  C040  FFD9         	movff	sprintf@sp,fsr2l
  1672  000B2A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1673  000B2E                     L2:
  1674  000B2E  6EDF               	movwf	indf2,c
  1675                           
  1676                           ; BSR set to: 0
  1677  000B30  4A40               	infsnz	sprintf@sp,f,c
  1678  000B32  2A41               	incf	sprintf@sp+1,f,c
  1679  000B34                     l148:
  1680                           
  1681                           ; BSR set to: 0
  1682                           
  1683                           ; BSR set to: 0
  1684  000B34  0776               	decf	sprintf@c& (0+255),f,b
  1685  000B36  2976               	incf	sprintf@c& (0+255),w,b
  1686  000B38  B4D8               	btfsc	status,2,c
  1687  000B3A  D00C               	goto	l151
  1688  000B3C  D7B1               	goto	l149
  1689  000B3E                     l2625:
  1690                           
  1691                           ; BSR set to: 0
  1692                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  1693  000B3E  C040  FFD9         	movff	sprintf@sp,fsr2l
  1694  000B42  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1695  000B46  0E30               	movlw	48
  1696  000B48  6EDF               	movwf	indf2,c
  1697                           
  1698                           ; BSR set to: 0
  1699  000B4A  4A40               	infsnz	sprintf@sp,f,c
  1700  000B4C  2A41               	incf	sprintf@sp+1,f,c
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;doprnt.c: 1209: exp--;
  1704  000B4E  0767               	decf	sprintf@exp& (0+255),f,b
  1705  000B50  A0D8               	btfss	status,0,c
  1706  000B52  0768               	decf	(sprintf@exp+1)& (0+255),f,b
  1707  000B54                     l151:
  1708                           
  1709                           ; BSR set to: 0
  1710                           
  1711                           ; BSR set to: 0
  1712  000B54  BF68               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1713  000B56  D005               	goto	u2640
  1714  000B58  5168               	movf	(sprintf@exp+1)& (0+255),w,b
  1715  000B5A  E1F1               	bnz	l2625
  1716  000B5C  0567               	decf	sprintf@exp& (0+255),w,b
  1717  000B5E  B0D8               	btfsc	status,0,c
  1718  000B60  D7EE               	goto	l152
  1719  000B62                     u2640:
  1720                           
  1721                           ; BSR set to: 0
  1722                           ;doprnt.c: 1210: }
  1723                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1724                           
  1725                           ; BSR set to: 0
  1726  000B62  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1727  000B64  D009               	goto	l154
  1728  000B66  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  1729  000B68  E104               	bnz	u2650
  1730  000B6A  0E09               	movlw	9
  1731  000B6C  5D71               	subwf	sprintf@prec& (0+255),w,b
  1732  000B6E  A0D8               	btfss	status,0,c
  1733  000B70  D003               	goto	l154
  1734  000B72                     u2650:
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1738  000B72  0E08               	movlw	8
  1739  000B74  6F76               	movwf	sprintf@c& (0+255),b
  1740  000B76  D002               	goto	l155
  1741  000B78                     l154:
  1742                           
  1743                           ; BSR set to: 0
  1744                           ;doprnt.c: 1213: else
  1745                           ;doprnt.c: 1214: c = prec;
  1746  000B78  C071  F076         	movff	sprintf@prec,sprintf@c
  1747  000B7C                     l155:
  1748                           
  1749                           ; BSR set to: 0
  1750                           ;doprnt.c: 1215: prec -= c;
  1751                           
  1752                           ; BSR set to: 0
  1753  000B7C  5176               	movf	sprintf@c& (0+255),w,b
  1754  000B7E  5F71               	subwf	sprintf@prec& (0+255),f,b
  1755  000B80  0E00               	movlw	0
  1756  000B82  BF76               	btfsc	sprintf@c& (0+255),7,b
  1757  000B84  0EFF               	movlw	255
  1758  000B86  5B72               	subwfb	(sprintf@prec+1)& (0+255),f,b
  1759                           
  1760                           ; BSR set to: 0
  1761                           ;doprnt.c: 1219: if(c)
  1762  000B88  5176               	movf	sprintf@c& (0+255),w,b
  1763  000B8A  B4D8               	btfsc	status,2,c
  1764  000B8C  D008               	goto	l156
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  1768  000B8E  C040  FFD9         	movff	sprintf@sp,fsr2l
  1769  000B92  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1770  000B96  0E2E               	movlw	46
  1771  000B98  6EDF               	movwf	indf2,c
  1772                           
  1773                           ; BSR set to: 0
  1774  000B9A  4A40               	infsnz	sprintf@sp,f,c
  1775  000B9C  2A41               	incf	sprintf@sp+1,f,c
  1776  000B9E                     l156:
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1780                           
  1781                           ; BSR set to: 0
  1782  000B9E  5176               	movf	sprintf@c& (0+255),w,b
  1783  000BA0  EC54  F007         	call	_scale
  1784  000BA4  C024  F060         	movff	?_scale,_sprintf$843
  1785  000BA8  C025  F061         	movff	?_scale+1,_sprintf$843+1
  1786  000BAC  C026  F062         	movff	?_scale+2,_sprintf$843+2
  1787                           
  1788                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1789  000BB0  C073  F018         	movff	sprintf@fval,___ftmul@f2
  1790  000BB4  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1791  000BB8  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1792  000BBC  C060  F015         	movff	_sprintf$843,___ftmul@f1
  1793  000BC0  C061  F016         	movff	_sprintf$843+1,___ftmul@f1+1
  1794  000BC4  C062  F017         	movff	_sprintf$843+2,___ftmul@f1+2
  1795  000BC8  EC4D  F00E         	call	___ftmul	;wreg free
  1796  000BCC  C015  F02B         	movff	?___ftmul,___fttol@f1
  1797  000BD0  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  1798  000BD4  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  1799  000BD8  ECC7  F00E         	call	___fttol	;wreg free
  1800  000BDC  C02B  F06D         	movff	?___fttol,sprintf@val
  1801  000BE0  C02C  F06E         	movff	?___fttol+1,sprintf@val+1
  1802  000BE4  C02D  F06F         	movff	?___fttol+2,sprintf@val+2
  1803  000BE8  C02E  F070         	movff	?___fttol+3,sprintf@val+3
  1804                           
  1805                           ;doprnt.c: 1228: while(c--) {
  1806  000BEC  D071               	goto	l157
  1807  000BEE                     
  1808                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1809  000BEE  C06D  F001         	movff	sprintf@val,___lldiv@dividend
  1810  000BF2  C06E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1811  000BF6  C06F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1812  000BFA  C070  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1813  000BFE  0100               	movlb	0	; () banked
  1814  000C00  5176               	movf	sprintf@c& (0+255),w,b
  1815  000C02  0D04               	mullw	4
  1816  000C04  0E01               	movlw	low _dpowers
  1817  000C06  24F3               	addwf	prodl,w,c
  1818  000C08  6EF6               	movwf	tblptrl,c
  1819  000C0A  0E06               	movlw	high _dpowers
  1820  000C0C  20F4               	addwfc	prodh,w,c
  1821  000C0E  6EF7               	movwf	tblptrh,c
  1822  000C10                     	if	0	;There are less than 3 active tblptr bytes
  1823  000C10                     	endif
  1824  000C10  0009               	tblrd		*+
  1825  000C12  CFF5 F005          	movff	tablat,___lldiv@divisor
  1826  000C16  0009               	tblrd		*+
  1827  000C18  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1828  000C1C  0009               	tblrd		*+
  1829  000C1E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1830  000C22  000A               	tblrd		*-
  1831  000C24  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1832  000C28  EC22  F010         	call	___lldiv	;wreg free
  1833  000C2C  C001  F069         	movff	?___lldiv,sprintf@tmpval
  1834  000C30  C002  F06A         	movff	?___lldiv+1,sprintf@tmpval+1
  1835  000C34  C003  F06B         	movff	?___lldiv+2,sprintf@tmpval+2
  1836  000C38  C004  F06C         	movff	?___lldiv+3,sprintf@tmpval+3
  1837                           
  1838                           ;doprnt.c: 1230: tmpval.vd %= 10;
  1839  000C3C  C069  F00E         	movff	sprintf@tmpval,___llmod@dividend
  1840  000C40  C06A  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1841  000C44  C06B  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1842  000C48  C06C  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1843  000C4C  0E0A               	movlw	10
  1844  000C4E  6E12               	movwf	___llmod@divisor,c
  1845  000C50  0E00               	movlw	0
  1846  000C52  6E13               	movwf	___llmod@divisor+1,c
  1847  000C54  0E00               	movlw	0
  1848  000C56  6E14               	movwf	___llmod@divisor+2,c
  1849  000C58  0E00               	movlw	0
  1850  000C5A  6E15               	movwf	___llmod@divisor+3,c
  1851  000C5C  ECCF  F010         	call	___llmod	;wreg free
  1852  000C60  C00E  F069         	movff	?___llmod,sprintf@tmpval
  1853  000C64  C00F  F06A         	movff	?___llmod+1,sprintf@tmpval+1
  1854  000C68  C010  F06B         	movff	?___llmod+2,sprintf@tmpval+2
  1855  000C6C  C011  F06C         	movff	?___llmod+3,sprintf@tmpval+3
  1856                           
  1857                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  1858  000C70  0100               	movlb	0	; () banked
  1859  000C72  5169               	movf	sprintf@tmpval& (0+255),w,b
  1860  000C74  0F30               	addlw	48
  1861  000C76  C040  FFD9         	movff	sprintf@sp,fsr2l
  1862  000C7A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1863  000C7E  6EDF               	movwf	indf2,c
  1864                           
  1865                           ; BSR set to: 0
  1866  000C80  4A40               	infsnz	sprintf@sp,f,c
  1867  000C82  2A41               	incf	sprintf@sp+1,f,c
  1868                           
  1869                           ; BSR set to: 0
  1870                           ;doprnt.c: 1232: val %= dpowers[c];
  1871  000C84  C06D  F00E         	movff	sprintf@val,___llmod@dividend
  1872  000C88  C06E  F00F         	movff	sprintf@val+1,___llmod@dividend+1
  1873  000C8C  C06F  F010         	movff	sprintf@val+2,___llmod@dividend+2
  1874  000C90  C070  F011         	movff	sprintf@val+3,___llmod@dividend+3
  1875  000C94  5176               	movf	sprintf@c& (0+255),w,b
  1876  000C96  0D04               	mullw	4
  1877  000C98  0E01               	movlw	low _dpowers
  1878  000C9A  24F3               	addwf	prodl,w,c
  1879  000C9C  6EF6               	movwf	tblptrl,c
  1880  000C9E  0E06               	movlw	high _dpowers
  1881  000CA0  20F4               	addwfc	prodh,w,c
  1882  000CA2  6EF7               	movwf	tblptrh,c
  1883  000CA4                     	if	0	;There are less than 3 active tblptr bytes
  1884  000CA4                     	endif
  1885  000CA4  0009               	tblrd		*+
  1886  000CA6  CFF5 F012          	movff	tablat,___llmod@divisor
  1887  000CAA  0009               	tblrd		*+
  1888  000CAC  CFF5 F013          	movff	tablat,___llmod@divisor+1
  1889  000CB0  0009               	tblrd		*+
  1890  000CB2  CFF5 F014          	movff	tablat,___llmod@divisor+2
  1891  000CB6  000A               	tblrd		*-
  1892  000CB8  CFF5 F015          	movff	tablat,___llmod@divisor+3
  1893  000CBC  ECCF  F010         	call	___llmod	;wreg free
  1894  000CC0  C00E  F06D         	movff	?___llmod,sprintf@val
  1895  000CC4  C00F  F06E         	movff	?___llmod+1,sprintf@val+1
  1896  000CC8  C010  F06F         	movff	?___llmod+2,sprintf@val+2
  1897  000CCC  C011  F070         	movff	?___llmod+3,sprintf@val+3
  1898  000CD0                     l157:
  1899  000CD0  0100               	movlb	0	; () banked
  1900  000CD2  0776               	decf	sprintf@c& (0+255),f,b
  1901  000CD4  2976               	incf	sprintf@c& (0+255),w,b
  1902  000CD6  B4D8               	btfsc	status,2,c
  1903  000CD8  D00C               	goto	l160
  1904  000CDA  D789               	goto	l158
  1905  000CDC                     
  1906                           ; BSR set to: 0
  1907                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  1908                           
  1909                           ; BSR set to: 0
  1910  000CDC  C040  FFD9         	movff	sprintf@sp,fsr2l
  1911  000CE0  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1912  000CE4  0E30               	movlw	48
  1913  000CE6  6EDF               	movwf	indf2,c
  1914                           
  1915                           ; BSR set to: 0
  1916  000CE8  4A40               	infsnz	sprintf@sp,f,c
  1917  000CEA  2A41               	incf	sprintf@sp+1,f,c
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;doprnt.c: 1237: prec--;
  1921  000CEC  0771               	decf	sprintf@prec& (0+255),f,b
  1922  000CEE  A0D8               	btfss	status,0,c
  1923  000CF0  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  1924  000CF2                     l160:
  1925                           
  1926                           ; BSR set to: 0
  1927                           
  1928                           ; BSR set to: 0
  1929  000CF2  5171               	movf	sprintf@prec& (0+255),w,b
  1930  000CF4  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  1931  000CF6  B4D8               	btfsc	status,2,c
  1932  000CF8  D0C3               	goto	u2780
  1933  000CFA  D7F0               	goto	l161
  1934  000CFC                     l125:
  1935                           
  1936                           ; BSR set to: 0
  1937                           ;doprnt.c: 1246: }
  1938                           ;doprnt.c: 1253: {
  1939                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  1940                           
  1941                           ; BSR set to: 0
  1942  000CFC  C063  FFD9         	movff	sprintf@ap,fsr2l
  1943  000D00  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  1944  000D04  CFDE F06D          	movff	postinc2,sprintf@val
  1945  000D08  CFDD F06E          	movff	postdec2,sprintf@val+1
  1946  000D0C  0E00               	movlw	0
  1947  000D0E  BF6E               	btfsc	(sprintf@val+1)& (0+255),7,b
  1948  000D10  0EFF               	movlw	-1
  1949  000D12  6F6F               	movwf	(sprintf@val+2)& (0+255),b
  1950  000D14  6F70               	movwf	(sprintf@val+3)& (0+255),b
  1951                           
  1952                           ; BSR set to: 0
  1953  000D16  0E02               	movlw	2
  1954  000D18  2763               	addwf	sprintf@ap& (0+255),f,b
  1955  000D1A  0E00               	movlw	0
  1956  000D1C  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;doprnt.c: 1261: if((long)val < 0) {
  1960  000D1E  AF70               	btfss	(sprintf@val+3)& (0+255),7,b
  1961  000D20  D00A               	goto	l163
  1962                           
  1963                           ; BSR set to: 0
  1964                           ;doprnt.c: 1262: flag |= 0x03;
  1965  000D22  0E03               	movlw	3
  1966  000D24  1365               	iorwf	sprintf@flag& (0+255),f,b
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;doprnt.c: 1263: val = -val;
  1970  000D26  1F70               	comf	(sprintf@val+3)& (0+255),f,b
  1971  000D28  1F6F               	comf	(sprintf@val+2)& (0+255),f,b
  1972  000D2A  1F6E               	comf	(sprintf@val+1)& (0+255),f,b
  1973  000D2C  6D6D               	negf	sprintf@val& (0+255),b
  1974  000D2E  0E00               	movlw	0
  1975  000D30  236E               	addwfc	(sprintf@val+1)& (0+255),f,b
  1976  000D32  236F               	addwfc	(sprintf@val+2)& (0+255),f,b
  1977  000D34  2370               	addwfc	(sprintf@val+3)& (0+255),f,b
  1978  000D36                     l163:
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;doprnt.c: 1264: }
  1982                           ;doprnt.c: 1266: }
  1983                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  1984                           
  1985                           ; BSR set to: 0
  1986  000D36  5171               	movf	sprintf@prec& (0+255),w,b
  1987  000D38  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  1988  000D3A  A4D8               	btfss	status,2,c
  1989  000D3C  D008               	goto	l164
  1990                           
  1991                           ; BSR set to: 0
  1992  000D3E  516D               	movf	sprintf@val& (0+255),w,b
  1993  000D40  116E               	iorwf	(sprintf@val+1)& (0+255),w,b
  1994  000D42  116F               	iorwf	(sprintf@val+2)& (0+255),w,b
  1995  000D44  1170               	iorwf	(sprintf@val+3)& (0+255),w,b
  1996  000D46  A4D8               	btfss	status,2,c
  1997  000D48  D002               	goto	l164
  1998                           
  1999                           ; BSR set to: 0
  2000                           ;doprnt.c: 1291: prec++;
  2001  000D4A  4B71               	infsnz	sprintf@prec& (0+255),f,b
  2002  000D4C  2B72               	incf	(sprintf@prec+1)& (0+255),f,b
  2003  000D4E                     l164:
  2004                           
  2005                           ; BSR set to: 0
  2006                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2007                           
  2008                           ; BSR set to: 0
  2009  000D4E  0E01               	movlw	1
  2010  000D50  6F76               	movwf	sprintf@c& (0+255),b
  2011  000D52                     l2687:
  2012                           
  2013                           ; BSR set to: 0
  2014  000D52  0E0A               	movlw	10
  2015  000D54  1976               	xorwf	sprintf@c& (0+255),w,b
  2016  000D56  B4D8               	btfsc	status,2,c
  2017  000D58  D018               	goto	u2740
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;doprnt.c: 1306: if(val < dpowers[c])
  2021                           
  2022                           ; BSR set to: 0
  2023                           
  2024                           ; BSR set to: 0
  2025  000D5A  5176               	movf	sprintf@c& (0+255),w,b
  2026  000D5C  0D04               	mullw	4
  2027  000D5E  0E01               	movlw	low _dpowers
  2028  000D60  24F3               	addwf	prodl,w,c
  2029  000D62  6EF6               	movwf	tblptrl,c
  2030  000D64  0E06               	movlw	high _dpowers
  2031  000D66  20F4               	addwfc	prodh,w,c
  2032  000D68  6EF7               	movwf	tblptrh,c
  2033  000D6A                     	if	0	;There are less than 3 active tblptr bytes
  2034  000D6A                     	endif
  2035  000D6A  0009               	tblrd		*+
  2036  000D6C  50F5               	movf	tablat,w,c
  2037  000D6E  5D6D               	subwf	sprintf@val& (0+255),w,b
  2038  000D70  0009               	tblrd		*+
  2039  000D72  50F5               	movf	tablat,w,c
  2040  000D74  596E               	subwfb	(sprintf@val+1)& (0+255),w,b
  2041  000D76  0009               	tblrd		*+
  2042  000D78  50F5               	movf	tablat,w,c
  2043  000D7A  596F               	subwfb	(sprintf@val+2)& (0+255),w,b
  2044  000D7C  0009               	tblrd		*+
  2045  000D7E  50F5               	movf	tablat,w,c
  2046  000D80  5970               	subwfb	(sprintf@val+3)& (0+255),w,b
  2047  000D82  A0D8               	btfss	status,0,c
  2048  000D84  D002               	goto	u2740
  2049                           
  2050                           ; BSR set to: 0
  2051                           
  2052                           ; BSR set to: 0
  2053                           
  2054                           ; BSR set to: 0
  2055                           ;doprnt.c: 1307: break;
  2056  000D86  2B76               	incf	sprintf@c& (0+255),f,b
  2057  000D88  D7E4               	goto	l2687
  2058  000D8A                     u2740:
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;doprnt.c: 1339: if(c < prec)
  2062                           
  2063                           ; BSR set to: 0
  2064  000D8A  0E80               	movlw	128
  2065  000D8C  BF76               	btfsc	sprintf@c& (0+255),7,b
  2066  000D8E  0E7F               	movlw	127
  2067  000D90  6E49               	movwf	??_sprintf& (0+255),c
  2068  000D92  5171               	movf	sprintf@prec& (0+255),w,b
  2069  000D94  5D76               	subwf	sprintf@c& (0+255),w,b
  2070  000D96  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2071  000D98  0A80               	xorlw	128
  2072  000D9A  5849               	subwfb	??_sprintf& (0+255),w,c
  2073  000D9C  B0D8               	btfsc	status,0,c
  2074  000D9E  D003               	goto	l168
  2075                           
  2076                           ; BSR set to: 0
  2077                           ;doprnt.c: 1340: c = prec;
  2078  000DA0  C071  F076         	movff	sprintf@prec,sprintf@c
  2079  000DA4  D010               	goto	l170
  2080  000DA6                     l168:
  2081                           
  2082                           ; BSR set to: 0
  2083                           ;doprnt.c: 1341: else if(prec < c)
  2084                           
  2085                           ; BSR set to: 0
  2086  000DA6  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2087  000DA8  0A80               	xorlw	128
  2088  000DAA  6E49               	movwf	??_sprintf& (0+255),c
  2089  000DAC  5176               	movf	sprintf@c& (0+255),w,b
  2090  000DAE  5D71               	subwf	sprintf@prec& (0+255),w,b
  2091  000DB0  0E80               	movlw	128
  2092  000DB2  BF76               	btfsc	sprintf@c& (0+255),7,b
  2093  000DB4  0E7F               	movlw	127
  2094  000DB6  5849               	subwfb	??_sprintf& (0+255),w,c
  2095  000DB8  B0D8               	btfsc	status,0,c
  2096  000DBA  D005               	goto	l170
  2097                           
  2098                           ; BSR set to: 0
  2099                           ;doprnt.c: 1342: prec = c;
  2100  000DBC  5176               	movf	sprintf@c& (0+255),w,b
  2101  000DBE  6F71               	movwf	sprintf@prec& (0+255),b
  2102  000DC0  6B72               	clrf	(sprintf@prec+1)& (0+255),b
  2103  000DC2  BF71               	btfsc	sprintf@prec& (0+255),7,b
  2104  000DC4  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  2105  000DC6                     l170:
  2106                           
  2107                           ; BSR set to: 0
  2108                           ;doprnt.c: 1422: {
  2109                           ;doprnt.c: 1438: if(flag & 0x03)
  2110                           
  2111                           ; BSR set to: 0
  2112                           
  2113                           ; BSR set to: 0
  2114  000DC6  0E03               	movlw	3
  2115  000DC8  1565               	andwf	sprintf@flag& (0+255),w,b
  2116  000DCA  6E49               	movwf	??_sprintf& (0+255),c
  2117  000DCC  0E00               	movlw	0
  2118  000DCE  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  2119  000DD0  6E4A               	movwf	(??_sprintf+1)& (0+255),c
  2120  000DD2  5049               	movf	??_sprintf,w,c
  2121  000DD4  104A               	iorwf	??_sprintf+1,w,c
  2122  000DD6  B4D8               	btfsc	status,2,c
  2123  000DD8  D04B               	goto	l172
  2124                           
  2125                           ; BSR set to: 0
  2126                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2127  000DDA  C040  FFD9         	movff	sprintf@sp,fsr2l
  2128  000DDE  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2129  000DE2  0E2D               	movlw	45
  2130  000DE4  6EDF               	movwf	indf2,c
  2131  000DE6  D042               	goto	l2717
  2132  000DE8                     l2713:
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;doprnt.c: 1478: {
  2136                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2137  000DE8  C071  F049         	movff	sprintf@prec,??_sprintf
  2138  000DEC  C072  F04A         	movff	sprintf@prec+1,??_sprintf+1
  2139  000DF0  90D8               	bcf	status,0,c
  2140  000DF2  3649               	rlcf	??_sprintf,f,c
  2141  000DF4  364A               	rlcf	??_sprintf+1,f,c
  2142  000DF6  90D8               	bcf	status,0,c
  2143  000DF8  3649               	rlcf	??_sprintf,f,c
  2144  000DFA  364A               	rlcf	??_sprintf+1,f,c
  2145  000DFC  0E01               	movlw	low _dpowers
  2146  000DFE  2449               	addwf	??_sprintf,w,c
  2147  000E00  6EF6               	movwf	tblptrl,c
  2148  000E02  0E06               	movlw	high _dpowers
  2149  000E04  204A               	addwfc	??_sprintf+1,w,c
  2150  000E06  6EF7               	movwf	tblptrh,c
  2151  000E08                     	if	0	;There are less than 3 active tblptr bytes
  2152  000E08                     	endif
  2153  000E08  0009               	tblrd		*+
  2154  000E0A  CFF5 F005          	movff	tablat,___lldiv@divisor
  2155  000E0E  0009               	tblrd		*+
  2156  000E10  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2157  000E14  0009               	tblrd		*+
  2158  000E16  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2159  000E1A  000A               	tblrd		*-
  2160  000E1C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2161  000E20  C06D  F001         	movff	sprintf@val,___lldiv@dividend
  2162  000E24  C06E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2163  000E28  C06F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2164  000E2C  C070  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2165  000E30  EC22  F010         	call	___lldiv	;wreg free
  2166  000E34  C001  F00E         	movff	?___lldiv,___llmod@dividend
  2167  000E38  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  2168  000E3C  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  2169  000E40  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  2170  000E44  0E0A               	movlw	10
  2171  000E46  6E12               	movwf	___llmod@divisor,c
  2172  000E48  0E00               	movlw	0
  2173  000E4A  6E13               	movwf	___llmod@divisor+1,c
  2174  000E4C  0E00               	movlw	0
  2175  000E4E  6E14               	movwf	___llmod@divisor+2,c
  2176  000E50  0E00               	movlw	0
  2177  000E52  6E15               	movwf	___llmod@divisor+3,c
  2178  000E54  ECCF  F010         	call	___llmod	;wreg free
  2179  000E58  500E               	movf	?___llmod,w,c
  2180  000E5A  0F30               	addlw	48
  2181  000E5C  0100               	movlb	0	; () banked
  2182  000E5E  6F76               	movwf	sprintf@c& (0+255),b
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;doprnt.c: 1523: }
  2186                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2187  000E60  C040  FFD9         	movff	sprintf@sp,fsr2l
  2188  000E64  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2189  000E68  C076  FFDF         	movff	sprintf@c,indf2
  2190  000E6C                     l2717:
  2191                           
  2192                           ; BSR set to: 0
  2193  000E6C  4A40               	infsnz	sprintf@sp,f,c
  2194  000E6E  2A41               	incf	sprintf@sp+1,f,c
  2195  000E70                     l172:
  2196                           
  2197                           ; BSR set to: 0
  2198                           
  2199                           ; BSR set to: 0
  2200  000E70  0771               	decf	sprintf@prec& (0+255),f,b
  2201  000E72  A0D8               	btfss	status,0,c
  2202  000E74  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  2203  000E76  2971               	incf	sprintf@prec& (0+255),w,b
  2204  000E78  E1B7               	bnz	l2713
  2205  000E7A  2972               	incf	(sprintf@prec+1)& (0+255),w,b
  2206  000E7C  A4D8               	btfss	status,2,c
  2207  000E7E  D7B4               	goto	l173
  2208  000E80                     u2780:
  2209                           
  2210                           ; BSR set to: 0
  2211                           
  2212                           ; BSR set to: 0
  2213                           
  2214                           ; BSR set to: 0
  2215  000E80  C042  FFF6         	movff	sprintf@f,tblptrl
  2216  000E84  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2217  000E88  4A42               	infsnz	sprintf@f,f,c
  2218  000E8A  2A43               	incf	sprintf@f+1,f,c
  2219  000E8C                     	if	0	;tblptru may be non-zero
  2220  000E8C                     	endif
  2221  000E8C                     	if	0	;tblptru may be non-zero
  2222  000E8C                     	endif
  2223  000E8C  0008               	tblrd		*
  2224  000E8E  CFF5 F076          	movff	tablat,sprintf@c
  2225  000E92  5176               	movf	sprintf@c& (0+255),w,b
  2226  000E94  A4D8               	btfss	status,2,c
  2227  000E96  EF48  F003         	goto	l110
  2228  000E9A                     u2790:
  2229                           
  2230                           ; BSR set to: 0
  2231                           ;doprnt.c: 1538: *sp = 0;
  2232                           
  2233                           ; BSR set to: 0
  2234                           
  2235                           ;doprnt.c: 1525: }
  2236                           ;doprnt.c: 1533: }
  2237                           ;doprnt.c: 1535: alldone:
  2238                           
  2239                           ; BSR set to: 0
  2240  000E9A  C040  FFD9         	movff	sprintf@sp,fsr2l
  2241  000E9E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2242  000EA2  0E00               	movlw	0
  2243  000EA4  6EDF               	movwf	indf2,c
  2244  000EA6  0012               	return	
  2245  000EA8                     __end_of_sprintf:
  2246                           	opt stack 0
  2247                           tblptru	equ	0xFF8
  2248                           tblptrh	equ	0xFF7
  2249                           tblptrl	equ	0xFF6
  2250                           tablat	equ	0xFF5
  2251                           prodh	equ	0xFF4
  2252                           prodl	equ	0xFF3
  2253                           postinc0	equ	0xFEE
  2254                           wreg	equ	0xFE8
  2255                           postdec1	equ	0xFE5
  2256                           fsr1l	equ	0xFE1
  2257                           indf2	equ	0xFDF
  2258                           postinc2	equ	0xFDE
  2259                           postdec2	equ	0xFDD
  2260                           fsr2h	equ	0xFDA
  2261                           fsr2l	equ	0xFD9
  2262                           status	equ	0xFD8
  2263                           
  2264 ;; *************** function _scale *****************
  2265 ;; Defined at:
  2266 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2267 ;; Parameters:    Size  Location     Type
  2268 ;;  scl             1    wreg     char 
  2269 ;; Auto vars:     Size  Location     Type
  2270 ;;  scl             1   41[COMRAM] char 
  2271 ;; Return value:  Size  Location     Type
  2272 ;;                  3   35[COMRAM] char 
  2273 ;; Registers used:
  2274 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2275 ;; Tracked objects:
  2276 ;;		On entry : 0/0
  2277 ;;		On exit  : 0/0
  2278 ;;		Unchanged: 0/0
  2279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2280 ;;      Params:         3       0       0       0       0       0       0
  2281 ;;      Locals:         4       0       0       0       0       0       0
  2282 ;;      Temps:          0       0       0       0       0       0       0
  2283 ;;      Totals:         7       0       0       0       0       0       0
  2284 ;;Total ram usage:        7 bytes
  2285 ;; Hardware stack levels used:    1
  2286 ;; Hardware stack levels required when called:    2
  2287 ;; This function calls:
  2288 ;;		___awdiv
  2289 ;;		___awmod
  2290 ;;		___ftmul
  2291 ;;		___wmul
  2292 ;; This function is called by:
  2293 ;;		_sprintf
  2294 ;; This function uses a non-reentrant model
  2295 ;;
  2296                           
  2297                           	psect	text2
  2298  000EA8                     __ptext2:
  2299                           	opt stack 0
  2300  000EA8                     _scale:
  2301                           	opt stack 27
  2302                           
  2303                           ; BSR set to: 0
  2304                           ;incstack = 0
  2305                           ;scale@scl stored from wreg
  2306  000EA8  6E2A               	movwf	scale@scl,c
  2307                           
  2308                           ;doprnt.c: 428: if(scl < 0) {
  2309  000EAA  AE2A               	btfss	scale@scl,7,c
  2310  000EAC  D101               	goto	l99
  2311                           
  2312                           ;doprnt.c: 429: scl = -scl;
  2313  000EAE  6C2A               	negf	scale@scl,c
  2314                           
  2315                           ;doprnt.c: 430: if(scl>=110)
  2316  000EB0  502A               	movf	scale@scl,w,c
  2317  000EB2  0A80               	xorlw	128
  2318  000EB4  0F12               	addlw	-238
  2319  000EB6  A0D8               	btfss	status,0,c
  2320  000EB8  D091               	goto	l100
  2321                           
  2322                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2323  000EBA  0E00               	movlw	0
  2324  000EBC  6E12               	movwf	___wmul@multiplicand+1,c
  2325  000EBE  0E03               	movlw	3
  2326  000EC0  6E11               	movwf	___wmul@multiplicand,c
  2327  000EC2  0E00               	movlw	0
  2328  000EC4  6E0A               	movwf	___awdiv@divisor+1,c
  2329  000EC6  0E0A               	movlw	10
  2330  000EC8  6E09               	movwf	___awdiv@divisor,c
  2331  000ECA  0E00               	movlw	0
  2332  000ECC  6E04               	movwf	___awmod@divisor+1,c
  2333  000ECE  0E64               	movlw	100
  2334  000ED0  6E03               	movwf	___awmod@divisor,c
  2335  000ED2  502A               	movf	scale@scl,w,c
  2336  000ED4  6E01               	movwf	___awmod@dividend,c
  2337  000ED6  6A02               	clrf	___awmod@dividend+1,c
  2338  000ED8  BE01               	btfsc	___awmod@dividend,7,c
  2339  000EDA  0602               	decf	___awmod@dividend+1,f,c
  2340  000EDC  EC63  F010         	call	___awmod	;wreg free
  2341  000EE0  C001  F007         	movff	?___awmod,___awdiv@dividend
  2342  000EE4  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2343  000EE8  ECE0  F00F         	call	___awdiv	;wreg free
  2344  000EEC  0E09               	movlw	9
  2345  000EEE  2407               	addwf	?___awdiv,w,c
  2346  000EF0  6E0F               	movwf	___wmul@multiplier,c
  2347  000EF2  0E00               	movlw	0
  2348  000EF4  2008               	addwfc	?___awdiv+1,w,c
  2349  000EF6  6E10               	movwf	___wmul@multiplier+1,c
  2350  000EF8  ECAC  F011         	call	___wmul	;wreg free
  2351  000EFC  0E50               	movlw	low __npowers_
  2352  000EFE  240F               	addwf	?___wmul,w,c
  2353  000F00  6EF6               	movwf	tblptrl,c
  2354  000F02  0E06               	movlw	high __npowers_
  2355  000F04  2010               	addwfc	?___wmul+1,w,c
  2356  000F06  6EF7               	movwf	tblptrh,c
  2357  000F08                     	if	0	;There are less than 3 active tblptr bytes
  2358  000F08                     	endif
  2359  000F08  0009               	tblrd		*+
  2360  000F0A  CFF5 F018          	movff	tablat,___ftmul@f2
  2361  000F0E  0009               	tblrd		*+
  2362  000F10  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2363  000F14  000A               	tblrd		*-
  2364  000F16  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2365  000F1A  0E00               	movlw	0
  2366  000F1C  6E0A               	movwf	___awdiv@divisor+1,c
  2367  000F1E  0E64               	movlw	100
  2368  000F20  6E09               	movwf	___awdiv@divisor,c
  2369  000F22  502A               	movf	scale@scl,w,c
  2370  000F24  6E07               	movwf	___awdiv@dividend,c
  2371  000F26  6A08               	clrf	___awdiv@dividend+1,c
  2372  000F28  BE07               	btfsc	___awdiv@dividend,7,c
  2373  000F2A  0608               	decf	___awdiv@dividend+1,f,c
  2374  000F2C  ECE0  F00F         	call	___awdiv	;wreg free
  2375  000F30  0E12               	movlw	18
  2376  000F32  2407               	addwf	?___awdiv,w,c
  2377  000F34  6E0F               	movwf	___wmul@multiplier,c
  2378  000F36  0E00               	movlw	0
  2379  000F38  2008               	addwfc	?___awdiv+1,w,c
  2380  000F3A  6E10               	movwf	___wmul@multiplier+1,c
  2381  000F3C  0E00               	movlw	0
  2382  000F3E  6E12               	movwf	___wmul@multiplicand+1,c
  2383  000F40  0E03               	movlw	3
  2384  000F42  6E11               	movwf	___wmul@multiplicand,c
  2385  000F44  ECAC  F011         	call	___wmul	;wreg free
  2386  000F48  0E50               	movlw	low __npowers_
  2387  000F4A  240F               	addwf	?___wmul,w,c
  2388  000F4C  6EF6               	movwf	tblptrl,c
  2389  000F4E  0E06               	movlw	high __npowers_
  2390  000F50  2010               	addwfc	?___wmul+1,w,c
  2391  000F52  6EF7               	movwf	tblptrh,c
  2392  000F54                     	if	0	;There are less than 3 active tblptr bytes
  2393  000F54                     	endif
  2394  000F54  0009               	tblrd		*+
  2395  000F56  CFF5 F015          	movff	tablat,___ftmul@f1
  2396  000F5A  0009               	tblrd		*+
  2397  000F5C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2398  000F60  000A               	tblrd		*-
  2399  000F62  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2400  000F66  EC4D  F00E         	call	___ftmul	;wreg free
  2401  000F6A  C015  F027         	movff	?___ftmul,_scale$842
  2402  000F6E  C016  F028         	movff	?___ftmul+1,_scale$842+1
  2403  000F72  C017  F029         	movff	?___ftmul+2,_scale$842+2
  2404                           
  2405                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2406  000F76  C027  F015         	movff	_scale$842,___ftmul@f1
  2407  000F7A  C028  F016         	movff	_scale$842+1,___ftmul@f1+1
  2408  000F7E  C029  F017         	movff	_scale$842+2,___ftmul@f1+2
  2409  000F82  0E00               	movlw	0
  2410  000F84  6E12               	movwf	___wmul@multiplicand+1,c
  2411  000F86  0E03               	movlw	3
  2412  000F88  6E11               	movwf	___wmul@multiplicand,c
  2413  000F8A  0E00               	movlw	0
  2414  000F8C  6E04               	movwf	___awmod@divisor+1,c
  2415  000F8E  0E0A               	movlw	10
  2416  000F90  6E03               	movwf	___awmod@divisor,c
  2417  000F92  502A               	movf	scale@scl,w,c
  2418  000F94  6E01               	movwf	___awmod@dividend,c
  2419  000F96  6A02               	clrf	___awmod@dividend+1,c
  2420  000F98  BE01               	btfsc	___awmod@dividend,7,c
  2421  000F9A  0602               	decf	___awmod@dividend+1,f,c
  2422  000F9C  EC63  F010         	call	___awmod	;wreg free
  2423  000FA0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2424  000FA4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2425  000FA8  ECAC  F011         	call	___wmul	;wreg free
  2426  000FAC  0E50               	movlw	low __npowers_
  2427  000FAE  240F               	addwf	?___wmul,w,c
  2428  000FB0  6EF6               	movwf	tblptrl,c
  2429  000FB2  0E06               	movlw	high __npowers_
  2430  000FB4  2010               	addwfc	?___wmul+1,w,c
  2431  000FB6  6EF7               	movwf	tblptrh,c
  2432  000FB8                     	if	0	;There are less than 3 active tblptr bytes
  2433  000FB8                     	endif
  2434  000FB8  0009               	tblrd		*+
  2435  000FBA  CFF5 F018          	movff	tablat,___ftmul@f2
  2436  000FBE  0009               	tblrd		*+
  2437  000FC0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2438  000FC4  000A               	tblrd		*-
  2439  000FC6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2440  000FCA  EC4D  F00E         	call	___ftmul	;wreg free
  2441  000FCE  C015  F024         	movff	?___ftmul,?_scale
  2442  000FD2  C016  F025         	movff	?___ftmul+1,?_scale+1
  2443  000FD6  C017  F026         	movff	?___ftmul+2,?_scale+2
  2444  000FDA  0012               	return	
  2445  000FDC                     l100:
  2446                           
  2447                           ;doprnt.c: 432: else if(scl > 10)
  2448  000FDC  502A               	movf	scale@scl,w,c
  2449  000FDE  0A80               	xorlw	128
  2450  000FE0  0F75               	addlw	-139
  2451  000FE2  A0D8               	btfss	status,0,c
  2452  000FE4  D053               	goto	l103
  2453                           
  2454                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2455  000FE6  0E00               	movlw	0
  2456  000FE8  6E0A               	movwf	___awdiv@divisor+1,c
  2457  000FEA  0E0A               	movlw	10
  2458  000FEC  6E09               	movwf	___awdiv@divisor,c
  2459  000FEE  502A               	movf	scale@scl,w,c
  2460  000FF0  6E07               	movwf	___awdiv@dividend,c
  2461  000FF2  6A08               	clrf	___awdiv@dividend+1,c
  2462  000FF4  BE07               	btfsc	___awdiv@dividend,7,c
  2463  000FF6  0608               	decf	___awdiv@dividend+1,f,c
  2464  000FF8  ECE0  F00F         	call	___awdiv	;wreg free
  2465  000FFC  0E09               	movlw	9
  2466  000FFE  2407               	addwf	?___awdiv,w,c
  2467  001000  6E0F               	movwf	___wmul@multiplier,c
  2468  001002  0E00               	movlw	0
  2469  001004  2008               	addwfc	?___awdiv+1,w,c
  2470  001006  6E10               	movwf	___wmul@multiplier+1,c
  2471  001008  0E00               	movlw	0
  2472  00100A  6E12               	movwf	___wmul@multiplicand+1,c
  2473  00100C  0E03               	movlw	3
  2474  00100E  6E11               	movwf	___wmul@multiplicand,c
  2475  001010  ECAC  F011         	call	___wmul	;wreg free
  2476  001014  0E50               	movlw	low __npowers_
  2477  001016  240F               	addwf	?___wmul,w,c
  2478  001018  6EF6               	movwf	tblptrl,c
  2479  00101A  0E06               	movlw	high __npowers_
  2480  00101C  2010               	addwfc	?___wmul+1,w,c
  2481  00101E  6EF7               	movwf	tblptrh,c
  2482  001020                     	if	0	;There are less than 3 active tblptr bytes
  2483  001020                     	endif
  2484  001020  0009               	tblrd		*+
  2485  001022  CFF5 F015          	movff	tablat,___ftmul@f1
  2486  001026  0009               	tblrd		*+
  2487  001028  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2488  00102C  000A               	tblrd		*-
  2489  00102E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2490  001032  0E00               	movlw	0
  2491  001034  6E12               	movwf	___wmul@multiplicand+1,c
  2492  001036  0E03               	movlw	3
  2493  001038  6E11               	movwf	___wmul@multiplicand,c
  2494  00103A  0E00               	movlw	0
  2495  00103C  6E04               	movwf	___awmod@divisor+1,c
  2496  00103E  0E0A               	movlw	10
  2497  001040  6E03               	movwf	___awmod@divisor,c
  2498  001042  502A               	movf	scale@scl,w,c
  2499  001044  6E01               	movwf	___awmod@dividend,c
  2500  001046  6A02               	clrf	___awmod@dividend+1,c
  2501  001048  BE01               	btfsc	___awmod@dividend,7,c
  2502  00104A  0602               	decf	___awmod@dividend+1,f,c
  2503  00104C  EC63  F010         	call	___awmod	;wreg free
  2504  001050  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2505  001054  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2506  001058  ECAC  F011         	call	___wmul	;wreg free
  2507  00105C  0E50               	movlw	low __npowers_
  2508  00105E  240F               	addwf	?___wmul,w,c
  2509  001060  6EF6               	movwf	tblptrl,c
  2510  001062  0E06               	movlw	high __npowers_
  2511  001064  2010               	addwfc	?___wmul+1,w,c
  2512  001066  6EF7               	movwf	tblptrh,c
  2513  001068                     	if	0	;There are less than 3 active tblptr bytes
  2514  001068                     	endif
  2515  001068  0009               	tblrd		*+
  2516  00106A  CFF5 F018          	movff	tablat,___ftmul@f2
  2517  00106E  0009               	tblrd		*+
  2518  001070  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2519  001074  000A               	tblrd		*-
  2520  001076  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2521  00107A  EC4D  F00E         	call	___ftmul	;wreg free
  2522  00107E  C015  F024         	movff	?___ftmul,?_scale
  2523  001082  C016  F025         	movff	?___ftmul+1,?_scale+1
  2524  001086  C017  F026         	movff	?___ftmul+2,?_scale+2
  2525  00108A  0012               	return	
  2526  00108C                     l103:
  2527                           
  2528                           ;doprnt.c: 434: return _npowers_[scl];
  2529  00108C  502A               	movf	scale@scl,w,c
  2530  00108E  0D03               	mullw	3
  2531  001090  0E50               	movlw	low __npowers_
  2532  001092  24F3               	addwf	prodl,w,c
  2533  001094  6EF6               	movwf	tblptrl,c
  2534  001096  0E06               	movlw	high __npowers_
  2535  001098  20F4               	addwfc	prodh,w,c
  2536  00109A  6EF7               	movwf	tblptrh,c
  2537  00109C                     	if	0	;There are less than 3 active tblptr bytes
  2538  00109C                     	endif
  2539  00109C  0009               	tblrd		*+
  2540  00109E  CFF5 F024          	movff	tablat,?_scale
  2541  0010A2  0009               	tblrd		*+
  2542  0010A4  CFF5 F025          	movff	tablat,?_scale+1
  2543  0010A8  000A               	tblrd		*-
  2544  0010AA  CFF5 F026          	movff	tablat,?_scale+2
  2545  0010AE  0012               	return	
  2546  0010B0                     l99:
  2547                           
  2548                           ;doprnt.c: 435: }
  2549                           ;doprnt.c: 436: if(scl>=110)
  2550  0010B0  502A               	movf	scale@scl,w,c
  2551  0010B2  0A80               	xorlw	128
  2552  0010B4  0F12               	addlw	-238
  2553  0010B6  A0D8               	btfss	status,0,c
  2554  0010B8  D091               	goto	l104
  2555                           
  2556                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2557  0010BA  0E00               	movlw	0
  2558  0010BC  6E12               	movwf	___wmul@multiplicand+1,c
  2559  0010BE  0E03               	movlw	3
  2560  0010C0  6E11               	movwf	___wmul@multiplicand,c
  2561  0010C2  0E00               	movlw	0
  2562  0010C4  6E0A               	movwf	___awdiv@divisor+1,c
  2563  0010C6  0E0A               	movlw	10
  2564  0010C8  6E09               	movwf	___awdiv@divisor,c
  2565  0010CA  0E00               	movlw	0
  2566  0010CC  6E04               	movwf	___awmod@divisor+1,c
  2567  0010CE  0E64               	movlw	100
  2568  0010D0  6E03               	movwf	___awmod@divisor,c
  2569  0010D2  502A               	movf	scale@scl,w,c
  2570  0010D4  6E01               	movwf	___awmod@dividend,c
  2571  0010D6  6A02               	clrf	___awmod@dividend+1,c
  2572  0010D8  BE01               	btfsc	___awmod@dividend,7,c
  2573  0010DA  0602               	decf	___awmod@dividend+1,f,c
  2574  0010DC  EC63  F010         	call	___awmod	;wreg free
  2575  0010E0  C001  F007         	movff	?___awmod,___awdiv@dividend
  2576  0010E4  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2577  0010E8  ECE0  F00F         	call	___awdiv	;wreg free
  2578  0010EC  0E09               	movlw	9
  2579  0010EE  2407               	addwf	?___awdiv,w,c
  2580  0010F0  6E0F               	movwf	___wmul@multiplier,c
  2581  0010F2  0E00               	movlw	0
  2582  0010F4  2008               	addwfc	?___awdiv+1,w,c
  2583  0010F6  6E10               	movwf	___wmul@multiplier+1,c
  2584  0010F8  ECAC  F011         	call	___wmul	;wreg free
  2585  0010FC  0E29               	movlw	low __powers_
  2586  0010FE  240F               	addwf	?___wmul,w,c
  2587  001100  6EF6               	movwf	tblptrl,c
  2588  001102  0E06               	movlw	high __powers_
  2589  001104  2010               	addwfc	?___wmul+1,w,c
  2590  001106  6EF7               	movwf	tblptrh,c
  2591  001108                     	if	0	;There are less than 3 active tblptr bytes
  2592  001108                     	endif
  2593  001108  0009               	tblrd		*+
  2594  00110A  CFF5 F018          	movff	tablat,___ftmul@f2
  2595  00110E  0009               	tblrd		*+
  2596  001110  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2597  001114  000A               	tblrd		*-
  2598  001116  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2599  00111A  0E00               	movlw	0
  2600  00111C  6E0A               	movwf	___awdiv@divisor+1,c
  2601  00111E  0E64               	movlw	100
  2602  001120  6E09               	movwf	___awdiv@divisor,c
  2603  001122  502A               	movf	scale@scl,w,c
  2604  001124  6E07               	movwf	___awdiv@dividend,c
  2605  001126  6A08               	clrf	___awdiv@dividend+1,c
  2606  001128  BE07               	btfsc	___awdiv@dividend,7,c
  2607  00112A  0608               	decf	___awdiv@dividend+1,f,c
  2608  00112C  ECE0  F00F         	call	___awdiv	;wreg free
  2609  001130  0E12               	movlw	18
  2610  001132  2407               	addwf	?___awdiv,w,c
  2611  001134  6E0F               	movwf	___wmul@multiplier,c
  2612  001136  0E00               	movlw	0
  2613  001138  2008               	addwfc	?___awdiv+1,w,c
  2614  00113A  6E10               	movwf	___wmul@multiplier+1,c
  2615  00113C  0E00               	movlw	0
  2616  00113E  6E12               	movwf	___wmul@multiplicand+1,c
  2617  001140  0E03               	movlw	3
  2618  001142  6E11               	movwf	___wmul@multiplicand,c
  2619  001144  ECAC  F011         	call	___wmul	;wreg free
  2620  001148  0E29               	movlw	low __powers_
  2621  00114A  240F               	addwf	?___wmul,w,c
  2622  00114C  6EF6               	movwf	tblptrl,c
  2623  00114E  0E06               	movlw	high __powers_
  2624  001150  2010               	addwfc	?___wmul+1,w,c
  2625  001152  6EF7               	movwf	tblptrh,c
  2626  001154                     	if	0	;There are less than 3 active tblptr bytes
  2627  001154                     	endif
  2628  001154  0009               	tblrd		*+
  2629  001156  CFF5 F015          	movff	tablat,___ftmul@f1
  2630  00115A  0009               	tblrd		*+
  2631  00115C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2632  001160  000A               	tblrd		*-
  2633  001162  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2634  001166  EC4D  F00E         	call	___ftmul	;wreg free
  2635  00116A  C015  F027         	movff	?___ftmul,_scale$842
  2636  00116E  C016  F028         	movff	?___ftmul+1,_scale$842+1
  2637  001172  C017  F029         	movff	?___ftmul+2,_scale$842+2
  2638                           
  2639                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2640  001176  C027  F015         	movff	_scale$842,___ftmul@f1
  2641  00117A  C028  F016         	movff	_scale$842+1,___ftmul@f1+1
  2642  00117E  C029  F017         	movff	_scale$842+2,___ftmul@f1+2
  2643  001182  0E00               	movlw	0
  2644  001184  6E12               	movwf	___wmul@multiplicand+1,c
  2645  001186  0E03               	movlw	3
  2646  001188  6E11               	movwf	___wmul@multiplicand,c
  2647  00118A  0E00               	movlw	0
  2648  00118C  6E04               	movwf	___awmod@divisor+1,c
  2649  00118E  0E0A               	movlw	10
  2650  001190  6E03               	movwf	___awmod@divisor,c
  2651  001192  502A               	movf	scale@scl,w,c
  2652  001194  6E01               	movwf	___awmod@dividend,c
  2653  001196  6A02               	clrf	___awmod@dividend+1,c
  2654  001198  BE01               	btfsc	___awmod@dividend,7,c
  2655  00119A  0602               	decf	___awmod@dividend+1,f,c
  2656  00119C  EC63  F010         	call	___awmod	;wreg free
  2657  0011A0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2658  0011A4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2659  0011A8  ECAC  F011         	call	___wmul	;wreg free
  2660  0011AC  0E29               	movlw	low __powers_
  2661  0011AE  240F               	addwf	?___wmul,w,c
  2662  0011B0  6EF6               	movwf	tblptrl,c
  2663  0011B2  0E06               	movlw	high __powers_
  2664  0011B4  2010               	addwfc	?___wmul+1,w,c
  2665  0011B6  6EF7               	movwf	tblptrh,c
  2666  0011B8                     	if	0	;There are less than 3 active tblptr bytes
  2667  0011B8                     	endif
  2668  0011B8  0009               	tblrd		*+
  2669  0011BA  CFF5 F018          	movff	tablat,___ftmul@f2
  2670  0011BE  0009               	tblrd		*+
  2671  0011C0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2672  0011C4  000A               	tblrd		*-
  2673  0011C6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2674  0011CA  EC4D  F00E         	call	___ftmul	;wreg free
  2675  0011CE  C015  F024         	movff	?___ftmul,?_scale
  2676  0011D2  C016  F025         	movff	?___ftmul+1,?_scale+1
  2677  0011D6  C017  F026         	movff	?___ftmul+2,?_scale+2
  2678  0011DA  0012               	return	
  2679  0011DC                     l104:
  2680                           
  2681                           ;doprnt.c: 438: else if(scl > 10)
  2682  0011DC  502A               	movf	scale@scl,w,c
  2683  0011DE  0A80               	xorlw	128
  2684  0011E0  0F75               	addlw	-139
  2685  0011E2  A0D8               	btfss	status,0,c
  2686  0011E4  D053               	goto	l106
  2687                           
  2688                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2689  0011E6  0E00               	movlw	0
  2690  0011E8  6E0A               	movwf	___awdiv@divisor+1,c
  2691  0011EA  0E0A               	movlw	10
  2692  0011EC  6E09               	movwf	___awdiv@divisor,c
  2693  0011EE  502A               	movf	scale@scl,w,c
  2694  0011F0  6E07               	movwf	___awdiv@dividend,c
  2695  0011F2  6A08               	clrf	___awdiv@dividend+1,c
  2696  0011F4  BE07               	btfsc	___awdiv@dividend,7,c
  2697  0011F6  0608               	decf	___awdiv@dividend+1,f,c
  2698  0011F8  ECE0  F00F         	call	___awdiv	;wreg free
  2699  0011FC  0E09               	movlw	9
  2700  0011FE  2407               	addwf	?___awdiv,w,c
  2701  001200  6E0F               	movwf	___wmul@multiplier,c
  2702  001202  0E00               	movlw	0
  2703  001204  2008               	addwfc	?___awdiv+1,w,c
  2704  001206  6E10               	movwf	___wmul@multiplier+1,c
  2705  001208  0E00               	movlw	0
  2706  00120A  6E12               	movwf	___wmul@multiplicand+1,c
  2707  00120C  0E03               	movlw	3
  2708  00120E  6E11               	movwf	___wmul@multiplicand,c
  2709  001210  ECAC  F011         	call	___wmul	;wreg free
  2710  001214  0E29               	movlw	low __powers_
  2711  001216  240F               	addwf	?___wmul,w,c
  2712  001218  6EF6               	movwf	tblptrl,c
  2713  00121A  0E06               	movlw	high __powers_
  2714  00121C  2010               	addwfc	?___wmul+1,w,c
  2715  00121E  6EF7               	movwf	tblptrh,c
  2716  001220                     	if	0	;There are less than 3 active tblptr bytes
  2717  001220                     	endif
  2718  001220  0009               	tblrd		*+
  2719  001222  CFF5 F015          	movff	tablat,___ftmul@f1
  2720  001226  0009               	tblrd		*+
  2721  001228  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2722  00122C  000A               	tblrd		*-
  2723  00122E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2724  001232  0E00               	movlw	0
  2725  001234  6E12               	movwf	___wmul@multiplicand+1,c
  2726  001236  0E03               	movlw	3
  2727  001238  6E11               	movwf	___wmul@multiplicand,c
  2728  00123A  0E00               	movlw	0
  2729  00123C  6E04               	movwf	___awmod@divisor+1,c
  2730  00123E  0E0A               	movlw	10
  2731  001240  6E03               	movwf	___awmod@divisor,c
  2732  001242  502A               	movf	scale@scl,w,c
  2733  001244  6E01               	movwf	___awmod@dividend,c
  2734  001246  6A02               	clrf	___awmod@dividend+1,c
  2735  001248  BE01               	btfsc	___awmod@dividend,7,c
  2736  00124A  0602               	decf	___awmod@dividend+1,f,c
  2737  00124C  EC63  F010         	call	___awmod	;wreg free
  2738  001250  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2739  001254  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2740  001258  ECAC  F011         	call	___wmul	;wreg free
  2741  00125C  0E29               	movlw	low __powers_
  2742  00125E  240F               	addwf	?___wmul,w,c
  2743  001260  6EF6               	movwf	tblptrl,c
  2744  001262  0E06               	movlw	high __powers_
  2745  001264  2010               	addwfc	?___wmul+1,w,c
  2746  001266  6EF7               	movwf	tblptrh,c
  2747  001268                     	if	0	;There are less than 3 active tblptr bytes
  2748  001268                     	endif
  2749  001268  0009               	tblrd		*+
  2750  00126A  CFF5 F018          	movff	tablat,___ftmul@f2
  2751  00126E  0009               	tblrd		*+
  2752  001270  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2753  001274  000A               	tblrd		*-
  2754  001276  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2755  00127A  EC4D  F00E         	call	___ftmul	;wreg free
  2756  00127E  C015  F024         	movff	?___ftmul,?_scale
  2757  001282  C016  F025         	movff	?___ftmul+1,?_scale+1
  2758  001286  C017  F026         	movff	?___ftmul+2,?_scale+2
  2759  00128A  0012               	return	
  2760  00128C                     l106:
  2761                           
  2762                           ;doprnt.c: 440: return _powers_[scl];
  2763  00128C  502A               	movf	scale@scl,w,c
  2764  00128E  0D03               	mullw	3
  2765  001290  0E29               	movlw	low __powers_
  2766  001292  24F3               	addwf	prodl,w,c
  2767  001294  6EF6               	movwf	tblptrl,c
  2768  001296  0E06               	movlw	high __powers_
  2769  001298  20F4               	addwfc	prodh,w,c
  2770  00129A  6EF7               	movwf	tblptrh,c
  2771  00129C                     	if	0	;There are less than 3 active tblptr bytes
  2772  00129C                     	endif
  2773  00129C  0009               	tblrd		*+
  2774  00129E  CFF5 F024          	movff	tablat,?_scale
  2775  0012A2  0009               	tblrd		*+
  2776  0012A4  CFF5 F025          	movff	tablat,?_scale+1
  2777  0012A8  000A               	tblrd		*-
  2778  0012AA  CFF5 F026          	movff	tablat,?_scale+2
  2779  0012AE  0012               	return	
  2780  0012B0                     __end_of_scale:
  2781                           	opt stack 0
  2782                           tblptru	equ	0xFF8
  2783                           tblptrh	equ	0xFF7
  2784                           tblptrl	equ	0xFF6
  2785                           tablat	equ	0xFF5
  2786                           prodh	equ	0xFF4
  2787                           prodl	equ	0xFF3
  2788                           postinc0	equ	0xFEE
  2789                           wreg	equ	0xFE8
  2790                           postdec1	equ	0xFE5
  2791                           fsr1l	equ	0xFE1
  2792                           indf2	equ	0xFDF
  2793                           postinc2	equ	0xFDE
  2794                           postdec2	equ	0xFDD
  2795                           fsr2h	equ	0xFDA
  2796                           fsr2l	equ	0xFD9
  2797                           status	equ	0xFD8
  2798                           
  2799 ;; *************** function _isdigit *****************
  2800 ;; Defined at:
  2801 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  2802 ;; Parameters:    Size  Location     Type
  2803 ;;  c               1    wreg     unsigned char 
  2804 ;; Auto vars:     Size  Location     Type
  2805 ;;  c               1    2[COMRAM] unsigned char 
  2806 ;; Return value:  Size  Location     Type
  2807 ;;		None               void
  2808 ;; Registers used:
  2809 ;;		wreg, status,2, status,0
  2810 ;; Tracked objects:
  2811 ;;		On entry : 0/0
  2812 ;;		On exit  : 0/0
  2813 ;;		Unchanged: 0/0
  2814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2815 ;;      Params:         0       0       0       0       0       0       0
  2816 ;;      Locals:         2       0       0       0       0       0       0
  2817 ;;      Temps:          1       0       0       0       0       0       0
  2818 ;;      Totals:         3       0       0       0       0       0       0
  2819 ;;Total ram usage:        3 bytes
  2820 ;; Hardware stack levels used:    1
  2821 ;; This function calls:
  2822 ;;		Nothing
  2823 ;; This function is called by:
  2824 ;;		_sprintf
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           	psect	text3
  2829  0023A2                     __ptext3:
  2830                           	opt stack 0
  2831  0023A2                     _isdigit:
  2832                           	opt stack 29
  2833                           
  2834                           ;incstack = 0
  2835                           ;isdigit@c stored from wreg
  2836  0023A2  6E03               	movwf	isdigit@c,c
  2837  0023A4  0E00               	movlw	0
  2838  0023A6  6E02               	movwf	_isdigit$506,c
  2839  0023A8  0E3A               	movlw	58
  2840  0023AA  6003               	cpfslt	isdigit@c,c
  2841  0023AC  D005               	goto	l540
  2842  0023AE  0E2F               	movlw	47
  2843  0023B0  6403               	cpfsgt	isdigit@c,c
  2844  0023B2  D002               	goto	l540
  2845  0023B4  0E01               	movlw	1
  2846  0023B6  6E02               	movwf	_isdigit$506,c
  2847  0023B8                     l540:
  2848  0023B8  C002  F001         	movff	_isdigit$506,??_isdigit
  2849  0023BC  3001               	rrcf	??_isdigit,w,c
  2850  0023BE  0012               	return	
  2851  0023C0                     __end_of_isdigit:
  2852                           	opt stack 0
  2853                           tblptru	equ	0xFF8
  2854                           tblptrh	equ	0xFF7
  2855                           tblptrl	equ	0xFF6
  2856                           tablat	equ	0xFF5
  2857                           prodh	equ	0xFF4
  2858                           prodl	equ	0xFF3
  2859                           postinc0	equ	0xFEE
  2860                           wreg	equ	0xFE8
  2861                           postdec1	equ	0xFE5
  2862                           fsr1l	equ	0xFE1
  2863                           indf2	equ	0xFDF
  2864                           postinc2	equ	0xFDE
  2865                           postdec2	equ	0xFDD
  2866                           fsr2h	equ	0xFDA
  2867                           fsr2l	equ	0xFD9
  2868                           status	equ	0xFD8
  2869                           
  2870 ;; *************** function _fround *****************
  2871 ;; Defined at:
  2872 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2873 ;; Parameters:    Size  Location     Type
  2874 ;;  prec            1    wreg     unsigned char 
  2875 ;; Auto vars:     Size  Location     Type
  2876 ;;  prec            1   44[COMRAM] unsigned char 
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  3   35[COMRAM] unsigned char 
  2879 ;; Registers used:
  2880 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2886 ;;      Params:         3       0       0       0       0       0       0
  2887 ;;      Locals:         7       0       0       0       0       0       0
  2888 ;;      Temps:          0       0       0       0       0       0       0
  2889 ;;      Totals:        10       0       0       0       0       0       0
  2890 ;;Total ram usage:       10 bytes
  2891 ;; Hardware stack levels used:    1
  2892 ;; Hardware stack levels required when called:    2
  2893 ;; This function calls:
  2894 ;;		___awdiv
  2895 ;;		___awmod
  2896 ;;		___ftmul
  2897 ;;		___wmul
  2898 ;; This function is called by:
  2899 ;;		_sprintf
  2900 ;; This function uses a non-reentrant model
  2901 ;;
  2902                           
  2903                           	psect	text4
  2904  0012B0                     __ptext4:
  2905                           	opt stack 0
  2906  0012B0                     _fround:
  2907                           	opt stack 27
  2908                           
  2909                           ;incstack = 0
  2910                           ;fround@prec stored from wreg
  2911  0012B0  6E2D               	movwf	fround@prec,c
  2912                           
  2913                           ;doprnt.c: 413: if(prec>=110)
  2914  0012B2  0E6D               	movlw	109
  2915  0012B4  642D               	cpfsgt	fround@prec,c
  2916  0012B6  D09F               	goto	l93
  2917                           
  2918                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2919  0012B8  0E00               	movlw	0
  2920  0012BA  6E12               	movwf	___wmul@multiplicand+1,c
  2921  0012BC  0E03               	movlw	3
  2922  0012BE  6E11               	movwf	___wmul@multiplicand,c
  2923  0012C0  0E00               	movlw	0
  2924  0012C2  6E0A               	movwf	___awdiv@divisor+1,c
  2925  0012C4  0E0A               	movlw	10
  2926  0012C6  6E09               	movwf	___awdiv@divisor,c
  2927  0012C8  0E00               	movlw	0
  2928  0012CA  6E04               	movwf	___awmod@divisor+1,c
  2929  0012CC  0E64               	movlw	100
  2930  0012CE  6E03               	movwf	___awmod@divisor,c
  2931  0012D0  C02D  F001         	movff	fround@prec,___awmod@dividend
  2932  0012D4  6A02               	clrf	___awmod@dividend+1,c
  2933  0012D6  EC63  F010         	call	___awmod	;wreg free
  2934  0012DA  C001  F007         	movff	?___awmod,___awdiv@dividend
  2935  0012DE  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2936  0012E2  ECE0  F00F         	call	___awdiv	;wreg free
  2937  0012E6  0E09               	movlw	9
  2938  0012E8  2407               	addwf	?___awdiv,w,c
  2939  0012EA  6E0F               	movwf	___wmul@multiplier,c
  2940  0012EC  0E00               	movlw	0
  2941  0012EE  2008               	addwfc	?___awdiv+1,w,c
  2942  0012F0  6E10               	movwf	___wmul@multiplier+1,c
  2943  0012F2  ECAC  F011         	call	___wmul	;wreg free
  2944  0012F6  0E50               	movlw	low __npowers_
  2945  0012F8  240F               	addwf	?___wmul,w,c
  2946  0012FA  6EF6               	movwf	tblptrl,c
  2947  0012FC  0E06               	movlw	high __npowers_
  2948  0012FE  2010               	addwfc	?___wmul+1,w,c
  2949  001300  6EF7               	movwf	tblptrh,c
  2950  001302                     	if	0	;There are less than 3 active tblptr bytes
  2951  001302                     	endif
  2952  001302  0009               	tblrd		*+
  2953  001304  CFF5 F018          	movff	tablat,___ftmul@f2
  2954  001308  0009               	tblrd		*+
  2955  00130A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2956  00130E  000A               	tblrd		*-
  2957  001310  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2958  001314  0E00               	movlw	0
  2959  001316  6E0A               	movwf	___awdiv@divisor+1,c
  2960  001318  0E64               	movlw	100
  2961  00131A  6E09               	movwf	___awdiv@divisor,c
  2962  00131C  C02D  F007         	movff	fround@prec,___awdiv@dividend
  2963  001320  6A08               	clrf	___awdiv@dividend+1,c
  2964  001322  ECE0  F00F         	call	___awdiv	;wreg free
  2965  001326  0E12               	movlw	18
  2966  001328  2407               	addwf	?___awdiv,w,c
  2967  00132A  6E0F               	movwf	___wmul@multiplier,c
  2968  00132C  0E00               	movlw	0
  2969  00132E  2008               	addwfc	?___awdiv+1,w,c
  2970  001330  6E10               	movwf	___wmul@multiplier+1,c
  2971  001332  0E00               	movlw	0
  2972  001334  6E12               	movwf	___wmul@multiplicand+1,c
  2973  001336  0E03               	movlw	3
  2974  001338  6E11               	movwf	___wmul@multiplicand,c
  2975  00133A  ECAC  F011         	call	___wmul	;wreg free
  2976  00133E  0E50               	movlw	low __npowers_
  2977  001340  240F               	addwf	?___wmul,w,c
  2978  001342  6EF6               	movwf	tblptrl,c
  2979  001344  0E06               	movlw	high __npowers_
  2980  001346  2010               	addwfc	?___wmul+1,w,c
  2981  001348  6EF7               	movwf	tblptrh,c
  2982  00134A                     	if	0	;There are less than 3 active tblptr bytes
  2983  00134A                     	endif
  2984  00134A  0009               	tblrd		*+
  2985  00134C  CFF5 F015          	movff	tablat,___ftmul@f1
  2986  001350  0009               	tblrd		*+
  2987  001352  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2988  001356  000A               	tblrd		*-
  2989  001358  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2990  00135C  EC4D  F00E         	call	___ftmul	;wreg free
  2991  001360  C015  F02A         	movff	?___ftmul,_fround$840
  2992  001364  C016  F02B         	movff	?___ftmul+1,_fround$840+1
  2993  001368  C017  F02C         	movff	?___ftmul+2,_fround$840+2
  2994                           
  2995                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2996  00136C  0E00               	movlw	0
  2997  00136E  6E12               	movwf	___wmul@multiplicand+1,c
  2998  001370  0E03               	movlw	3
  2999  001372  6E11               	movwf	___wmul@multiplicand,c
  3000  001374  0E00               	movlw	0
  3001  001376  6E04               	movwf	___awmod@divisor+1,c
  3002  001378  0E0A               	movlw	10
  3003  00137A  6E03               	movwf	___awmod@divisor,c
  3004  00137C  C02D  F001         	movff	fround@prec,___awmod@dividend
  3005  001380  6A02               	clrf	___awmod@dividend+1,c
  3006  001382  EC63  F010         	call	___awmod	;wreg free
  3007  001386  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3008  00138A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3009  00138E  ECAC  F011         	call	___wmul	;wreg free
  3010  001392  0E50               	movlw	low __npowers_
  3011  001394  240F               	addwf	?___wmul,w,c
  3012  001396  6EF6               	movwf	tblptrl,c
  3013  001398  0E06               	movlw	high __npowers_
  3014  00139A  2010               	addwfc	?___wmul+1,w,c
  3015  00139C  6EF7               	movwf	tblptrh,c
  3016  00139E                     	if	0	;There are less than 3 active tblptr bytes
  3017  00139E                     	endif
  3018  00139E  0009               	tblrd		*+
  3019  0013A0  CFF5 F018          	movff	tablat,___ftmul@f2
  3020  0013A4  0009               	tblrd		*+
  3021  0013A6  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3022  0013AA  000A               	tblrd		*-
  3023  0013AC  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3024  0013B0  C02A  F015         	movff	_fround$840,___ftmul@f1
  3025  0013B4  C02B  F016         	movff	_fround$840+1,___ftmul@f1+1
  3026  0013B8  C02C  F017         	movff	_fround$840+2,___ftmul@f1+2
  3027  0013BC  EC4D  F00E         	call	___ftmul	;wreg free
  3028  0013C0  C015  F027         	movff	?___ftmul,_fround$841
  3029  0013C4  C016  F028         	movff	?___ftmul+1,_fround$841+1
  3030  0013C8  C017  F029         	movff	?___ftmul+2,_fround$841+2
  3031                           
  3032                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3033  0013CC  C027  F015         	movff	_fround$841,___ftmul@f1
  3034  0013D0  C028  F016         	movff	_fround$841+1,___ftmul@f1+1
  3035  0013D4  C029  F017         	movff	_fround$841+2,___ftmul@f1+2
  3036  0013D8  0E00               	movlw	0
  3037  0013DA  6E18               	movwf	___ftmul@f2,c
  3038  0013DC  0E00               	movlw	0
  3039  0013DE  6E19               	movwf	___ftmul@f2+1,c
  3040  0013E0  0E3F               	movlw	63
  3041  0013E2  6E1A               	movwf	___ftmul@f2+2,c
  3042  0013E4  EC4D  F00E         	call	___ftmul	;wreg free
  3043  0013E8  C015  F024         	movff	?___ftmul,?_fround
  3044  0013EC  C016  F025         	movff	?___ftmul+1,?_fround+1
  3045  0013F0  C017  F026         	movff	?___ftmul+2,?_fround+2
  3046  0013F4  0012               	return	
  3047  0013F6                     l93:
  3048                           
  3049                           ;doprnt.c: 415: else if(prec > 10)
  3050  0013F6  0E0A               	movlw	10
  3051  0013F8  642D               	cpfsgt	fround@prec,c
  3052  0013FA  D063               	goto	l96
  3053                           
  3054                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3055  0013FC  0E00               	movlw	0
  3056  0013FE  6E12               	movwf	___wmul@multiplicand+1,c
  3057  001400  0E03               	movlw	3
  3058  001402  6E11               	movwf	___wmul@multiplicand,c
  3059  001404  0E00               	movlw	0
  3060  001406  6E04               	movwf	___awmod@divisor+1,c
  3061  001408  0E0A               	movlw	10
  3062  00140A  6E03               	movwf	___awmod@divisor,c
  3063  00140C  C02D  F001         	movff	fround@prec,___awmod@dividend
  3064  001410  6A02               	clrf	___awmod@dividend+1,c
  3065  001412  EC63  F010         	call	___awmod	;wreg free
  3066  001416  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3067  00141A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3068  00141E  ECAC  F011         	call	___wmul	;wreg free
  3069  001422  0E50               	movlw	low __npowers_
  3070  001424  240F               	addwf	?___wmul,w,c
  3071  001426  6EF6               	movwf	tblptrl,c
  3072  001428  0E06               	movlw	high __npowers_
  3073  00142A  2010               	addwfc	?___wmul+1,w,c
  3074  00142C  6EF7               	movwf	tblptrh,c
  3075  00142E                     	if	0	;There are less than 3 active tblptr bytes
  3076  00142E                     	endif
  3077  00142E  0009               	tblrd		*+
  3078  001430  CFF5 F018          	movff	tablat,___ftmul@f2
  3079  001434  0009               	tblrd		*+
  3080  001436  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3081  00143A  000A               	tblrd		*-
  3082  00143C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3083  001440  0E00               	movlw	0
  3084  001442  6E0A               	movwf	___awdiv@divisor+1,c
  3085  001444  0E0A               	movlw	10
  3086  001446  6E09               	movwf	___awdiv@divisor,c
  3087  001448  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3088  00144C  6A08               	clrf	___awdiv@dividend+1,c
  3089  00144E  ECE0  F00F         	call	___awdiv	;wreg free
  3090  001452  0E09               	movlw	9
  3091  001454  2407               	addwf	?___awdiv,w,c
  3092  001456  6E0F               	movwf	___wmul@multiplier,c
  3093  001458  0E00               	movlw	0
  3094  00145A  2008               	addwfc	?___awdiv+1,w,c
  3095  00145C  6E10               	movwf	___wmul@multiplier+1,c
  3096  00145E  0E00               	movlw	0
  3097  001460  6E12               	movwf	___wmul@multiplicand+1,c
  3098  001462  0E03               	movlw	3
  3099  001464  6E11               	movwf	___wmul@multiplicand,c
  3100  001466  ECAC  F011         	call	___wmul	;wreg free
  3101  00146A  0E50               	movlw	low __npowers_
  3102  00146C  240F               	addwf	?___wmul,w,c
  3103  00146E  6EF6               	movwf	tblptrl,c
  3104  001470  0E06               	movlw	high __npowers_
  3105  001472  2010               	addwfc	?___wmul+1,w,c
  3106  001474  6EF7               	movwf	tblptrh,c
  3107  001476                     	if	0	;There are less than 3 active tblptr bytes
  3108  001476                     	endif
  3109  001476  0009               	tblrd		*+
  3110  001478  CFF5 F015          	movff	tablat,___ftmul@f1
  3111  00147C  0009               	tblrd		*+
  3112  00147E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3113  001482  000A               	tblrd		*-
  3114  001484  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3115  001488  EC4D  F00E         	call	___ftmul	;wreg free
  3116  00148C  C015  F02A         	movff	?___ftmul,_fround$840
  3117  001490  C016  F02B         	movff	?___ftmul+1,_fround$840+1
  3118  001494  C017  F02C         	movff	?___ftmul+2,_fround$840+2
  3119                           
  3120                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3121  001498  C02A  F015         	movff	_fround$840,___ftmul@f1
  3122  00149C  C02B  F016         	movff	_fround$840+1,___ftmul@f1+1
  3123  0014A0  C02C  F017         	movff	_fround$840+2,___ftmul@f1+2
  3124  0014A4  0E00               	movlw	0
  3125  0014A6  6E18               	movwf	___ftmul@f2,c
  3126  0014A8  0E00               	movlw	0
  3127  0014AA  6E19               	movwf	___ftmul@f2+1,c
  3128  0014AC  0E3F               	movlw	63
  3129  0014AE  6E1A               	movwf	___ftmul@f2+2,c
  3130  0014B0  EC4D  F00E         	call	___ftmul	;wreg free
  3131  0014B4  C015  F024         	movff	?___ftmul,?_fround
  3132  0014B8  C016  F025         	movff	?___ftmul+1,?_fround+1
  3133  0014BC  C017  F026         	movff	?___ftmul+2,?_fround+2
  3134  0014C0  0012               	return	
  3135  0014C2                     l96:
  3136                           
  3137                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3138  0014C2  502D               	movf	fround@prec,w,c
  3139  0014C4  0D03               	mullw	3
  3140  0014C6  0E50               	movlw	low __npowers_
  3141  0014C8  24F3               	addwf	prodl,w,c
  3142  0014CA  6EF6               	movwf	tblptrl,c
  3143  0014CC  0E06               	movlw	high __npowers_
  3144  0014CE  20F4               	addwfc	prodh,w,c
  3145  0014D0  6EF7               	movwf	tblptrh,c
  3146  0014D2                     	if	0	;There are less than 3 active tblptr bytes
  3147  0014D2                     	endif
  3148  0014D2  0009               	tblrd		*+
  3149  0014D4  CFF5 F015          	movff	tablat,___ftmul@f1
  3150  0014D8  0009               	tblrd		*+
  3151  0014DA  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3152  0014DE  000A               	tblrd		*-
  3153  0014E0  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3154  0014E4  0E00               	movlw	0
  3155  0014E6  6E18               	movwf	___ftmul@f2,c
  3156  0014E8  0E00               	movlw	0
  3157  0014EA  6E19               	movwf	___ftmul@f2+1,c
  3158  0014EC  0E3F               	movlw	63
  3159  0014EE  6E1A               	movwf	___ftmul@f2+2,c
  3160  0014F0  EC4D  F00E         	call	___ftmul	;wreg free
  3161  0014F4  C015  F024         	movff	?___ftmul,?_fround
  3162  0014F8  C016  F025         	movff	?___ftmul+1,?_fround+1
  3163  0014FC  C017  F026         	movff	?___ftmul+2,?_fround+2
  3164  001500  0012               	return	
  3165  001502                     __end_of_fround:
  3166                           	opt stack 0
  3167                           tblptru	equ	0xFF8
  3168                           tblptrh	equ	0xFF7
  3169                           tblptrl	equ	0xFF6
  3170                           tablat	equ	0xFF5
  3171                           prodh	equ	0xFF4
  3172                           prodl	equ	0xFF3
  3173                           postinc0	equ	0xFEE
  3174                           wreg	equ	0xFE8
  3175                           postdec1	equ	0xFE5
  3176                           fsr1l	equ	0xFE1
  3177                           indf2	equ	0xFDF
  3178                           postinc2	equ	0xFDE
  3179                           postdec2	equ	0xFDD
  3180                           fsr2h	equ	0xFDA
  3181                           fsr2l	equ	0xFD9
  3182                           status	equ	0xFD8
  3183                           
  3184 ;; *************** function ___wmul *****************
  3185 ;; Defined at:
  3186 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;  multiplier      2   14[COMRAM] unsigned int 
  3189 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3190 ;; Auto vars:     Size  Location     Type
  3191 ;;  product         2   18[COMRAM] unsigned int 
  3192 ;; Return value:  Size  Location     Type
  3193 ;;                  2   14[COMRAM] unsigned int 
  3194 ;; Registers used:
  3195 ;;		wreg, status,2, status,0, prodl, prodh
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/0
  3198 ;;		On exit  : 0/0
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3201 ;;      Params:         4       0       0       0       0       0       0
  3202 ;;      Locals:         2       0       0       0       0       0       0
  3203 ;;      Temps:          0       0       0       0       0       0       0
  3204 ;;      Totals:         6       0       0       0       0       0       0
  3205 ;;Total ram usage:        6 bytes
  3206 ;; Hardware stack levels used:    1
  3207 ;; This function calls:
  3208 ;;		Nothing
  3209 ;; This function is called by:
  3210 ;;		_fround
  3211 ;;		_scale
  3212 ;;		_sprintf
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           	psect	text5
  3217  002358                     __ptext5:
  3218                           	opt stack 0
  3219  002358                     ___wmul:
  3220                           	opt stack 28
  3221                           
  3222                           ;incstack = 0
  3223  002358  500F               	movf	___wmul@multiplier,w,c
  3224  00235A  0211               	mulwf	___wmul@multiplicand,c
  3225  00235C  CFF3 F013          	movff	prodl,___wmul@product
  3226  002360  CFF4 F014          	movff	prodh,___wmul@product+1
  3227  002364  500F               	movf	___wmul@multiplier,w,c
  3228  002366  0212               	mulwf	___wmul@multiplicand+1,c
  3229  002368  50F3               	movf	prodl,w,c
  3230  00236A  2614               	addwf	___wmul@product+1,f,c
  3231  00236C  5010               	movf	___wmul@multiplier+1,w,c
  3232  00236E  0211               	mulwf	___wmul@multiplicand,c
  3233  002370  50F3               	movf	prodl,w,c
  3234  002372  2614               	addwf	___wmul@product+1,f,c
  3235  002374  C013  F00F         	movff	___wmul@product,?___wmul
  3236  002378  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3237  00237C  0012               	return	
  3238  00237E                     __end_of___wmul:
  3239                           	opt stack 0
  3240                           tblptru	equ	0xFF8
  3241                           tblptrh	equ	0xFF7
  3242                           tblptrl	equ	0xFF6
  3243                           tablat	equ	0xFF5
  3244                           prodh	equ	0xFF4
  3245                           prodl	equ	0xFF3
  3246                           postinc0	equ	0xFEE
  3247                           wreg	equ	0xFE8
  3248                           postdec1	equ	0xFE5
  3249                           fsr1l	equ	0xFE1
  3250                           indf2	equ	0xFDF
  3251                           postinc2	equ	0xFDE
  3252                           postdec2	equ	0xFDD
  3253                           fsr2h	equ	0xFDA
  3254                           fsr2l	equ	0xFD9
  3255                           status	equ	0xFD8
  3256                           
  3257 ;; *************** function ___ftmul *****************
  3258 ;; Defined at:
  3259 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3260 ;; Parameters:    Size  Location     Type
  3261 ;;  f1              3   20[COMRAM] float 
  3262 ;;  f2              3   23[COMRAM] float 
  3263 ;; Auto vars:     Size  Location     Type
  3264 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3265 ;;  sign            1   34[COMRAM] unsigned char 
  3266 ;;  cntr            1   33[COMRAM] unsigned char 
  3267 ;;  exp             1   29[COMRAM] unsigned char 
  3268 ;; Return value:  Size  Location     Type
  3269 ;;                  3   20[COMRAM] float 
  3270 ;; Registers used:
  3271 ;;		wreg, status,2, status,0, cstack
  3272 ;; Tracked objects:
  3273 ;;		On entry : 0/0
  3274 ;;		On exit  : 0/0
  3275 ;;		Unchanged: 0/0
  3276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3277 ;;      Params:         6       0       0       0       0       0       0
  3278 ;;      Locals:         6       0       0       0       0       0       0
  3279 ;;      Temps:          3       0       0       0       0       0       0
  3280 ;;      Totals:        15       0       0       0       0       0       0
  3281 ;;Total ram usage:       15 bytes
  3282 ;; Hardware stack levels used:    1
  3283 ;; Hardware stack levels required when called:    1
  3284 ;; This function calls:
  3285 ;;		___ftpack
  3286 ;; This function is called by:
  3287 ;;		_fround
  3288 ;;		_scale
  3289 ;;		_sprintf
  3290 ;; This function uses a non-reentrant model
  3291 ;;
  3292                           
  3293                           	psect	text6
  3294  001C9A                     __ptext6:
  3295                           	opt stack 0
  3296  001C9A                     ___ftmul:
  3297                           	opt stack 27
  3298                           
  3299                           ;incstack = 0
  3300  001C9A  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3301  001C9E  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3302  001CA0  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3303  001CA2  3416               	rlcf	___ftmul@f1+1,w,c
  3304  001CA4  361B               	rlcf	??___ftmul& (0+255),f,c
  3305  001CA6  E301               	bnc	u1701
  3306  001CA8  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3307  001CAA                     u1701:
  3308  001CAA  501B               	movf	??___ftmul,w,c
  3309  001CAC  6E1E               	movwf	___ftmul@exp,c
  3310  001CAE  501E               	movf	___ftmul@exp,w,c
  3311  001CB0  A4D8               	btfss	status,2,c
  3312  001CB2  D007               	goto	l504
  3313  001CB4  0E00               	movlw	0
  3314  001CB6  6E15               	movwf	?___ftmul,c
  3315  001CB8  0E00               	movlw	0
  3316  001CBA  6E16               	movwf	?___ftmul+1,c
  3317  001CBC  0E00               	movlw	0
  3318  001CBE  6E17               	movwf	?___ftmul+2,c
  3319  001CC0  0012               	return	
  3320  001CC2                     l504:
  3321  001CC2  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3322  001CC6  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3323  001CC8  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3324  001CCA  3419               	rlcf	___ftmul@f2+1,w,c
  3325  001CCC  361B               	rlcf	??___ftmul& (0+255),f,c
  3326  001CCE  E301               	bnc	u1721
  3327  001CD0  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3328  001CD2                     u1721:
  3329  001CD2  501B               	movf	??___ftmul,w,c
  3330  001CD4  6E23               	movwf	___ftmul@sign,c
  3331  001CD6  5023               	movf	___ftmul@sign,w,c
  3332  001CD8  A4D8               	btfss	status,2,c
  3333  001CDA  D007               	goto	l506
  3334  001CDC  0E00               	movlw	0
  3335  001CDE  6E15               	movwf	?___ftmul,c
  3336  001CE0  0E00               	movlw	0
  3337  001CE2  6E16               	movwf	?___ftmul+1,c
  3338  001CE4  0E00               	movlw	0
  3339  001CE6  6E17               	movwf	?___ftmul+2,c
  3340  001CE8  0012               	return	
  3341  001CEA                     l506:
  3342  001CEA  5023               	movf	___ftmul@sign,w,c
  3343  001CEC  0F7B               	addlw	123
  3344  001CEE  261E               	addwf	___ftmul@exp,f,c
  3345  001CF0  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3346  001CF4  501A               	movf	___ftmul@f2+2,w,c
  3347  001CF6  1A23               	xorwf	___ftmul@sign,f,c
  3348  001CF8  0E80               	movlw	128
  3349  001CFA  1623               	andwf	___ftmul@sign,f,c
  3350  001CFC  8E16               	bsf	___ftmul@f1+1,7,c
  3351  001CFE  8E19               	bsf	___ftmul@f2+1,7,c
  3352  001D00  0EFF               	movlw	255
  3353  001D02  1618               	andwf	___ftmul@f2,f,c
  3354  001D04  0EFF               	movlw	255
  3355  001D06  1619               	andwf	___ftmul@f2+1,f,c
  3356  001D08  0E00               	movlw	0
  3357  001D0A  161A               	andwf	___ftmul@f2+2,f,c
  3358  001D0C  0E00               	movlw	0
  3359  001D0E  6E1F               	movwf	___ftmul@f3_as_product,c
  3360  001D10  0E00               	movlw	0
  3361  001D12  6E20               	movwf	___ftmul@f3_as_product+1,c
  3362  001D14  0E00               	movlw	0
  3363  001D16  6E21               	movwf	___ftmul@f3_as_product+2,c
  3364  001D18  0E07               	movlw	7
  3365  001D1A  6E22               	movwf	___ftmul@cntr,c
  3366  001D1C  A015               	btfss	___ftmul@f1,0,c
  3367  001D1E  D006               	goto	l508
  3368  001D20  5018               	movf	___ftmul@f2,w,c
  3369  001D22  261F               	addwf	___ftmul@f3_as_product,f,c
  3370  001D24  5019               	movf	___ftmul@f2+1,w,c
  3371  001D26  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3372  001D28  501A               	movf	___ftmul@f2+2,w,c
  3373  001D2A  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3374  001D2C                     l508:
  3375  001D2C  90D8               	bcf	status,0,c
  3376  001D2E  3217               	rrcf	___ftmul@f1+2,f,c
  3377  001D30  3216               	rrcf	___ftmul@f1+1,f,c
  3378  001D32  3215               	rrcf	___ftmul@f1,f,c
  3379  001D34  90D8               	bcf	status,0,c
  3380  001D36  3618               	rlcf	___ftmul@f2,f,c
  3381  001D38  3619               	rlcf	___ftmul@f2+1,f,c
  3382  001D3A  361A               	rlcf	___ftmul@f2+2,f,c
  3383  001D3C  2E22               	decfsz	___ftmul@cntr,f,c
  3384  001D3E  D7EE               	goto	l507
  3385  001D40  0E09               	movlw	9
  3386  001D42  6E22               	movwf	___ftmul@cntr,c
  3387  001D44  A015               	btfss	___ftmul@f1,0,c
  3388  001D46  D006               	goto	l511
  3389  001D48  5018               	movf	___ftmul@f2,w,c
  3390  001D4A  261F               	addwf	___ftmul@f3_as_product,f,c
  3391  001D4C  5019               	movf	___ftmul@f2+1,w,c
  3392  001D4E  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3393  001D50  501A               	movf	___ftmul@f2+2,w,c
  3394  001D52  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3395  001D54                     l511:
  3396  001D54  90D8               	bcf	status,0,c
  3397  001D56  3217               	rrcf	___ftmul@f1+2,f,c
  3398  001D58  3216               	rrcf	___ftmul@f1+1,f,c
  3399  001D5A  3215               	rrcf	___ftmul@f1,f,c
  3400  001D5C  90D8               	bcf	status,0,c
  3401  001D5E  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3402  001D60  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3403  001D62  321F               	rrcf	___ftmul@f3_as_product,f,c
  3404  001D64  2E22               	decfsz	___ftmul@cntr,f,c
  3405  001D66  D7EE               	goto	l510
  3406  001D68  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3407  001D6C  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3408  001D70  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3409  001D74  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3410  001D78  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3411  001D7C  EC41  F00F         	call	___ftpack	;wreg free
  3412  001D80  C001  F015         	movff	?___ftpack,?___ftmul
  3413  001D84  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3414  001D88  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3415  001D8C  0012               	return	
  3416  001D8E                     __end_of___ftmul:
  3417                           	opt stack 0
  3418                           tblptru	equ	0xFF8
  3419                           tblptrh	equ	0xFF7
  3420                           tblptrl	equ	0xFF6
  3421                           tablat	equ	0xFF5
  3422                           prodh	equ	0xFF4
  3423                           prodl	equ	0xFF3
  3424                           postinc0	equ	0xFEE
  3425                           wreg	equ	0xFE8
  3426                           postdec1	equ	0xFE5
  3427                           fsr1l	equ	0xFE1
  3428                           indf2	equ	0xFDF
  3429                           postinc2	equ	0xFDE
  3430                           postdec2	equ	0xFDD
  3431                           fsr2h	equ	0xFDA
  3432                           fsr2l	equ	0xFD9
  3433                           status	equ	0xFD8
  3434                           
  3435 ;; *************** function ___awmod *****************
  3436 ;; Defined at:
  3437 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3438 ;; Parameters:    Size  Location     Type
  3439 ;;  dividend        2    0[COMRAM] int 
  3440 ;;  divisor         2    2[COMRAM] int 
  3441 ;; Auto vars:     Size  Location     Type
  3442 ;;  sign            1    5[COMRAM] unsigned char 
  3443 ;;  counter         1    4[COMRAM] unsigned char 
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  2    0[COMRAM] int 
  3446 ;; Registers used:
  3447 ;;		wreg, status,2, status,0
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3453 ;;      Params:         4       0       0       0       0       0       0
  3454 ;;      Locals:         2       0       0       0       0       0       0
  3455 ;;      Temps:          0       0       0       0       0       0       0
  3456 ;;      Totals:         6       0       0       0       0       0       0
  3457 ;;Total ram usage:        6 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; This function calls:
  3460 ;;		Nothing
  3461 ;; This function is called by:
  3462 ;;		_fround
  3463 ;;		_scale
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           	psect	text7
  3468  0020C6                     __ptext7:
  3469                           	opt stack 0
  3470  0020C6                     ___awmod:
  3471                           	opt stack 28
  3472                           
  3473                           ;incstack = 0
  3474  0020C6  0E00               	movlw	0
  3475  0020C8  6E06               	movwf	___awmod@sign,c
  3476  0020CA  AE02               	btfss	___awmod@dividend+1,7,c
  3477  0020CC  D006               	goto	l357
  3478  0020CE  6C01               	negf	___awmod@dividend,c
  3479  0020D0  1E02               	comf	___awmod@dividend+1,f,c
  3480  0020D2  B0D8               	btfsc	status,0,c
  3481  0020D4  2A02               	incf	___awmod@dividend+1,f,c
  3482  0020D6  0E01               	movlw	1
  3483  0020D8  6E06               	movwf	___awmod@sign,c
  3484  0020DA                     l357:
  3485  0020DA  AE04               	btfss	___awmod@divisor+1,7,c
  3486  0020DC  D004               	goto	l358
  3487  0020DE  6C03               	negf	___awmod@divisor,c
  3488  0020E0  1E04               	comf	___awmod@divisor+1,f,c
  3489  0020E2  B0D8               	btfsc	status,0,c
  3490  0020E4  2A04               	incf	___awmod@divisor+1,f,c
  3491  0020E6                     l358:
  3492  0020E6  5003               	movf	___awmod@divisor,w,c
  3493  0020E8  1004               	iorwf	___awmod@divisor+1,w,c
  3494  0020EA  B4D8               	btfsc	status,2,c
  3495  0020EC  D018               	goto	l365
  3496  0020EE  0E01               	movlw	1
  3497  0020F0  6E05               	movwf	___awmod@counter,c
  3498  0020F2  D004               	goto	l360
  3499  0020F4  90D8               	bcf	status,0,c
  3500  0020F6  3603               	rlcf	___awmod@divisor,f,c
  3501  0020F8  3604               	rlcf	___awmod@divisor+1,f,c
  3502  0020FA  2A05               	incf	___awmod@counter,f,c
  3503  0020FC                     l360:
  3504  0020FC  AE04               	btfss	___awmod@divisor+1,7,c
  3505  0020FE  D7FA               	goto	l361
  3506  002100                     u1850:
  3507  002100  5003               	movf	___awmod@divisor,w,c
  3508  002102  5C01               	subwf	___awmod@dividend,w,c
  3509  002104  5004               	movf	___awmod@divisor+1,w,c
  3510  002106  5802               	subwfb	___awmod@dividend+1,w,c
  3511  002108  A0D8               	btfss	status,0,c
  3512  00210A  D004               	goto	l364
  3513  00210C  5003               	movf	___awmod@divisor,w,c
  3514  00210E  5E01               	subwf	___awmod@dividend,f,c
  3515  002110  5004               	movf	___awmod@divisor+1,w,c
  3516  002112  5A02               	subwfb	___awmod@dividend+1,f,c
  3517  002114                     l364:
  3518  002114  90D8               	bcf	status,0,c
  3519  002116  3204               	rrcf	___awmod@divisor+1,f,c
  3520  002118  3203               	rrcf	___awmod@divisor,f,c
  3521  00211A  2E05               	decfsz	___awmod@counter,f,c
  3522  00211C  D7F1               	goto	u1850
  3523  00211E                     l365:
  3524  00211E  5006               	movf	___awmod@sign,w,c
  3525  002120  B4D8               	btfsc	status,2,c
  3526  002122  D004               	goto	l366
  3527  002124  6C01               	negf	___awmod@dividend,c
  3528  002126  1E02               	comf	___awmod@dividend+1,f,c
  3529  002128  B0D8               	btfsc	status,0,c
  3530  00212A  2A02               	incf	___awmod@dividend+1,f,c
  3531  00212C                     l366:
  3532  00212C  C001  F001         	movff	___awmod@dividend,?___awmod
  3533  002130  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3534  002134  0012               	return	
  3535  002136                     __end_of___awmod:
  3536                           	opt stack 0
  3537                           tblptru	equ	0xFF8
  3538                           tblptrh	equ	0xFF7
  3539                           tblptrl	equ	0xFF6
  3540                           tablat	equ	0xFF5
  3541                           prodh	equ	0xFF4
  3542                           prodl	equ	0xFF3
  3543                           postinc0	equ	0xFEE
  3544                           wreg	equ	0xFE8
  3545                           postdec1	equ	0xFE5
  3546                           fsr1l	equ	0xFE1
  3547                           indf2	equ	0xFDF
  3548                           postinc2	equ	0xFDE
  3549                           postdec2	equ	0xFDD
  3550                           fsr2h	equ	0xFDA
  3551                           fsr2l	equ	0xFD9
  3552                           status	equ	0xFD8
  3553                           
  3554 ;; *************** function ___awdiv *****************
  3555 ;; Defined at:
  3556 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;  dividend        2    6[COMRAM] int 
  3559 ;;  divisor         2    8[COMRAM] int 
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;  quotient        2   12[COMRAM] int 
  3562 ;;  sign            1   11[COMRAM] unsigned char 
  3563 ;;  counter         1   10[COMRAM] unsigned char 
  3564 ;; Return value:  Size  Location     Type
  3565 ;;                  2    6[COMRAM] int 
  3566 ;; Registers used:
  3567 ;;		wreg, status,2, status,0
  3568 ;; Tracked objects:
  3569 ;;		On entry : 0/0
  3570 ;;		On exit  : 0/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3573 ;;      Params:         4       0       0       0       0       0       0
  3574 ;;      Locals:         4       0       0       0       0       0       0
  3575 ;;      Temps:          0       0       0       0       0       0       0
  3576 ;;      Totals:         8       0       0       0       0       0       0
  3577 ;;Total ram usage:        8 bytes
  3578 ;; Hardware stack levels used:    1
  3579 ;; This function calls:
  3580 ;;		Nothing
  3581 ;; This function is called by:
  3582 ;;		_fround
  3583 ;;		_scale
  3584 ;;		_sprintf
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588                           	psect	text8
  3589  001FC0                     __ptext8:
  3590                           	opt stack 0
  3591  001FC0                     ___awdiv:
  3592                           	opt stack 28
  3593                           
  3594                           ;incstack = 0
  3595  001FC0  0E00               	movlw	0
  3596  001FC2  6E0C               	movwf	___awdiv@sign,c
  3597  001FC4  AE0A               	btfss	___awdiv@divisor+1,7,c
  3598  001FC6  D006               	goto	l344
  3599  001FC8  6C09               	negf	___awdiv@divisor,c
  3600  001FCA  1E0A               	comf	___awdiv@divisor+1,f,c
  3601  001FCC  B0D8               	btfsc	status,0,c
  3602  001FCE  2A0A               	incf	___awdiv@divisor+1,f,c
  3603  001FD0  0E01               	movlw	1
  3604  001FD2  6E0C               	movwf	___awdiv@sign,c
  3605  001FD4                     l344:
  3606  001FD4  AE08               	btfss	___awdiv@dividend+1,7,c
  3607  001FD6  D006               	goto	l345
  3608  001FD8  6C07               	negf	___awdiv@dividend,c
  3609  001FDA  1E08               	comf	___awdiv@dividend+1,f,c
  3610  001FDC  B0D8               	btfsc	status,0,c
  3611  001FDE  2A08               	incf	___awdiv@dividend+1,f,c
  3612  001FE0  0E01               	movlw	1
  3613  001FE2  1A0C               	xorwf	___awdiv@sign,f,c
  3614  001FE4                     l345:
  3615  001FE4  0E00               	movlw	0
  3616  001FE6  6E0E               	movwf	___awdiv@quotient+1,c
  3617  001FE8  0E00               	movlw	0
  3618  001FEA  6E0D               	movwf	___awdiv@quotient,c
  3619  001FEC  5009               	movf	___awdiv@divisor,w,c
  3620  001FEE  100A               	iorwf	___awdiv@divisor+1,w,c
  3621  001FF0  B4D8               	btfsc	status,2,c
  3622  001FF2  D01C               	goto	l352
  3623  001FF4  0E01               	movlw	1
  3624  001FF6  6E0B               	movwf	___awdiv@counter,c
  3625  001FF8  D004               	goto	l347
  3626  001FFA  90D8               	bcf	status,0,c
  3627  001FFC  3609               	rlcf	___awdiv@divisor,f,c
  3628  001FFE  360A               	rlcf	___awdiv@divisor+1,f,c
  3629  002000  2A0B               	incf	___awdiv@counter,f,c
  3630  002002                     l347:
  3631  002002  AE0A               	btfss	___awdiv@divisor+1,7,c
  3632  002004  D7FA               	goto	l348
  3633  002006                     u1790:
  3634  002006  90D8               	bcf	status,0,c
  3635  002008  360D               	rlcf	___awdiv@quotient,f,c
  3636  00200A  360E               	rlcf	___awdiv@quotient+1,f,c
  3637  00200C  5009               	movf	___awdiv@divisor,w,c
  3638  00200E  5C07               	subwf	___awdiv@dividend,w,c
  3639  002010  500A               	movf	___awdiv@divisor+1,w,c
  3640  002012  5808               	subwfb	___awdiv@dividend+1,w,c
  3641  002014  A0D8               	btfss	status,0,c
  3642  002016  D005               	goto	l351
  3643  002018  5009               	movf	___awdiv@divisor,w,c
  3644  00201A  5E07               	subwf	___awdiv@dividend,f,c
  3645  00201C  500A               	movf	___awdiv@divisor+1,w,c
  3646  00201E  5A08               	subwfb	___awdiv@dividend+1,f,c
  3647  002020  800D               	bsf	___awdiv@quotient,0,c
  3648  002022                     l351:
  3649  002022  90D8               	bcf	status,0,c
  3650  002024  320A               	rrcf	___awdiv@divisor+1,f,c
  3651  002026  3209               	rrcf	___awdiv@divisor,f,c
  3652  002028  2E0B               	decfsz	___awdiv@counter,f,c
  3653  00202A  D7ED               	goto	u1790
  3654  00202C                     l352:
  3655  00202C  500C               	movf	___awdiv@sign,w,c
  3656  00202E  B4D8               	btfsc	status,2,c
  3657  002030  D004               	goto	l353
  3658  002032  6C0D               	negf	___awdiv@quotient,c
  3659  002034  1E0E               	comf	___awdiv@quotient+1,f,c
  3660  002036  B0D8               	btfsc	status,0,c
  3661  002038  2A0E               	incf	___awdiv@quotient+1,f,c
  3662  00203A                     l353:
  3663  00203A  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3664  00203E  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3665  002042  0012               	return	
  3666  002044                     __end_of___awdiv:
  3667                           	opt stack 0
  3668                           tblptru	equ	0xFF8
  3669                           tblptrh	equ	0xFF7
  3670                           tblptrl	equ	0xFF6
  3671                           tablat	equ	0xFF5
  3672                           prodh	equ	0xFF4
  3673                           prodl	equ	0xFF3
  3674                           postinc0	equ	0xFEE
  3675                           wreg	equ	0xFE8
  3676                           postdec1	equ	0xFE5
  3677                           fsr1l	equ	0xFE1
  3678                           indf2	equ	0xFDF
  3679                           postinc2	equ	0xFDE
  3680                           postdec2	equ	0xFDD
  3681                           fsr2h	equ	0xFDA
  3682                           fsr2l	equ	0xFD9
  3683                           status	equ	0xFD8
  3684                           
  3685 ;; *************** function __tdiv_to_l_ *****************
  3686 ;; Defined at:
  3687 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;  f1              3    0[COMRAM] float 
  3690 ;;  f2              3    3[COMRAM] float 
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;  quot            4    9[COMRAM] unsigned long 
  3693 ;;  exp1            1   14[COMRAM] unsigned char 
  3694 ;;  cntr            1   13[COMRAM] unsigned char 
  3695 ;; Return value:  Size  Location     Type
  3696 ;;                  4    0[COMRAM] unsigned long 
  3697 ;; Registers used:
  3698 ;;		wreg, status,2, status,0
  3699 ;; Tracked objects:
  3700 ;;		On entry : 0/0
  3701 ;;		On exit  : 0/0
  3702 ;;		Unchanged: 0/0
  3703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3704 ;;      Params:         6       0       0       0       0       0       0
  3705 ;;      Locals:         6       0       0       0       0       0       0
  3706 ;;      Temps:          3       0       0       0       0       0       0
  3707 ;;      Totals:        15       0       0       0       0       0       0
  3708 ;;Total ram usage:       15 bytes
  3709 ;; Hardware stack levels used:    1
  3710 ;; This function calls:
  3711 ;;		Nothing
  3712 ;; This function is called by:
  3713 ;;		_sprintf
  3714 ;; This function uses a non-reentrant model
  3715 ;;
  3716                           
  3717                           	psect	text9
  3718  0017E6                     __ptext9:
  3719                           	opt stack 0
  3720  0017E6                     __tdiv_to_l_:
  3721                           	opt stack 29
  3722                           
  3723                           ;incstack = 0
  3724  0017E6  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3725  0017EA  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3726  0017EC  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3727  0017EE  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3728  0017F0  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3729  0017F2  E301               	bnc	u2031
  3730  0017F4  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3731  0017F6                     u2031:
  3732  0017F6  5007               	movf	??__tdiv_to_l_,w,c
  3733  0017F8  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3734  0017FA  500F               	movf	__tdiv_to_l_@exp1,w,c
  3735  0017FC  A4D8               	btfss	status,2,c
  3736  0017FE  D009               	goto	l480
  3737  001800  0E00               	movlw	0
  3738  001802  6E01               	movwf	?__tdiv_to_l_,c
  3739  001804  0E00               	movlw	0
  3740  001806  6E02               	movwf	?__tdiv_to_l_+1,c
  3741  001808  0E00               	movlw	0
  3742  00180A  6E03               	movwf	?__tdiv_to_l_+2,c
  3743  00180C  0E00               	movlw	0
  3744  00180E  6E04               	movwf	?__tdiv_to_l_+3,c
  3745  001810  0012               	return	
  3746  001812                     l480:
  3747  001812  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3748  001816  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3749  001818  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3750  00181A  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3751  00181C  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3752  00181E  E301               	bnc	u2051
  3753  001820  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3754  001822                     u2051:
  3755  001822  5007               	movf	??__tdiv_to_l_,w,c
  3756  001824  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3757  001826  500E               	movf	__tdiv_to_l_@cntr,w,c
  3758  001828  A4D8               	btfss	status,2,c
  3759  00182A  D009               	goto	l482
  3760  00182C  0E00               	movlw	0
  3761  00182E  6E01               	movwf	?__tdiv_to_l_,c
  3762  001830  0E00               	movlw	0
  3763  001832  6E02               	movwf	?__tdiv_to_l_+1,c
  3764  001834  0E00               	movlw	0
  3765  001836  6E03               	movwf	?__tdiv_to_l_+2,c
  3766  001838  0E00               	movlw	0
  3767  00183A  6E04               	movwf	?__tdiv_to_l_+3,c
  3768  00183C  0012               	return	
  3769  00183E                     l482:
  3770  00183E  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3771  001840  0EFF               	movlw	255
  3772  001842  1601               	andwf	__tdiv_to_l_@f1,f,c
  3773  001844  0EFF               	movlw	255
  3774  001846  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3775  001848  0E00               	movlw	0
  3776  00184A  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3777  00184C  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3778  00184E  0EFF               	movlw	255
  3779  001850  1604               	andwf	__tdiv_to_l_@f2,f,c
  3780  001852  0EFF               	movlw	255
  3781  001854  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3782  001856  0E00               	movlw	0
  3783  001858  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3784  00185A  0E00               	movlw	0
  3785  00185C  6E0A               	movwf	__tdiv_to_l_@quot,c
  3786  00185E  0E00               	movlw	0
  3787  001860  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3788  001862  0E00               	movlw	0
  3789  001864  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3790  001866  0E00               	movlw	0
  3791  001868  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3792  00186A  0E7F               	movlw	127
  3793  00186C  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3794  00186E  500E               	movf	__tdiv_to_l_@cntr,w,c
  3795  001870  0F98               	addlw	152
  3796  001872  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3797  001874  0E18               	movlw	24
  3798  001876  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3799  001878                     l483:
  3800  001878  90D8               	bcf	status,0,c
  3801  00187A  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3802  00187C  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3803  00187E  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3804  001880  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3805  001882  5004               	movf	__tdiv_to_l_@f2,w,c
  3806  001884  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3807  001886  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3808  001888  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3809  00188A  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3810  00188C  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3811  00188E  A0D8               	btfss	status,0,c
  3812  001890  D007               	goto	l484
  3813  001892  5004               	movf	__tdiv_to_l_@f2,w,c
  3814  001894  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3815  001896  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3816  001898  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3817  00189A  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3818  00189C  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3819  00189E  800A               	bsf	__tdiv_to_l_@quot,0,c
  3820  0018A0                     l484:
  3821  0018A0  90D8               	bcf	status,0,c
  3822  0018A2  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3823  0018A4  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3824  0018A6  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3825  0018A8  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3826  0018AA  D7E6               	goto	l483
  3827  0018AC  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3828  0018AE  D016               	goto	l486
  3829  0018B0  500F               	movf	__tdiv_to_l_@exp1,w,c
  3830  0018B2  0A80               	xorlw	128
  3831  0018B4  0F97               	addlw	151
  3832  0018B6  B0D8               	btfsc	status,0,c
  3833  0018B8  D009               	goto	l487
  3834  0018BA  0E00               	movlw	0
  3835  0018BC  6E01               	movwf	?__tdiv_to_l_,c
  3836  0018BE  0E00               	movlw	0
  3837  0018C0  6E02               	movwf	?__tdiv_to_l_+1,c
  3838  0018C2  0E00               	movlw	0
  3839  0018C4  6E03               	movwf	?__tdiv_to_l_+2,c
  3840  0018C6  0E00               	movlw	0
  3841  0018C8  6E04               	movwf	?__tdiv_to_l_+3,c
  3842  0018CA  0012               	return	
  3843  0018CC                     l487:
  3844  0018CC  90D8               	bcf	status,0,c
  3845  0018CE  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3846  0018D0  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3847  0018D2  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3848  0018D4  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3849  0018D6  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3850  0018D8  D7F9               	goto	l487
  3851  0018DA  D015               	goto	u2110
  3852  0018DC                     l486:
  3853  0018DC  0E17               	movlw	23
  3854  0018DE  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3855  0018E0  D00F               	goto	l492
  3856  0018E2  0E00               	movlw	0
  3857  0018E4  6E01               	movwf	?__tdiv_to_l_,c
  3858  0018E6  0E00               	movlw	0
  3859  0018E8  6E02               	movwf	?__tdiv_to_l_+1,c
  3860  0018EA  0E00               	movlw	0
  3861  0018EC  6E03               	movwf	?__tdiv_to_l_+2,c
  3862  0018EE  0E00               	movlw	0
  3863  0018F0  6E04               	movwf	?__tdiv_to_l_+3,c
  3864  0018F2  0012               	return	
  3865  0018F4  90D8               	bcf	status,0,c
  3866  0018F6  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3867  0018F8  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3868  0018FA  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3869  0018FC  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3870  0018FE  060F               	decf	__tdiv_to_l_@exp1,f,c
  3871  001900                     l492:
  3872  001900  500F               	movf	__tdiv_to_l_@exp1,w,c
  3873  001902  A4D8               	btfss	status,2,c
  3874  001904  D7F7               	goto	l493
  3875  001906                     u2110:
  3876  001906  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3877  00190A  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3878  00190E  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3879  001912  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3880  001916  0012               	return		;funcret
  3881  001918                     __end_of__tdiv_to_l_:
  3882                           	opt stack 0
  3883                           tblptru	equ	0xFF8
  3884                           tblptrh	equ	0xFF7
  3885                           tblptrl	equ	0xFF6
  3886                           tablat	equ	0xFF5
  3887                           prodh	equ	0xFF4
  3888                           prodl	equ	0xFF3
  3889                           postinc0	equ	0xFEE
  3890                           wreg	equ	0xFE8
  3891                           postdec1	equ	0xFE5
  3892                           fsr1l	equ	0xFE1
  3893                           indf2	equ	0xFDF
  3894                           postinc2	equ	0xFDE
  3895                           postdec2	equ	0xFDD
  3896                           fsr2h	equ	0xFDA
  3897                           fsr2l	equ	0xFD9
  3898                           status	equ	0xFD8
  3899                           
  3900 ;; *************** function __div_to_l_ *****************
  3901 ;; Defined at:
  3902 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;  f1              3    0[COMRAM] unsigned long 
  3905 ;;  f2              3    3[COMRAM] unsigned long 
  3906 ;; Auto vars:     Size  Location     Type
  3907 ;;  quot            4    6[COMRAM] unsigned long 
  3908 ;;  exp1            1   11[COMRAM] unsigned char 
  3909 ;;  cntr            1   10[COMRAM] unsigned char 
  3910 ;; Return value:  Size  Location     Type
  3911 ;;                  4    0[COMRAM] unsigned long 
  3912 ;; Registers used:
  3913 ;;		wreg, status,2, status,0
  3914 ;; Tracked objects:
  3915 ;;		On entry : 0/0
  3916 ;;		On exit  : 0/0
  3917 ;;		Unchanged: 0/0
  3918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3919 ;;      Params:         6       0       0       0       0       0       0
  3920 ;;      Locals:         6       0       0       0       0       0       0
  3921 ;;      Temps:          0       0       0       0       0       0       0
  3922 ;;      Totals:        12       0       0       0       0       0       0
  3923 ;;Total ram usage:       12 bytes
  3924 ;; Hardware stack levels used:    1
  3925 ;; This function calls:
  3926 ;;		Nothing
  3927 ;; This function is called by:
  3928 ;;		_sprintf
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           	psect	text10
  3933  001B72                     __ptext10:
  3934                           	opt stack 0
  3935  001B72                     __div_to_l_:
  3936                           	opt stack 29
  3937                           
  3938                           ;incstack = 0
  3939  001B72  3403               	rlcf	__div_to_l_@f1+2,w,c
  3940  001B74  3404               	rlcf	__div_to_l_@f1+3,w,c
  3941  001B76  6E0C               	movwf	__div_to_l_@exp1,c
  3942  001B78  500C               	movf	__div_to_l_@exp1,w,c
  3943  001B7A  A4D8               	btfss	status,2,c
  3944  001B7C  D009               	goto	l376
  3945  001B7E  0E00               	movlw	0
  3946  001B80  6E01               	movwf	?__div_to_l_,c
  3947  001B82  0E00               	movlw	0
  3948  001B84  6E02               	movwf	?__div_to_l_+1,c
  3949  001B86  0E00               	movlw	0
  3950  001B88  6E03               	movwf	?__div_to_l_+2,c
  3951  001B8A  0E00               	movlw	0
  3952  001B8C  6E04               	movwf	?__div_to_l_+3,c
  3953  001B8E  0012               	return	
  3954  001B90                     l376:
  3955  001B90  3406               	rlcf	__div_to_l_@f2+2,w,c
  3956  001B92  3407               	rlcf	__div_to_l_@f2+3,w,c
  3957  001B94  6E0B               	movwf	__div_to_l_@cntr,c
  3958  001B96  500B               	movf	__div_to_l_@cntr,w,c
  3959  001B98  A4D8               	btfss	status,2,c
  3960  001B9A  D009               	goto	l378
  3961  001B9C  0E00               	movlw	0
  3962  001B9E  6E01               	movwf	?__div_to_l_,c
  3963  001BA0  0E00               	movlw	0
  3964  001BA2  6E02               	movwf	?__div_to_l_+1,c
  3965  001BA4  0E00               	movlw	0
  3966  001BA6  6E03               	movwf	?__div_to_l_+2,c
  3967  001BA8  0E00               	movlw	0
  3968  001BAA  6E04               	movwf	?__div_to_l_+3,c
  3969  001BAC  0012               	return	
  3970  001BAE                     l378:
  3971  001BAE  8E03               	bsf	__div_to_l_@f1+2,7,c
  3972  001BB0  0EFF               	movlw	255
  3973  001BB2  1601               	andwf	__div_to_l_@f1,f,c
  3974  001BB4  0EFF               	movlw	255
  3975  001BB6  1602               	andwf	__div_to_l_@f1+1,f,c
  3976  001BB8  0EFF               	movlw	255
  3977  001BBA  1603               	andwf	__div_to_l_@f1+2,f,c
  3978  001BBC  0E00               	movlw	0
  3979  001BBE  1604               	andwf	__div_to_l_@f1+3,f,c
  3980  001BC0  8E06               	bsf	__div_to_l_@f2+2,7,c
  3981  001BC2  0EFF               	movlw	255
  3982  001BC4  1604               	andwf	__div_to_l_@f2,f,c
  3983  001BC6  0EFF               	movlw	255
  3984  001BC8  1605               	andwf	__div_to_l_@f2+1,f,c
  3985  001BCA  0EFF               	movlw	255
  3986  001BCC  1606               	andwf	__div_to_l_@f2+2,f,c
  3987  001BCE  0E00               	movlw	0
  3988  001BD0  1607               	andwf	__div_to_l_@f2+3,f,c
  3989  001BD2  0E00               	movlw	0
  3990  001BD4  6E07               	movwf	__div_to_l_@quot,c
  3991  001BD6  0E00               	movlw	0
  3992  001BD8  6E08               	movwf	__div_to_l_@quot+1,c
  3993  001BDA  0E00               	movlw	0
  3994  001BDC  6E09               	movwf	__div_to_l_@quot+2,c
  3995  001BDE  0E00               	movlw	0
  3996  001BE0  6E0A               	movwf	__div_to_l_@quot+3,c
  3997  001BE2  0E7F               	movlw	127
  3998  001BE4  5E0C               	subwf	__div_to_l_@exp1,f,c
  3999  001BE6  500B               	movf	__div_to_l_@cntr,w,c
  4000  001BE8  0FA0               	addlw	160
  4001  001BEA  5E0C               	subwf	__div_to_l_@exp1,f,c
  4002  001BEC  0E20               	movlw	32
  4003  001BEE  6E0B               	movwf	__div_to_l_@cntr,c
  4004  001BF0  90D8               	bcf	status,0,c
  4005  001BF2  3607               	rlcf	__div_to_l_@quot,f,c
  4006  001BF4  3608               	rlcf	__div_to_l_@quot+1,f,c
  4007  001BF6  3609               	rlcf	__div_to_l_@quot+2,f,c
  4008  001BF8  360A               	rlcf	__div_to_l_@quot+3,f,c
  4009  001BFA  5004               	movf	__div_to_l_@f2,w,c
  4010  001BFC  5C01               	subwf	__div_to_l_@f1,w,c
  4011  001BFE  5005               	movf	__div_to_l_@f2+1,w,c
  4012  001C00  5802               	subwfb	__div_to_l_@f1+1,w,c
  4013  001C02  5006               	movf	__div_to_l_@f2+2,w,c
  4014  001C04  5803               	subwfb	__div_to_l_@f1+2,w,c
  4015  001C06  5007               	movf	__div_to_l_@f2+3,w,c
  4016  001C08  5804               	subwfb	__div_to_l_@f1+3,w,c
  4017  001C0A  A0D8               	btfss	status,0,c
  4018  001C0C  D009               	goto	l380
  4019  001C0E  5004               	movf	__div_to_l_@f2,w,c
  4020  001C10  5E01               	subwf	__div_to_l_@f1,f,c
  4021  001C12  5005               	movf	__div_to_l_@f2+1,w,c
  4022  001C14  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4023  001C16  5006               	movf	__div_to_l_@f2+2,w,c
  4024  001C18  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4025  001C1A  5007               	movf	__div_to_l_@f2+3,w,c
  4026  001C1C  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4027  001C1E  8007               	bsf	__div_to_l_@quot,0,c
  4028  001C20                     l380:
  4029  001C20  90D8               	bcf	status,0,c
  4030  001C22  3601               	rlcf	__div_to_l_@f1,f,c
  4031  001C24  3602               	rlcf	__div_to_l_@f1+1,f,c
  4032  001C26  3603               	rlcf	__div_to_l_@f1+2,f,c
  4033  001C28  3604               	rlcf	__div_to_l_@f1+3,f,c
  4034  001C2A  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4035  001C2C  D7E1               	goto	l379
  4036  001C2E  AE0C               	btfss	__div_to_l_@exp1,7,c
  4037  001C30  D016               	goto	l382
  4038  001C32  500C               	movf	__div_to_l_@exp1,w,c
  4039  001C34  0A80               	xorlw	128
  4040  001C36  0F9F               	addlw	159
  4041  001C38  B0D8               	btfsc	status,0,c
  4042  001C3A  D009               	goto	l383
  4043  001C3C  0E00               	movlw	0
  4044  001C3E  6E01               	movwf	?__div_to_l_,c
  4045  001C40  0E00               	movlw	0
  4046  001C42  6E02               	movwf	?__div_to_l_+1,c
  4047  001C44  0E00               	movlw	0
  4048  001C46  6E03               	movwf	?__div_to_l_+2,c
  4049  001C48  0E00               	movlw	0
  4050  001C4A  6E04               	movwf	?__div_to_l_+3,c
  4051  001C4C  0012               	return	
  4052  001C4E                     l383:
  4053  001C4E  90D8               	bcf	status,0,c
  4054  001C50  320A               	rrcf	__div_to_l_@quot+3,f,c
  4055  001C52  3209               	rrcf	__div_to_l_@quot+2,f,c
  4056  001C54  3208               	rrcf	__div_to_l_@quot+1,f,c
  4057  001C56  3207               	rrcf	__div_to_l_@quot,f,c
  4058  001C58  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4059  001C5A  D7F9               	goto	l383
  4060  001C5C  D015               	goto	u2180
  4061  001C5E                     l382:
  4062  001C5E  0E1F               	movlw	31
  4063  001C60  640C               	cpfsgt	__div_to_l_@exp1,c
  4064  001C62  D00F               	goto	l388
  4065  001C64  0E00               	movlw	0
  4066  001C66  6E01               	movwf	?__div_to_l_,c
  4067  001C68  0E00               	movlw	0
  4068  001C6A  6E02               	movwf	?__div_to_l_+1,c
  4069  001C6C  0E00               	movlw	0
  4070  001C6E  6E03               	movwf	?__div_to_l_+2,c
  4071  001C70  0E00               	movlw	0
  4072  001C72  6E04               	movwf	?__div_to_l_+3,c
  4073  001C74  0012               	return	
  4074  001C76  90D8               	bcf	status,0,c
  4075  001C78  3607               	rlcf	__div_to_l_@quot,f,c
  4076  001C7A  3608               	rlcf	__div_to_l_@quot+1,f,c
  4077  001C7C  3609               	rlcf	__div_to_l_@quot+2,f,c
  4078  001C7E  360A               	rlcf	__div_to_l_@quot+3,f,c
  4079  001C80  060C               	decf	__div_to_l_@exp1,f,c
  4080  001C82                     l388:
  4081  001C82  500C               	movf	__div_to_l_@exp1,w,c
  4082  001C84  A4D8               	btfss	status,2,c
  4083  001C86  D7F7               	goto	l389
  4084  001C88                     u2180:
  4085  001C88  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4086  001C8C  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4087  001C90  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4088  001C94  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4089  001C98  0012               	return		;funcret
  4090  001C9A                     __end_of__div_to_l_:
  4091                           	opt stack 0
  4092                           tblptru	equ	0xFF8
  4093                           tblptrh	equ	0xFF7
  4094                           tblptrl	equ	0xFF6
  4095                           tablat	equ	0xFF5
  4096                           prodh	equ	0xFF4
  4097                           prodl	equ	0xFF3
  4098                           postinc0	equ	0xFEE
  4099                           wreg	equ	0xFE8
  4100                           postdec1	equ	0xFE5
  4101                           fsr1l	equ	0xFE1
  4102                           indf2	equ	0xFDF
  4103                           postinc2	equ	0xFDE
  4104                           postdec2	equ	0xFDD
  4105                           fsr2h	equ	0xFDA
  4106                           fsr2l	equ	0xFD9
  4107                           status	equ	0xFD8
  4108                           
  4109 ;; *************** function ___lltoft *****************
  4110 ;; Defined at:
  4111 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  4112 ;; Parameters:    Size  Location     Type
  4113 ;;  c               4    8[COMRAM] unsigned long 
  4114 ;; Auto vars:     Size  Location     Type
  4115 ;;  exp             1   16[COMRAM] unsigned char 
  4116 ;; Return value:  Size  Location     Type
  4117 ;;                  3    8[COMRAM] float 
  4118 ;; Registers used:
  4119 ;;		wreg, status,2, status,0, cstack
  4120 ;; Tracked objects:
  4121 ;;		On entry : 0/0
  4122 ;;		On exit  : 0/0
  4123 ;;		Unchanged: 0/0
  4124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4125 ;;      Params:         4       0       0       0       0       0       0
  4126 ;;      Locals:         1       0       0       0       0       0       0
  4127 ;;      Temps:          4       0       0       0       0       0       0
  4128 ;;      Totals:         9       0       0       0       0       0       0
  4129 ;;Total ram usage:        9 bytes
  4130 ;; Hardware stack levels used:    1
  4131 ;; Hardware stack levels required when called:    1
  4132 ;; This function calls:
  4133 ;;		___ftpack
  4134 ;; This function is called by:
  4135 ;;		_sprintf
  4136 ;; This function uses a non-reentrant model
  4137 ;;
  4138                           
  4139                           	psect	text11
  4140  002266                     __ptext11:
  4141                           	opt stack 0
  4142  002266                     ___lltoft:
  4143                           	opt stack 28
  4144                           
  4145                           ;incstack = 0
  4146  002266  0E8E               	movlw	142
  4147  002268  6E11               	movwf	___lltoft@exp,c
  4148  00226A  D006               	goto	l587
  4149  00226C  90D8               	bcf	status,0,c
  4150  00226E  320C               	rrcf	___lltoft@c+3,f,c
  4151  002270  320B               	rrcf	___lltoft@c+2,f,c
  4152  002272  320A               	rrcf	___lltoft@c+1,f,c
  4153  002274  3209               	rrcf	___lltoft@c,f,c
  4154  002276  2A11               	incf	___lltoft@exp,f,c
  4155  002278                     l587:
  4156  002278  0E00               	movlw	0
  4157  00227A  1409               	andwf	___lltoft@c,w,c
  4158  00227C  6E0D               	movwf	??___lltoft& (0+255),c
  4159  00227E  0E00               	movlw	0
  4160  002280  140A               	andwf	___lltoft@c+1,w,c
  4161  002282  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4162  002284  0E00               	movlw	0
  4163  002286  140B               	andwf	___lltoft@c+2,w,c
  4164  002288  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4165  00228A  0EFF               	movlw	255
  4166  00228C  140C               	andwf	___lltoft@c+3,w,c
  4167  00228E  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4168  002290  500D               	movf	??___lltoft,w,c
  4169  002292  100E               	iorwf	??___lltoft+1,w,c
  4170  002294  100F               	iorwf	??___lltoft+2,w,c
  4171  002296  1010               	iorwf	??___lltoft+3,w,c
  4172  002298  A4D8               	btfss	status,2,c
  4173  00229A  D7E8               	goto	l588
  4174  00229C  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4175  0022A0  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4176  0022A4  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4177  0022A8  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4178  0022AC  0E00               	movlw	0
  4179  0022AE  6E05               	movwf	___ftpack@sign,c
  4180  0022B0  EC41  F00F         	call	___ftpack	;wreg free
  4181  0022B4  C001  F009         	movff	?___ftpack,?___lltoft
  4182  0022B8  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4183  0022BC  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4184  0022C0  0012               	return	
  4185  0022C2                     __end_of___lltoft:
  4186                           	opt stack 0
  4187                           tblptru	equ	0xFF8
  4188                           tblptrh	equ	0xFF7
  4189                           tblptrl	equ	0xFF6
  4190                           tablat	equ	0xFF5
  4191                           prodh	equ	0xFF4
  4192                           prodl	equ	0xFF3
  4193                           postinc0	equ	0xFEE
  4194                           wreg	equ	0xFE8
  4195                           postdec1	equ	0xFE5
  4196                           fsr1l	equ	0xFE1
  4197                           indf2	equ	0xFDF
  4198                           postinc2	equ	0xFDE
  4199                           postdec2	equ	0xFDD
  4200                           fsr2h	equ	0xFDA
  4201                           fsr2l	equ	0xFD9
  4202                           status	equ	0xFD8
  4203                           
  4204 ;; *************** function ___llmod *****************
  4205 ;; Defined at:
  4206 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4207 ;; Parameters:    Size  Location     Type
  4208 ;;  dividend        4   13[COMRAM] unsigned long 
  4209 ;;  divisor         4   17[COMRAM] unsigned long 
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;  counter         1   21[COMRAM] unsigned char 
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  4   13[COMRAM] unsigned long 
  4214 ;; Registers used:
  4215 ;;		wreg, status,2, status,0
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4221 ;;      Params:         8       0       0       0       0       0       0
  4222 ;;      Locals:         1       0       0       0       0       0       0
  4223 ;;      Temps:          0       0       0       0       0       0       0
  4224 ;;      Totals:         9       0       0       0       0       0       0
  4225 ;;Total ram usage:        9 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; This function calls:
  4228 ;;		Nothing
  4229 ;; This function is called by:
  4230 ;;		_sprintf
  4231 ;; This function uses a non-reentrant model
  4232 ;;
  4233                           
  4234                           	psect	text12
  4235  00219E                     __ptext12:
  4236                           	opt stack 0
  4237  00219E                     ___llmod:
  4238                           	opt stack 29
  4239                           
  4240                           ;incstack = 0
  4241  00219E  5012               	movf	___llmod@divisor,w,c
  4242  0021A0  1013               	iorwf	___llmod@divisor+1,w,c
  4243  0021A2  1014               	iorwf	___llmod@divisor+2,w,c
  4244  0021A4  1015               	iorwf	___llmod@divisor+3,w,c
  4245  0021A6  B4D8               	btfsc	status,2,c
  4246  0021A8  D024               	goto	l581
  4247  0021AA  0E01               	movlw	1
  4248  0021AC  6E16               	movwf	___llmod@counter,c
  4249  0021AE  D006               	goto	l576
  4250  0021B0  90D8               	bcf	status,0,c
  4251  0021B2  3612               	rlcf	___llmod@divisor,f,c
  4252  0021B4  3613               	rlcf	___llmod@divisor+1,f,c
  4253  0021B6  3614               	rlcf	___llmod@divisor+2,f,c
  4254  0021B8  3615               	rlcf	___llmod@divisor+3,f,c
  4255  0021BA  2A16               	incf	___llmod@counter,f,c
  4256  0021BC                     l576:
  4257  0021BC  AE15               	btfss	___llmod@divisor+3,7,c
  4258  0021BE  D7F8               	goto	l577
  4259  0021C0                     u2360:
  4260  0021C0  5012               	movf	___llmod@divisor,w,c
  4261  0021C2  5C0E               	subwf	___llmod@dividend,w,c
  4262  0021C4  5013               	movf	___llmod@divisor+1,w,c
  4263  0021C6  580F               	subwfb	___llmod@dividend+1,w,c
  4264  0021C8  5014               	movf	___llmod@divisor+2,w,c
  4265  0021CA  5810               	subwfb	___llmod@dividend+2,w,c
  4266  0021CC  5015               	movf	___llmod@divisor+3,w,c
  4267  0021CE  5811               	subwfb	___llmod@dividend+3,w,c
  4268  0021D0  A0D8               	btfss	status,0,c
  4269  0021D2  D008               	goto	l580
  4270  0021D4  5012               	movf	___llmod@divisor,w,c
  4271  0021D6  5E0E               	subwf	___llmod@dividend,f,c
  4272  0021D8  5013               	movf	___llmod@divisor+1,w,c
  4273  0021DA  5A0F               	subwfb	___llmod@dividend+1,f,c
  4274  0021DC  5014               	movf	___llmod@divisor+2,w,c
  4275  0021DE  5A10               	subwfb	___llmod@dividend+2,f,c
  4276  0021E0  5015               	movf	___llmod@divisor+3,w,c
  4277  0021E2  5A11               	subwfb	___llmod@dividend+3,f,c
  4278  0021E4                     l580:
  4279  0021E4  90D8               	bcf	status,0,c
  4280  0021E6  3215               	rrcf	___llmod@divisor+3,f,c
  4281  0021E8  3214               	rrcf	___llmod@divisor+2,f,c
  4282  0021EA  3213               	rrcf	___llmod@divisor+1,f,c
  4283  0021EC  3212               	rrcf	___llmod@divisor,f,c
  4284  0021EE  2E16               	decfsz	___llmod@counter,f,c
  4285  0021F0  D7E7               	goto	u2360
  4286  0021F2                     l581:
  4287  0021F2  C00E  F00E         	movff	___llmod@dividend,?___llmod
  4288  0021F6  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  4289  0021FA  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  4290  0021FE  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  4291  002202  0012               	return		;funcret
  4292  002204                     __end_of___llmod:
  4293                           	opt stack 0
  4294                           tblptru	equ	0xFF8
  4295                           tblptrh	equ	0xFF7
  4296                           tblptrl	equ	0xFF6
  4297                           tablat	equ	0xFF5
  4298                           prodh	equ	0xFF4
  4299                           prodl	equ	0xFF3
  4300                           postinc0	equ	0xFEE
  4301                           wreg	equ	0xFE8
  4302                           postdec1	equ	0xFE5
  4303                           fsr1l	equ	0xFE1
  4304                           indf2	equ	0xFDF
  4305                           postinc2	equ	0xFDE
  4306                           postdec2	equ	0xFDD
  4307                           fsr2h	equ	0xFDA
  4308                           fsr2l	equ	0xFD9
  4309                           status	equ	0xFD8
  4310                           
  4311 ;; *************** function ___lldiv *****************
  4312 ;; Defined at:
  4313 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;  dividend        4    0[COMRAM] unsigned long 
  4316 ;;  divisor         4    4[COMRAM] unsigned long 
  4317 ;; Auto vars:     Size  Location     Type
  4318 ;;  quotient        4    8[COMRAM] unsigned long 
  4319 ;;  counter         1   12[COMRAM] unsigned char 
  4320 ;; Return value:  Size  Location     Type
  4321 ;;                  4    0[COMRAM] unsigned long 
  4322 ;; Registers used:
  4323 ;;		wreg, status,2, status,0
  4324 ;; Tracked objects:
  4325 ;;		On entry : 0/0
  4326 ;;		On exit  : 0/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4329 ;;      Params:         8       0       0       0       0       0       0
  4330 ;;      Locals:         5       0       0       0       0       0       0
  4331 ;;      Temps:          0       0       0       0       0       0       0
  4332 ;;      Totals:        13       0       0       0       0       0       0
  4333 ;;Total ram usage:       13 bytes
  4334 ;; Hardware stack levels used:    1
  4335 ;; This function calls:
  4336 ;;		Nothing
  4337 ;; This function is called by:
  4338 ;;		_sprintf
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           	psect	text13
  4343  002044                     __ptext13:
  4344                           	opt stack 0
  4345  002044                     ___lldiv:
  4346                           	opt stack 29
  4347                           
  4348                           ;incstack = 0
  4349  002044  0E00               	movlw	0
  4350  002046  6E09               	movwf	___lldiv@quotient,c
  4351  002048  0E00               	movlw	0
  4352  00204A  6E0A               	movwf	___lldiv@quotient+1,c
  4353  00204C  0E00               	movlw	0
  4354  00204E  6E0B               	movwf	___lldiv@quotient+2,c
  4355  002050  0E00               	movlw	0
  4356  002052  6E0C               	movwf	___lldiv@quotient+3,c
  4357  002054  5005               	movf	___lldiv@divisor,w,c
  4358  002056  1006               	iorwf	___lldiv@divisor+1,w,c
  4359  002058  1007               	iorwf	___lldiv@divisor+2,w,c
  4360  00205A  1008               	iorwf	___lldiv@divisor+3,w,c
  4361  00205C  B4D8               	btfsc	status,2,c
  4362  00205E  D02A               	goto	l571
  4363  002060  0E01               	movlw	1
  4364  002062  6E0D               	movwf	___lldiv@counter,c
  4365  002064  D006               	goto	l566
  4366  002066  90D8               	bcf	status,0,c
  4367  002068  3605               	rlcf	___lldiv@divisor,f,c
  4368  00206A  3606               	rlcf	___lldiv@divisor+1,f,c
  4369  00206C  3607               	rlcf	___lldiv@divisor+2,f,c
  4370  00206E  3608               	rlcf	___lldiv@divisor+3,f,c
  4371  002070  2A0D               	incf	___lldiv@counter,f,c
  4372  002072                     l566:
  4373  002072  AE08               	btfss	___lldiv@divisor+3,7,c
  4374  002074  D7F8               	goto	l567
  4375  002076                     u2330:
  4376  002076  90D8               	bcf	status,0,c
  4377  002078  3609               	rlcf	___lldiv@quotient,f,c
  4378  00207A  360A               	rlcf	___lldiv@quotient+1,f,c
  4379  00207C  360B               	rlcf	___lldiv@quotient+2,f,c
  4380  00207E  360C               	rlcf	___lldiv@quotient+3,f,c
  4381  002080  5005               	movf	___lldiv@divisor,w,c
  4382  002082  5C01               	subwf	___lldiv@dividend,w,c
  4383  002084  5006               	movf	___lldiv@divisor+1,w,c
  4384  002086  5802               	subwfb	___lldiv@dividend+1,w,c
  4385  002088  5007               	movf	___lldiv@divisor+2,w,c
  4386  00208A  5803               	subwfb	___lldiv@dividend+2,w,c
  4387  00208C  5008               	movf	___lldiv@divisor+3,w,c
  4388  00208E  5804               	subwfb	___lldiv@dividend+3,w,c
  4389  002090  A0D8               	btfss	status,0,c
  4390  002092  D009               	goto	l570
  4391  002094  5005               	movf	___lldiv@divisor,w,c
  4392  002096  5E01               	subwf	___lldiv@dividend,f,c
  4393  002098  5006               	movf	___lldiv@divisor+1,w,c
  4394  00209A  5A02               	subwfb	___lldiv@dividend+1,f,c
  4395  00209C  5007               	movf	___lldiv@divisor+2,w,c
  4396  00209E  5A03               	subwfb	___lldiv@dividend+2,f,c
  4397  0020A0  5008               	movf	___lldiv@divisor+3,w,c
  4398  0020A2  5A04               	subwfb	___lldiv@dividend+3,f,c
  4399  0020A4  8009               	bsf	___lldiv@quotient,0,c
  4400  0020A6                     l570:
  4401  0020A6  90D8               	bcf	status,0,c
  4402  0020A8  3208               	rrcf	___lldiv@divisor+3,f,c
  4403  0020AA  3207               	rrcf	___lldiv@divisor+2,f,c
  4404  0020AC  3206               	rrcf	___lldiv@divisor+1,f,c
  4405  0020AE  3205               	rrcf	___lldiv@divisor,f,c
  4406  0020B0  2E0D               	decfsz	___lldiv@counter,f,c
  4407  0020B2  D7E1               	goto	u2330
  4408  0020B4                     l571:
  4409  0020B4  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4410  0020B8  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4411  0020BC  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4412  0020C0  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4413  0020C4  0012               	return		;funcret
  4414  0020C6                     __end_of___lldiv:
  4415                           	opt stack 0
  4416                           tblptru	equ	0xFF8
  4417                           tblptrh	equ	0xFF7
  4418                           tblptrl	equ	0xFF6
  4419                           tablat	equ	0xFF5
  4420                           prodh	equ	0xFF4
  4421                           prodl	equ	0xFF3
  4422                           postinc0	equ	0xFEE
  4423                           wreg	equ	0xFE8
  4424                           postdec1	equ	0xFE5
  4425                           fsr1l	equ	0xFE1
  4426                           indf2	equ	0xFDF
  4427                           postinc2	equ	0xFDE
  4428                           postdec2	equ	0xFDD
  4429                           fsr2h	equ	0xFDA
  4430                           fsr2l	equ	0xFD9
  4431                           status	equ	0xFD8
  4432                           
  4433 ;; *************** function ___fttol *****************
  4434 ;; Defined at:
  4435 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  4436 ;; Parameters:    Size  Location     Type
  4437 ;;  f1              3   42[COMRAM] float 
  4438 ;; Auto vars:     Size  Location     Type
  4439 ;;  lval            4   52[COMRAM] unsigned long 
  4440 ;;  exp1            1   56[COMRAM] unsigned char 
  4441 ;;  sign1           1   51[COMRAM] unsigned char 
  4442 ;; Return value:  Size  Location     Type
  4443 ;;                  4   42[COMRAM] long 
  4444 ;; Registers used:
  4445 ;;		wreg, status,2, status,0
  4446 ;; Tracked objects:
  4447 ;;		On entry : 0/0
  4448 ;;		On exit  : 0/0
  4449 ;;		Unchanged: 0/0
  4450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4451 ;;      Params:         4       0       0       0       0       0       0
  4452 ;;      Locals:         6       0       0       0       0       0       0
  4453 ;;      Temps:          5       0       0       0       0       0       0
  4454 ;;      Totals:        15       0       0       0       0       0       0
  4455 ;;Total ram usage:       15 bytes
  4456 ;; Hardware stack levels used:    1
  4457 ;; This function calls:
  4458 ;;		Nothing
  4459 ;; This function is called by:
  4460 ;;		_sprintf
  4461 ;; This function uses a non-reentrant model
  4462 ;;
  4463                           
  4464                           	psect	text14
  4465  001D8E                     __ptext14:
  4466                           	opt stack 0
  4467  001D8E                     ___fttol:
  4468                           	opt stack 29
  4469                           
  4470                           ;incstack = 0
  4471  001D8E  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4472  001D92  6A30               	clrf	(??___fttol+1)& (0+255),c
  4473  001D94  6A31               	clrf	(??___fttol+2)& (0+255),c
  4474  001D96  342C               	rlcf	___fttol@f1+1,w,c
  4475  001D98  362F               	rlcf	??___fttol& (0+255),f,c
  4476  001D9A  E301               	bnc	u2241
  4477  001D9C  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4478  001D9E                     u2241:
  4479  001D9E  502F               	movf	??___fttol,w,c
  4480  001DA0  6E39               	movwf	___fttol@exp1,c
  4481  001DA2  5039               	movf	___fttol@exp1,w,c
  4482  001DA4  A4D8               	btfss	status,2,c
  4483  001DA6  D009               	goto	l525
  4484  001DA8  0E00               	movlw	0
  4485  001DAA  6E2B               	movwf	?___fttol,c
  4486  001DAC  0E00               	movlw	0
  4487  001DAE  6E2C               	movwf	?___fttol+1,c
  4488  001DB0  0E00               	movlw	0
  4489  001DB2  6E2D               	movwf	?___fttol+2,c
  4490  001DB4  0E00               	movlw	0
  4491  001DB6  6E2E               	movwf	?___fttol+3,c
  4492  001DB8  0012               	return	
  4493  001DBA                     l525:
  4494  001DBA  0E17               	movlw	23
  4495  001DBC  6E2F               	movwf	??___fttol& (0+255),c
  4496  001DBE  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4497  001DC2  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4498  001DC6  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4499  001DCA  282F               	incf	??___fttol,w,c
  4500  001DCC  6E33               	movwf	(??___fttol+4)& (0+255),c
  4501  001DCE  D004               	goto	u2260
  4502  001DD0                     u2265:
  4503  001DD0  90D8               	bcf	status,0,c
  4504  001DD2  3232               	rrcf	??___fttol+3,f,c
  4505  001DD4  3231               	rrcf	??___fttol+2,f,c
  4506  001DD6  3230               	rrcf	??___fttol+1,f,c
  4507  001DD8                     u2260:
  4508  001DD8  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4509  001DDA  D7FA               	goto	u2265
  4510  001DDC  5030               	movf	??___fttol+1,w,c
  4511  001DDE  6E34               	movwf	___fttol@sign1,c
  4512  001DE0  8E2C               	bsf	___fttol@f1+1,7,c
  4513  001DE2  0EFF               	movlw	255
  4514  001DE4  162B               	andwf	___fttol@f1,f,c
  4515  001DE6  0EFF               	movlw	255
  4516  001DE8  162C               	andwf	___fttol@f1+1,f,c
  4517  001DEA  0E00               	movlw	0
  4518  001DEC  162D               	andwf	___fttol@f1+2,f,c
  4519  001DEE  502B               	movf	___fttol@f1,w,c
  4520  001DF0  6E35               	movwf	___fttol@lval,c
  4521  001DF2  502C               	movf	___fttol@f1+1,w,c
  4522  001DF4  6E36               	movwf	___fttol@lval+1,c
  4523  001DF6  502D               	movf	___fttol@f1+2,w,c
  4524  001DF8  6E37               	movwf	___fttol@lval+2,c
  4525  001DFA  6A38               	clrf	___fttol@lval+3,c
  4526  001DFC  0E8E               	movlw	142
  4527  001DFE  5E39               	subwf	___fttol@exp1,f,c
  4528  001E00  AE39               	btfss	___fttol@exp1,7,c
  4529  001E02  D016               	goto	l527
  4530  001E04  5039               	movf	___fttol@exp1,w,c
  4531  001E06  0A80               	xorlw	128
  4532  001E08  0F8F               	addlw	143
  4533  001E0A  B0D8               	btfsc	status,0,c
  4534  001E0C  D009               	goto	l528
  4535  001E0E  0E00               	movlw	0
  4536  001E10  6E2B               	movwf	?___fttol,c
  4537  001E12  0E00               	movlw	0
  4538  001E14  6E2C               	movwf	?___fttol+1,c
  4539  001E16  0E00               	movlw	0
  4540  001E18  6E2D               	movwf	?___fttol+2,c
  4541  001E1A  0E00               	movlw	0
  4542  001E1C  6E2E               	movwf	?___fttol+3,c
  4543  001E1E  0012               	return	
  4544  001E20                     l528:
  4545  001E20  90D8               	bcf	status,0,c
  4546  001E22  3238               	rrcf	___fttol@lval+3,f,c
  4547  001E24  3237               	rrcf	___fttol@lval+2,f,c
  4548  001E26  3236               	rrcf	___fttol@lval+1,f,c
  4549  001E28  3235               	rrcf	___fttol@lval,f,c
  4550  001E2A  3E39               	incfsz	___fttol@exp1,f,c
  4551  001E2C  D7F9               	goto	l528
  4552  001E2E  D015               	goto	u2300
  4553  001E30                     l527:
  4554  001E30  0E17               	movlw	23
  4555  001E32  6439               	cpfsgt	___fttol@exp1,c
  4556  001E34  D00F               	goto	l533
  4557  001E36  0E00               	movlw	0
  4558  001E38  6E2B               	movwf	?___fttol,c
  4559  001E3A  0E00               	movlw	0
  4560  001E3C  6E2C               	movwf	?___fttol+1,c
  4561  001E3E  0E00               	movlw	0
  4562  001E40  6E2D               	movwf	?___fttol+2,c
  4563  001E42  0E00               	movlw	0
  4564  001E44  6E2E               	movwf	?___fttol+3,c
  4565  001E46  0012               	return	
  4566  001E48  90D8               	bcf	status,0,c
  4567  001E4A  3635               	rlcf	___fttol@lval,f,c
  4568  001E4C  3636               	rlcf	___fttol@lval+1,f,c
  4569  001E4E  3637               	rlcf	___fttol@lval+2,f,c
  4570  001E50  3638               	rlcf	___fttol@lval+3,f,c
  4571  001E52  0639               	decf	___fttol@exp1,f,c
  4572  001E54                     l533:
  4573  001E54  5039               	movf	___fttol@exp1,w,c
  4574  001E56  A4D8               	btfss	status,2,c
  4575  001E58  D7F7               	goto	l534
  4576  001E5A                     u2300:
  4577  001E5A  5034               	movf	___fttol@sign1,w,c
  4578  001E5C  B4D8               	btfsc	status,2,c
  4579  001E5E  D008               	goto	l536
  4580  001E60  1E38               	comf	___fttol@lval+3,f,c
  4581  001E62  1E37               	comf	___fttol@lval+2,f,c
  4582  001E64  1E36               	comf	___fttol@lval+1,f,c
  4583  001E66  6C35               	negf	___fttol@lval,c
  4584  001E68  0E00               	movlw	0
  4585  001E6A  2236               	addwfc	___fttol@lval+1,f,c
  4586  001E6C  2237               	addwfc	___fttol@lval+2,f,c
  4587  001E6E  2238               	addwfc	___fttol@lval+3,f,c
  4588  001E70                     l536:
  4589  001E70  C035  F02B         	movff	___fttol@lval,?___fttol
  4590  001E74  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4591  001E78  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4592  001E7C  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4593  001E80  0012               	return	
  4594  001E82                     __end_of___fttol:
  4595                           	opt stack 0
  4596                           tblptru	equ	0xFF8
  4597                           tblptrh	equ	0xFF7
  4598                           tblptrl	equ	0xFF6
  4599                           tablat	equ	0xFF5
  4600                           prodh	equ	0xFF4
  4601                           prodl	equ	0xFF3
  4602                           postinc0	equ	0xFEE
  4603                           wreg	equ	0xFE8
  4604                           postdec1	equ	0xFE5
  4605                           fsr1l	equ	0xFE1
  4606                           indf2	equ	0xFDF
  4607                           postinc2	equ	0xFDE
  4608                           postdec2	equ	0xFDD
  4609                           fsr2h	equ	0xFDA
  4610                           fsr2l	equ	0xFD9
  4611                           status	equ	0xFD8
  4612                           
  4613 ;; *************** function ___ftsub *****************
  4614 ;; Defined at:
  4615 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  4616 ;; Parameters:    Size  Location     Type
  4617 ;;  f1              3   57[COMRAM] float 
  4618 ;;  f2              3   60[COMRAM] float 
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;		None
  4621 ;; Return value:  Size  Location     Type
  4622 ;;                  3   57[COMRAM] float 
  4623 ;; Registers used:
  4624 ;;		wreg, status,2, status,0, cstack
  4625 ;; Tracked objects:
  4626 ;;		On entry : 0/0
  4627 ;;		On exit  : 0/0
  4628 ;;		Unchanged: 0/0
  4629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4630 ;;      Params:         6       0       0       0       0       0       0
  4631 ;;      Locals:         0       0       0       0       0       0       0
  4632 ;;      Temps:          0       0       0       0       0       0       0
  4633 ;;      Totals:         6       0       0       0       0       0       0
  4634 ;;Total ram usage:        6 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; Hardware stack levels required when called:    2
  4637 ;; This function calls:
  4638 ;;		___ftadd
  4639 ;; This function is called by:
  4640 ;;		_sprintf
  4641 ;; This function uses a non-reentrant model
  4642 ;;
  4643                           
  4644                           	psect	text15
  4645  002318                     __ptext15:
  4646                           	opt stack 0
  4647  002318                     ___ftsub:
  4648                           	opt stack 27
  4649                           
  4650                           ;incstack = 0
  4651  002318  503D               	movf	___ftsub@f2,w,c
  4652  00231A  103E               	iorwf	___ftsub@f2+1,w,c
  4653  00231C  103F               	iorwf	___ftsub@f2+2,w,c
  4654  00231E  B4D8               	btfsc	status,2,c
  4655  002320  D006               	goto	l521
  4656  002322  0E00               	movlw	0
  4657  002324  1A3D               	xorwf	___ftsub@f2,f,c
  4658  002326  0E00               	movlw	0
  4659  002328  1A3E               	xorwf	___ftsub@f2+1,f,c
  4660  00232A  0E80               	movlw	128
  4661  00232C  1A3F               	xorwf	___ftsub@f2+2,f,c
  4662  00232E                     l521:
  4663  00232E  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4664  002332  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4665  002336  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4666  00233A  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4667  00233E  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4668  002342  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4669  002346  EC81  F00A         	call	___ftadd	;wreg free
  4670  00234A  C02E  F03A         	movff	?___ftadd,?___ftsub
  4671  00234E  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4672  002352  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4673  002356  0012               	return	
  4674  002358                     __end_of___ftsub:
  4675                           	opt stack 0
  4676                           tblptru	equ	0xFF8
  4677                           tblptrh	equ	0xFF7
  4678                           tblptrl	equ	0xFF6
  4679                           tablat	equ	0xFF5
  4680                           prodh	equ	0xFF4
  4681                           prodl	equ	0xFF3
  4682                           postinc0	equ	0xFEE
  4683                           wreg	equ	0xFE8
  4684                           postdec1	equ	0xFE5
  4685                           fsr1l	equ	0xFE1
  4686                           indf2	equ	0xFDF
  4687                           postinc2	equ	0xFDE
  4688                           postdec2	equ	0xFDD
  4689                           fsr2h	equ	0xFDA
  4690                           fsr2l	equ	0xFD9
  4691                           status	equ	0xFD8
  4692                           
  4693 ;; *************** function ___ftadd *****************
  4694 ;; Defined at:
  4695 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4696 ;; Parameters:    Size  Location     Type
  4697 ;;  f1              3   45[COMRAM] float 
  4698 ;;  f2              3   48[COMRAM] float 
  4699 ;; Auto vars:     Size  Location     Type
  4700 ;;  exp1            1   56[COMRAM] unsigned char 
  4701 ;;  exp2            1   55[COMRAM] unsigned char 
  4702 ;;  sign            1   54[COMRAM] unsigned char 
  4703 ;; Return value:  Size  Location     Type
  4704 ;;                  3   45[COMRAM] float 
  4705 ;; Registers used:
  4706 ;;		wreg, status,2, status,0, cstack
  4707 ;; Tracked objects:
  4708 ;;		On entry : 0/0
  4709 ;;		On exit  : 0/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4712 ;;      Params:         6       0       0       0       0       0       0
  4713 ;;      Locals:         3       0       0       0       0       0       0
  4714 ;;      Temps:          3       0       0       0       0       0       0
  4715 ;;      Totals:        12       0       0       0       0       0       0
  4716 ;;Total ram usage:       12 bytes
  4717 ;; Hardware stack levels used:    1
  4718 ;; Hardware stack levels required when called:    1
  4719 ;; This function calls:
  4720 ;;		___ftpack
  4721 ;; This function is called by:
  4722 ;;		_sprintf
  4723 ;;		___ftsub
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           	psect	text16
  4728  001502                     __ptext16:
  4729                           	opt stack 0
  4730  001502                     ___ftadd:
  4731                           	opt stack 27
  4732                           
  4733                           ;incstack = 0
  4734  001502  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4735  001506  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4736  001508  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4737  00150A  342F               	rlcf	___ftadd@f1+1,w,c
  4738  00150C  3634               	rlcf	??___ftadd& (0+255),f,c
  4739  00150E  E301               	bnc	u1491
  4740  001510  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4741  001512                     u1491:
  4742  001512  5034               	movf	??___ftadd,w,c
  4743  001514  6E39               	movwf	___ftadd@exp1,c
  4744  001516  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4745  00151A  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4746  00151C  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4747  00151E  3432               	rlcf	___ftadd@f2+1,w,c
  4748  001520  3634               	rlcf	??___ftadd& (0+255),f,c
  4749  001522  E301               	bnc	u1501
  4750  001524  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4751  001526                     u1501:
  4752  001526  5034               	movf	??___ftadd,w,c
  4753  001528  6E38               	movwf	___ftadd@exp2,c
  4754  00152A  5039               	movf	___ftadd@exp1,w,c
  4755  00152C  B4D8               	btfsc	status,2,c
  4756  00152E  D00B               	goto	u1530
  4757  001530  5038               	movf	___ftadd@exp2,w,c
  4758  001532  5C39               	subwf	___ftadd@exp1,w,c
  4759  001534  B0D8               	btfsc	status,0,c
  4760  001536  D00E               	goto	l439
  4761  001538  5039               	movf	___ftadd@exp1,w,c
  4762  00153A  0800               	sublw	0
  4763  00153C  2438               	addwf	___ftadd@exp2,w,c
  4764  00153E  6E34               	movwf	??___ftadd& (0+255),c
  4765  001540  0E18               	movlw	24
  4766  001542  6434               	cpfsgt	??___ftadd,c
  4767  001544  D007               	goto	l439
  4768  001546                     u1530:
  4769  001546  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4770  00154A  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4771  00154E  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4772  001552  0012               	return	
  4773  001554                     l439:
  4774  001554  5038               	movf	___ftadd@exp2,w,c
  4775  001556  B4D8               	btfsc	status,2,c
  4776  001558  D00B               	goto	u1560
  4777  00155A  5039               	movf	___ftadd@exp1,w,c
  4778  00155C  5C38               	subwf	___ftadd@exp2,w,c
  4779  00155E  B0D8               	btfsc	status,0,c
  4780  001560  D00E               	goto	l443
  4781  001562  5038               	movf	___ftadd@exp2,w,c
  4782  001564  0800               	sublw	0
  4783  001566  2439               	addwf	___ftadd@exp1,w,c
  4784  001568  6E34               	movwf	??___ftadd& (0+255),c
  4785  00156A  0E18               	movlw	24
  4786  00156C  6434               	cpfsgt	??___ftadd,c
  4787  00156E  D007               	goto	l443
  4788  001570                     u1560:
  4789  001570  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4790  001574  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4791  001578  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4792  00157C  0012               	return	
  4793  00157E                     l443:
  4794  00157E  0E06               	movlw	6
  4795  001580  6E37               	movwf	___ftadd@sign,c
  4796  001582  BE30               	btfsc	___ftadd@f1+2,7,c
  4797  001584  8E37               	bsf	___ftadd@sign,7,c
  4798  001586  BE33               	btfsc	___ftadd@f2+2,7,c
  4799  001588  8C37               	bsf	___ftadd@sign,6,c
  4800  00158A  8E2F               	bsf	___ftadd@f1+1,7,c
  4801  00158C  0EFF               	movlw	255
  4802  00158E  162E               	andwf	___ftadd@f1,f,c
  4803  001590  0EFF               	movlw	255
  4804  001592  162F               	andwf	___ftadd@f1+1,f,c
  4805  001594  0E00               	movlw	0
  4806  001596  1630               	andwf	___ftadd@f1+2,f,c
  4807  001598  8E32               	bsf	___ftadd@f2+1,7,c
  4808  00159A  0EFF               	movlw	255
  4809  00159C  1631               	andwf	___ftadd@f2,f,c
  4810  00159E  0EFF               	movlw	255
  4811  0015A0  1632               	andwf	___ftadd@f2+1,f,c
  4812  0015A2  0E00               	movlw	0
  4813  0015A4  1633               	andwf	___ftadd@f2+2,f,c
  4814  0015A6  5038               	movf	___ftadd@exp2,w,c
  4815  0015A8  5C39               	subwf	___ftadd@exp1,w,c
  4816  0015AA  B0D8               	btfsc	status,0,c
  4817  0015AC  D01B               	goto	l448
  4818  0015AE                     u1590:
  4819  0015AE  90D8               	bcf	status,0,c
  4820  0015B0  3631               	rlcf	___ftadd@f2,f,c
  4821  0015B2  3632               	rlcf	___ftadd@f2+1,f,c
  4822  0015B4  3633               	rlcf	___ftadd@f2+2,f,c
  4823  0015B6  0638               	decf	___ftadd@exp2,f,c
  4824  0015B8  5039               	movf	___ftadd@exp1,w,c
  4825  0015BA  1838               	xorwf	___ftadd@exp2,w,c
  4826  0015BC  B4D8               	btfsc	status,2,c
  4827  0015BE  D00D               	goto	l453
  4828  0015C0  0637               	decf	___ftadd@sign,f,c
  4829  0015C2  C037  F034         	movff	___ftadd@sign,??___ftadd
  4830  0015C6  0E07               	movlw	7
  4831  0015C8  1634               	andwf	??___ftadd,f,c
  4832  0015CA  B4D8               	btfsc	status,2,c
  4833  0015CC  D006               	goto	l453
  4834  0015CE  D7EF               	goto	u1590
  4835  0015D0  90D8               	bcf	status,0,c
  4836  0015D2  3230               	rrcf	___ftadd@f1+2,f,c
  4837  0015D4  322F               	rrcf	___ftadd@f1+1,f,c
  4838  0015D6  322E               	rrcf	___ftadd@f1,f,c
  4839  0015D8  2A39               	incf	___ftadd@exp1,f,c
  4840  0015DA                     l453:
  4841  0015DA  5038               	movf	___ftadd@exp2,w,c
  4842  0015DC  1839               	xorwf	___ftadd@exp1,w,c
  4843  0015DE  B4D8               	btfsc	status,2,c
  4844  0015E0  D01F               	goto	u1660
  4845  0015E2  D7F6               	goto	l454
  4846  0015E4                     l448:
  4847  0015E4  5039               	movf	___ftadd@exp1,w,c
  4848  0015E6  5C38               	subwf	___ftadd@exp2,w,c
  4849  0015E8  B0D8               	btfsc	status,0,c
  4850  0015EA  D01A               	goto	u1660
  4851  0015EC                     u1630:
  4852  0015EC  90D8               	bcf	status,0,c
  4853  0015EE  362E               	rlcf	___ftadd@f1,f,c
  4854  0015F0  362F               	rlcf	___ftadd@f1+1,f,c
  4855  0015F2  3630               	rlcf	___ftadd@f1+2,f,c
  4856  0015F4  0639               	decf	___ftadd@exp1,f,c
  4857  0015F6  5039               	movf	___ftadd@exp1,w,c
  4858  0015F8  1838               	xorwf	___ftadd@exp2,w,c
  4859  0015FA  B4D8               	btfsc	status,2,c
  4860  0015FC  D00D               	goto	l462
  4861  0015FE  0637               	decf	___ftadd@sign,f,c
  4862  001600  C037  F034         	movff	___ftadd@sign,??___ftadd
  4863  001604  0E07               	movlw	7
  4864  001606  1634               	andwf	??___ftadd,f,c
  4865  001608  B4D8               	btfsc	status,2,c
  4866  00160A  D006               	goto	l462
  4867  00160C  D7EF               	goto	u1630
  4868  00160E  90D8               	bcf	status,0,c
  4869  001610  3233               	rrcf	___ftadd@f2+2,f,c
  4870  001612  3232               	rrcf	___ftadd@f2+1,f,c
  4871  001614  3231               	rrcf	___ftadd@f2,f,c
  4872  001616  2A38               	incf	___ftadd@exp2,f,c
  4873  001618                     l462:
  4874  001618  5038               	movf	___ftadd@exp2,w,c
  4875  00161A  1839               	xorwf	___ftadd@exp1,w,c
  4876  00161C  A4D8               	btfss	status,2,c
  4877  00161E  D7F7               	goto	l463
  4878  001620                     u1660:
  4879  001620  AE37               	btfss	___ftadd@sign,7,c
  4880  001622  D00C               	goto	l465
  4881  001624  0EFF               	movlw	255
  4882  001626  1A2E               	xorwf	___ftadd@f1,f,c
  4883  001628  0EFF               	movlw	255
  4884  00162A  1A2F               	xorwf	___ftadd@f1+1,f,c
  4885  00162C  0EFF               	movlw	255
  4886  00162E  1A30               	xorwf	___ftadd@f1+2,f,c
  4887  001630  0E01               	movlw	1
  4888  001632  262E               	addwf	___ftadd@f1,f,c
  4889  001634  0E00               	movlw	0
  4890  001636  222F               	addwfc	___ftadd@f1+1,f,c
  4891  001638  0E00               	movlw	0
  4892  00163A  2230               	addwfc	___ftadd@f1+2,f,c
  4893  00163C                     l465:
  4894  00163C  AC37               	btfss	___ftadd@sign,6,c
  4895  00163E  D00C               	goto	l466
  4896  001640  0EFF               	movlw	255
  4897  001642  1A31               	xorwf	___ftadd@f2,f,c
  4898  001644  0EFF               	movlw	255
  4899  001646  1A32               	xorwf	___ftadd@f2+1,f,c
  4900  001648  0EFF               	movlw	255
  4901  00164A  1A33               	xorwf	___ftadd@f2+2,f,c
  4902  00164C  0E01               	movlw	1
  4903  00164E  2631               	addwf	___ftadd@f2,f,c
  4904  001650  0E00               	movlw	0
  4905  001652  2232               	addwfc	___ftadd@f2+1,f,c
  4906  001654  0E00               	movlw	0
  4907  001656  2233               	addwfc	___ftadd@f2+2,f,c
  4908  001658                     l466:
  4909  001658  0E00               	movlw	0
  4910  00165A  6E37               	movwf	___ftadd@sign,c
  4911  00165C  502E               	movf	___ftadd@f1,w,c
  4912  00165E  2631               	addwf	___ftadd@f2,f,c
  4913  001660  502F               	movf	___ftadd@f1+1,w,c
  4914  001662  2232               	addwfc	___ftadd@f2+1,f,c
  4915  001664  5030               	movf	___ftadd@f1+2,w,c
  4916  001666  2233               	addwfc	___ftadd@f2+2,f,c
  4917  001668  AE33               	btfss	___ftadd@f2+2,7,c
  4918  00166A  D00E               	goto	l467
  4919  00166C  0EFF               	movlw	255
  4920  00166E  1A31               	xorwf	___ftadd@f2,f,c
  4921  001670  0EFF               	movlw	255
  4922  001672  1A32               	xorwf	___ftadd@f2+1,f,c
  4923  001674  0EFF               	movlw	255
  4924  001676  1A33               	xorwf	___ftadd@f2+2,f,c
  4925  001678  0E01               	movlw	1
  4926  00167A  2631               	addwf	___ftadd@f2,f,c
  4927  00167C  0E00               	movlw	0
  4928  00167E  2232               	addwfc	___ftadd@f2+1,f,c
  4929  001680  0E00               	movlw	0
  4930  001682  2233               	addwfc	___ftadd@f2+2,f,c
  4931  001684  0E01               	movlw	1
  4932  001686  6E37               	movwf	___ftadd@sign,c
  4933  001688                     l467:
  4934  001688  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  4935  00168C  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4936  001690  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4937  001694  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  4938  001698  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  4939  00169C  EC41  F00F         	call	___ftpack	;wreg free
  4940  0016A0  C001  F02E         	movff	?___ftpack,?___ftadd
  4941  0016A4  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  4942  0016A8  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  4943  0016AC  0012               	return	
  4944  0016AE                     __end_of___ftadd:
  4945                           	opt stack 0
  4946                           tblptru	equ	0xFF8
  4947                           tblptrh	equ	0xFF7
  4948                           tblptrl	equ	0xFF6
  4949                           tablat	equ	0xFF5
  4950                           prodh	equ	0xFF4
  4951                           prodl	equ	0xFF3
  4952                           postinc0	equ	0xFEE
  4953                           wreg	equ	0xFE8
  4954                           postdec1	equ	0xFE5
  4955                           fsr1l	equ	0xFE1
  4956                           indf2	equ	0xFDF
  4957                           postinc2	equ	0xFDE
  4958                           postdec2	equ	0xFDD
  4959                           fsr2h	equ	0xFDA
  4960                           fsr2l	equ	0xFD9
  4961                           status	equ	0xFD8
  4962                           
  4963 ;; *************** function ___ftpack *****************
  4964 ;; Defined at:
  4965 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  4966 ;; Parameters:    Size  Location     Type
  4967 ;;  arg             3    0[COMRAM] unsigned um
  4968 ;;  exp             1    3[COMRAM] unsigned char 
  4969 ;;  sign            1    4[COMRAM] unsigned char 
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;		None
  4972 ;; Return value:  Size  Location     Type
  4973 ;;                  3    0[COMRAM] float 
  4974 ;; Registers used:
  4975 ;;		wreg, status,2, status,0
  4976 ;; Tracked objects:
  4977 ;;		On entry : 0/0
  4978 ;;		On exit  : 0/0
  4979 ;;		Unchanged: 0/0
  4980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4981 ;;      Params:         5       0       0       0       0       0       0
  4982 ;;      Locals:         0       0       0       0       0       0       0
  4983 ;;      Temps:          3       0       0       0       0       0       0
  4984 ;;      Totals:         8       0       0       0       0       0       0
  4985 ;;Total ram usage:        8 bytes
  4986 ;; Hardware stack levels used:    1
  4987 ;; This function calls:
  4988 ;;		Nothing
  4989 ;; This function is called by:
  4990 ;;		___ftadd
  4991 ;;		___ftmul
  4992 ;;		___lltoft
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           	psect	text17
  4997  001E82                     __ptext17:
  4998                           	opt stack 0
  4999  001E82                     ___ftpack:
  5000                           	opt stack 27
  5001                           
  5002                           ;incstack = 0
  5003  001E82  5004               	movf	___ftpack@exp,w,c
  5004  001E84  B4D8               	btfsc	status,2,c
  5005  001E86  D005               	goto	u1420
  5006  001E88  5001               	movf	___ftpack@arg,w,c
  5007  001E8A  1002               	iorwf	___ftpack@arg+1,w,c
  5008  001E8C  1003               	iorwf	___ftpack@arg+2,w,c
  5009  001E8E  A4D8               	btfss	status,2,c
  5010  001E90  D00C               	goto	l408
  5011  001E92                     u1420:
  5012  001E92  0E00               	movlw	0
  5013  001E94  6E01               	movwf	?___ftpack,c
  5014  001E96  0E00               	movlw	0
  5015  001E98  6E02               	movwf	?___ftpack+1,c
  5016  001E9A  0E00               	movlw	0
  5017  001E9C  6E03               	movwf	?___ftpack+2,c
  5018  001E9E  0012               	return	
  5019  001EA0  2A04               	incf	___ftpack@exp,f,c
  5020  001EA2  90D8               	bcf	status,0,c
  5021  001EA4  3203               	rrcf	___ftpack@arg+2,f,c
  5022  001EA6  3202               	rrcf	___ftpack@arg+1,f,c
  5023  001EA8  3201               	rrcf	___ftpack@arg,f,c
  5024  001EAA                     l408:
  5025  001EAA  0E00               	movlw	0
  5026  001EAC  1401               	andwf	___ftpack@arg,w,c
  5027  001EAE  6E06               	movwf	??___ftpack& (0+255),c
  5028  001EB0  0E00               	movlw	0
  5029  001EB2  1402               	andwf	___ftpack@arg+1,w,c
  5030  001EB4  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5031  001EB6  0EFE               	movlw	254
  5032  001EB8  1403               	andwf	___ftpack@arg+2,w,c
  5033  001EBA  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5034  001EBC  5006               	movf	??___ftpack,w,c
  5035  001EBE  1007               	iorwf	??___ftpack+1,w,c
  5036  001EC0  1008               	iorwf	??___ftpack+2,w,c
  5037  001EC2  B4D8               	btfsc	status,2,c
  5038  001EC4  D00C               	goto	l411
  5039  001EC6  D7EC               	goto	l409
  5040  001EC8  2A04               	incf	___ftpack@exp,f,c
  5041  001ECA  0E01               	movlw	1
  5042  001ECC  2601               	addwf	___ftpack@arg,f,c
  5043  001ECE  0E00               	movlw	0
  5044  001ED0  2202               	addwfc	___ftpack@arg+1,f,c
  5045  001ED2  0E00               	movlw	0
  5046  001ED4  2203               	addwfc	___ftpack@arg+2,f,c
  5047  001ED6  90D8               	bcf	status,0,c
  5048  001ED8  3203               	rrcf	___ftpack@arg+2,f,c
  5049  001EDA  3202               	rrcf	___ftpack@arg+1,f,c
  5050  001EDC  3201               	rrcf	___ftpack@arg,f,c
  5051  001EDE                     l411:
  5052  001EDE  0E00               	movlw	0
  5053  001EE0  1401               	andwf	___ftpack@arg,w,c
  5054  001EE2  6E06               	movwf	??___ftpack& (0+255),c
  5055  001EE4  0E00               	movlw	0
  5056  001EE6  1402               	andwf	___ftpack@arg+1,w,c
  5057  001EE8  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5058  001EEA  0EFF               	movlw	255
  5059  001EEC  1403               	andwf	___ftpack@arg+2,w,c
  5060  001EEE  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5061  001EF0  5006               	movf	??___ftpack,w,c
  5062  001EF2  1007               	iorwf	??___ftpack+1,w,c
  5063  001EF4  1008               	iorwf	??___ftpack+2,w,c
  5064  001EF6  B4D8               	btfsc	status,2,c
  5065  001EF8  D006               	goto	l414
  5066  001EFA  D7E6               	goto	l412
  5067  001EFC  0604               	decf	___ftpack@exp,f,c
  5068  001EFE  90D8               	bcf	status,0,c
  5069  001F00  3601               	rlcf	___ftpack@arg,f,c
  5070  001F02  3602               	rlcf	___ftpack@arg+1,f,c
  5071  001F04  3603               	rlcf	___ftpack@arg+2,f,c
  5072  001F06                     l414:
  5073  001F06  BE02               	btfsc	___ftpack@arg+1,7,c
  5074  001F08  D003               	goto	u1460
  5075  001F0A  0E02               	movlw	2
  5076  001F0C  6004               	cpfslt	___ftpack@exp,c
  5077  001F0E  D7F6               	goto	l415
  5078  001F10                     u1460:
  5079  001F10  A004               	btfss	___ftpack@exp,0,c
  5080  001F12  9E02               	bcf	___ftpack@arg+1,7,c
  5081  001F14  90D8               	bcf	status,0,c
  5082  001F16  3204               	rrcf	___ftpack@exp,f,c
  5083  001F18  5004               	movf	___ftpack@exp,w,c
  5084  001F1A  1203               	iorwf	___ftpack@arg+2,f,c
  5085  001F1C  5005               	movf	___ftpack@sign,w,c
  5086  001F1E  A4D8               	btfss	status,2,c
  5087  001F20  8E03               	bsf	___ftpack@arg+2,7,c
  5088  001F22  C001  F001         	movff	___ftpack@arg,?___ftpack
  5089  001F26  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5090  001F2A  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5091  001F2E  0012               	return	
  5092  001F30                     __end_of___ftpack:
  5093                           	opt stack 0
  5094                           tblptru	equ	0xFF8
  5095                           tblptrh	equ	0xFF7
  5096                           tblptrl	equ	0xFF6
  5097                           tablat	equ	0xFF5
  5098                           prodh	equ	0xFF4
  5099                           prodl	equ	0xFF3
  5100                           postinc0	equ	0xFEE
  5101                           wreg	equ	0xFE8
  5102                           postdec1	equ	0xFE5
  5103                           fsr1l	equ	0xFE1
  5104                           indf2	equ	0xFDF
  5105                           postinc2	equ	0xFDE
  5106                           postdec2	equ	0xFDD
  5107                           fsr2h	equ	0xFDA
  5108                           fsr2l	equ	0xFD9
  5109                           status	equ	0xFD8
  5110                           
  5111 ;; *************** function ___ftneg *****************
  5112 ;; Defined at:
  5113 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  5114 ;; Parameters:    Size  Location     Type
  5115 ;;  f1              3    0[COMRAM] float 
  5116 ;; Auto vars:     Size  Location     Type
  5117 ;;		None
  5118 ;; Return value:  Size  Location     Type
  5119 ;;                  3    0[COMRAM] float 
  5120 ;; Registers used:
  5121 ;;		wreg, status,2, status,0
  5122 ;; Tracked objects:
  5123 ;;		On entry : 0/0
  5124 ;;		On exit  : 0/0
  5125 ;;		Unchanged: 0/0
  5126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5127 ;;      Params:         3       0       0       0       0       0       0
  5128 ;;      Locals:         0       0       0       0       0       0       0
  5129 ;;      Temps:          0       0       0       0       0       0       0
  5130 ;;      Totals:         3       0       0       0       0       0       0
  5131 ;;Total ram usage:        3 bytes
  5132 ;; Hardware stack levels used:    1
  5133 ;; This function calls:
  5134 ;;		Nothing
  5135 ;; This function is called by:
  5136 ;;		_sprintf
  5137 ;; This function uses a non-reentrant model
  5138 ;;
  5139                           
  5140                           	psect	text18
  5141  00237E                     __ptext18:
  5142                           	opt stack 0
  5143  00237E                     ___ftneg:
  5144                           	opt stack 29
  5145                           
  5146                           ;incstack = 0
  5147  00237E  5001               	movf	___ftneg@f1,w,c
  5148  002380  1002               	iorwf	___ftneg@f1+1,w,c
  5149  002382  1003               	iorwf	___ftneg@f1+2,w,c
  5150  002384  B4D8               	btfsc	status,2,c
  5151  002386  D006               	goto	l515
  5152  002388  0E00               	movlw	0
  5153  00238A  1A01               	xorwf	___ftneg@f1,f,c
  5154  00238C  0E00               	movlw	0
  5155  00238E  1A02               	xorwf	___ftneg@f1+1,f,c
  5156  002390  0E80               	movlw	128
  5157  002392  1A03               	xorwf	___ftneg@f1+2,f,c
  5158  002394                     l515:
  5159  002394  C001  F001         	movff	___ftneg@f1,?___ftneg
  5160  002398  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5161  00239C  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5162  0023A0  0012               	return		;funcret
  5163  0023A2                     __end_of___ftneg:
  5164                           	opt stack 0
  5165                           tblptru	equ	0xFF8
  5166                           tblptrh	equ	0xFF7
  5167                           tblptrl	equ	0xFF6
  5168                           tablat	equ	0xFF5
  5169                           prodh	equ	0xFF4
  5170                           prodl	equ	0xFF3
  5171                           postinc0	equ	0xFEE
  5172                           wreg	equ	0xFE8
  5173                           postdec1	equ	0xFE5
  5174                           fsr1l	equ	0xFE1
  5175                           indf2	equ	0xFDF
  5176                           postinc2	equ	0xFDE
  5177                           postdec2	equ	0xFDD
  5178                           fsr2h	equ	0xFDA
  5179                           fsr2l	equ	0xFD9
  5180                           status	equ	0xFD8
  5181                           
  5182 ;; *************** function ___ftge *****************
  5183 ;; Defined at:
  5184 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  5185 ;; Parameters:    Size  Location     Type
  5186 ;;  ff1             3    0[COMRAM] float 
  5187 ;;  ff2             3    3[COMRAM] float 
  5188 ;; Auto vars:     Size  Location     Type
  5189 ;;		None
  5190 ;; Return value:  Size  Location     Type
  5191 ;;		None               void
  5192 ;; Registers used:
  5193 ;;		wreg, status,2, status,0
  5194 ;; Tracked objects:
  5195 ;;		On entry : 0/0
  5196 ;;		On exit  : 0/0
  5197 ;;		Unchanged: 0/0
  5198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5199 ;;      Params:         6       0       0       0       0       0       0
  5200 ;;      Locals:         0       0       0       0       0       0       0
  5201 ;;      Temps:          3       0       0       0       0       0       0
  5202 ;;      Totals:         9       0       0       0       0       0       0
  5203 ;;Total ram usage:        9 bytes
  5204 ;; Hardware stack levels used:    1
  5205 ;; This function calls:
  5206 ;;		Nothing
  5207 ;; This function is called by:
  5208 ;;		_sprintf
  5209 ;; This function uses a non-reentrant model
  5210 ;;
  5211                           
  5212                           	psect	text19
  5213  001F30                     __ptext19:
  5214                           	opt stack 0
  5215  001F30                     ___ftge:
  5216                           	opt stack 29
  5217                           
  5218                           ;incstack = 0
  5219  001F30  AE03               	btfss	___ftge@ff1+2,7,c
  5220  001F32  D016               	goto	l497
  5221  001F34  C001  F007         	movff	___ftge@ff1,??___ftge
  5222  001F38  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5223  001F3C  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5224  001F40  1E07               	comf	??___ftge,f,c
  5225  001F42  1E08               	comf	??___ftge+1,f,c
  5226  001F44  1E09               	comf	??___ftge+2,f,c
  5227  001F46  2A07               	incf	??___ftge,f,c
  5228  001F48  0E00               	movlw	0
  5229  001F4A  2208               	addwfc	??___ftge+1,f,c
  5230  001F4C  2209               	addwfc	??___ftge+2,f,c
  5231  001F4E  0E00               	movlw	0
  5232  001F50  2407               	addwf	??___ftge,w,c
  5233  001F52  6E01               	movwf	___ftge@ff1,c
  5234  001F54  0E00               	movlw	0
  5235  001F56  2008               	addwfc	??___ftge+1,w,c
  5236  001F58  6E02               	movwf	___ftge@ff1+1,c
  5237  001F5A  0E80               	movlw	128
  5238  001F5C  2009               	addwfc	??___ftge+2,w,c
  5239  001F5E  6E03               	movwf	___ftge@ff1+2,c
  5240  001F60                     l497:
  5241  001F60  AE06               	btfss	___ftge@ff2+2,7,c
  5242  001F62  D016               	goto	l498
  5243  001F64  C004  F007         	movff	___ftge@ff2,??___ftge
  5244  001F68  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5245  001F6C  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5246  001F70  1E07               	comf	??___ftge,f,c
  5247  001F72  1E08               	comf	??___ftge+1,f,c
  5248  001F74  1E09               	comf	??___ftge+2,f,c
  5249  001F76  2A07               	incf	??___ftge,f,c
  5250  001F78  0E00               	movlw	0
  5251  001F7A  2208               	addwfc	??___ftge+1,f,c
  5252  001F7C  2209               	addwfc	??___ftge+2,f,c
  5253  001F7E  0E00               	movlw	0
  5254  001F80  2407               	addwf	??___ftge,w,c
  5255  001F82  6E04               	movwf	___ftge@ff2,c
  5256  001F84  0E00               	movlw	0
  5257  001F86  2008               	addwfc	??___ftge+1,w,c
  5258  001F88  6E05               	movwf	___ftge@ff2+1,c
  5259  001F8A  0E80               	movlw	128
  5260  001F8C  2009               	addwfc	??___ftge+2,w,c
  5261  001F8E  6E06               	movwf	___ftge@ff2+2,c
  5262  001F90                     l498:
  5263  001F90  0E00               	movlw	0
  5264  001F92  1A01               	xorwf	___ftge@ff1,f,c
  5265  001F94  0E00               	movlw	0
  5266  001F96  1A02               	xorwf	___ftge@ff1+1,f,c
  5267  001F98  0E80               	movlw	128
  5268  001F9A  1A03               	xorwf	___ftge@ff1+2,f,c
  5269  001F9C  0E00               	movlw	0
  5270  001F9E  1A04               	xorwf	___ftge@ff2,f,c
  5271  001FA0  0E00               	movlw	0
  5272  001FA2  1A05               	xorwf	___ftge@ff2+1,f,c
  5273  001FA4  0E80               	movlw	128
  5274  001FA6  1A06               	xorwf	___ftge@ff2+2,f,c
  5275  001FA8  5004               	movf	___ftge@ff2,w,c
  5276  001FAA  5C01               	subwf	___ftge@ff1,w,c
  5277  001FAC  5005               	movf	___ftge@ff2+1,w,c
  5278  001FAE  5802               	subwfb	___ftge@ff1+1,w,c
  5279  001FB0  5006               	movf	___ftge@ff2+2,w,c
  5280  001FB2  5803               	subwfb	___ftge@ff1+2,w,c
  5281  001FB4  B0D8               	btfsc	status,0,c
  5282  001FB6  D002               	goto	l1807
  5283  001FB8  90D8               	bcf	status,0,c
  5284  001FBA  0012               	return	
  5285  001FBC                     l1807:
  5286  001FBC  80D8               	bsf	status,0,c
  5287  001FBE  0012               	return	
  5288  001FC0                     __end_of___ftge:
  5289                           	opt stack 0
  5290                           tblptru	equ	0xFF8
  5291                           tblptrh	equ	0xFF7
  5292                           tblptrl	equ	0xFF6
  5293                           tablat	equ	0xFF5
  5294                           prodh	equ	0xFF4
  5295                           prodl	equ	0xFF3
  5296                           postinc0	equ	0xFEE
  5297                           wreg	equ	0xFE8
  5298                           postdec1	equ	0xFE5
  5299                           fsr1l	equ	0xFE1
  5300                           indf2	equ	0xFDF
  5301                           postinc2	equ	0xFDE
  5302                           postdec2	equ	0xFDD
  5303                           fsr2h	equ	0xFDA
  5304                           fsr2l	equ	0xFD9
  5305                           status	equ	0xFD8
  5306                           
  5307 ;; *************** function _SetUp *****************
  5308 ;; Defined at:
  5309 ;;		line 72 in file "main.c"
  5310 ;; Parameters:    Size  Location     Type
  5311 ;;		None
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;		None
  5314 ;; Return value:  Size  Location     Type
  5315 ;;                  1    wreg      void 
  5316 ;; Registers used:
  5317 ;;		None
  5318 ;; Tracked objects:
  5319 ;;		On entry : 0/0
  5320 ;;		On exit  : 0/0
  5321 ;;		Unchanged: 0/0
  5322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5323 ;;      Params:         0       0       0       0       0       0       0
  5324 ;;      Locals:         0       0       0       0       0       0       0
  5325 ;;      Temps:          0       0       0       0       0       0       0
  5326 ;;      Totals:         0       0       0       0       0       0       0
  5327 ;;Total ram usage:        0 bytes
  5328 ;; Hardware stack levels used:    1
  5329 ;; This function calls:
  5330 ;;		Nothing
  5331 ;; This function is called by:
  5332 ;;		_main
  5333 ;; This function uses a non-reentrant model
  5334 ;;
  5335                           
  5336                           	psect	text20
  5337  0023CE                     __ptext20:
  5338                           	opt stack 0
  5339  0023CE                     _SetUp:
  5340                           	opt stack 30
  5341                           
  5342                           ;main.c: 77: OSCCONbits.IRCF = 0b111;
  5343                           
  5344                           ;incstack = 0
  5345  0023CE  88D3               	bsf	4051,4,c	;volatile
  5346  0023D0  8AD3               	bsf	4051,5,c	;volatile
  5347  0023D2  8CD3               	bsf	4051,6,c	;volatile
  5348                           
  5349                           ;main.c: 79: return;
  5350  0023D4  0012               	return		;funcret
  5351  0023D6                     __end_of_SetUp:
  5352                           	opt stack 0
  5353                           tblptru	equ	0xFF8
  5354                           tblptrh	equ	0xFF7
  5355                           tblptrl	equ	0xFF6
  5356                           tablat	equ	0xFF5
  5357                           prodh	equ	0xFF4
  5358                           prodl	equ	0xFF3
  5359                           postinc0	equ	0xFEE
  5360                           wreg	equ	0xFE8
  5361                           postdec1	equ	0xFE5
  5362                           fsr1l	equ	0xFE1
  5363                           indf2	equ	0xFDF
  5364                           postinc2	equ	0xFDE
  5365                           postdec2	equ	0xFDD
  5366                           fsr2h	equ	0xFDA
  5367                           fsr2l	equ	0xFD9
  5368                           status	equ	0xFD8
  5369                           
  5370 ;; *************** function _Lcd_Out *****************
  5371 ;; Defined at:
  5372 ;;		line 94 in file "lcd.h"
  5373 ;; Parameters:    Size  Location     Type
  5374 ;;  y               1    wreg     unsigned char 
  5375 ;;  x               1    3[COMRAM] unsigned char 
  5376 ;;  buffer          2    4[COMRAM] PTR const unsigned char 
  5377 ;;		 -> TextoLCD(16), Mensaje(13), 
  5378 ;; Auto vars:     Size  Location     Type
  5379 ;;  y               1    6[COMRAM] unsigned char 
  5380 ;;  data            1    7[COMRAM] unsigned char 
  5381 ;; Return value:  Size  Location     Type
  5382 ;;                  1    wreg      void 
  5383 ;; Registers used:
  5384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5385 ;; Tracked objects:
  5386 ;;		On entry : 0/0
  5387 ;;		On exit  : 0/0
  5388 ;;		Unchanged: 0/0
  5389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5390 ;;      Params:         3       0       0       0       0       0       0
  5391 ;;      Locals:         2       0       0       0       0       0       0
  5392 ;;      Temps:          0       0       0       0       0       0       0
  5393 ;;      Totals:         5       0       0       0       0       0       0
  5394 ;;Total ram usage:        5 bytes
  5395 ;; Hardware stack levels used:    1
  5396 ;; Hardware stack levels required when called:    1
  5397 ;; This function calls:
  5398 ;;		_Lcd_Chr_CP
  5399 ;;		_Lcd_Cmd
  5400 ;; This function is called by:
  5401 ;;		_main
  5402 ;; This function uses a non-reentrant model
  5403 ;;
  5404                           
  5405                           	psect	text21
  5406  002204                     __ptext21:
  5407                           	opt stack 0
  5408  002204                     _Lcd_Out:
  5409                           	opt stack 29
  5410                           
  5411                           ;incstack = 0
  5412                           ;Lcd_Out@y stored from wreg
  5413  002204  6E07               	movwf	Lcd_Out@y,c
  5414                           
  5415                           ;lcd.h: 96: unsigned char data;
  5416                           ;lcd.h: 98: switch (y)
  5417  002206  D00D               	goto	l24
  5418  002208  5004               	movf	Lcd_Out@x,w,c
  5419  00220A  0F80               	addlw	128
  5420  00220C  D008               	goto	L5
  5421  00220E  5004               	movf	Lcd_Out@x,w,c
  5422  002210  0FC0               	addlw	192
  5423  002212  D005               	goto	L5
  5424  002214  5004               	movf	Lcd_Out@x,w,c
  5425  002216  0F94               	addlw	148
  5426  002218  D002               	goto	L5
  5427  00221A  5004               	movf	Lcd_Out@x,w,c
  5428  00221C  0FD4               	addlw	212
  5429  00221E                     L5:
  5430  00221E  6E08               	movwf	Lcd_Out@data,c
  5431                           
  5432                           ;lcd.h: 105: }
  5433                           
  5434                           ;lcd.h: 104: default: break;
  5435  002220  D00D               	goto	l26
  5436  002222                     l24:
  5437  002222  5007               	movf	Lcd_Out@y,w,c
  5438                           
  5439                           ; Switch size 1, requested type "space"
  5440                           ; Number of cases is 4, Range of values is 1 to 4
  5441                           ; switch strategies available:
  5442                           ; Name         Instructions Cycles
  5443                           ; simple_byte           13     7 (average)
  5444                           ;	Chosen strategy is simple_byte
  5445  002224  0A01               	xorlw	1	; case 1
  5446  002226  B4D8               	btfsc	status,2,c
  5447  002228  D7EF               	goto	l25
  5448  00222A  0A03               	xorlw	3	; case 2
  5449  00222C  B4D8               	btfsc	status,2,c
  5450  00222E  D7EF               	goto	l27
  5451  002230  0A01               	xorlw	1	; case 3
  5452  002232  B4D8               	btfsc	status,2,c
  5453  002234  D7EF               	goto	l28
  5454  002236  0A07               	xorlw	7	; case 4
  5455  002238  B4D8               	btfsc	status,2,c
  5456  00223A  D7EF               	goto	l29
  5457  00223C                     l26:
  5458                           
  5459                           ;lcd.h: 106: Lcd_Cmd(data);
  5460  00223C  5008               	movf	Lcd_Out@data,w,c
  5461  00223E  EC8C  F00C         	call	_Lcd_Cmd
  5462                           
  5463                           ;lcd.h: 107: while(*buffer)
  5464  002242  D009               	goto	l31
  5465  002244                     
  5466                           ;lcd.h: 108: {
  5467                           ;lcd.h: 109: Lcd_Chr_CP(*buffer);
  5468  002244  C005  FFD9         	movff	Lcd_Out@buffer,fsr2l
  5469  002248  C006  FFDA         	movff	Lcd_Out@buffer+1,fsr2h
  5470  00224C  50DF               	movf	indf2,w,c
  5471  00224E  EC57  F00B         	call	_Lcd_Chr_CP
  5472                           
  5473                           ;lcd.h: 110: buffer++;
  5474  002252  4A05               	infsnz	Lcd_Out@buffer,f,c
  5475  002254  2A06               	incf	Lcd_Out@buffer+1,f,c
  5476  002256                     l31:
  5477  002256  C005  FFD9         	movff	Lcd_Out@buffer,fsr2l
  5478  00225A  C006  FFDA         	movff	Lcd_Out@buffer+1,fsr2h
  5479  00225E  50DF               	movf	indf2,w,c
  5480  002260  B4D8               	btfsc	status,2,c
  5481  002262  0012               	return	
  5482  002264  D7EF               	goto	l32
  5483  002266                     __end_of_Lcd_Out:
  5484                           	opt stack 0
  5485                           tblptru	equ	0xFF8
  5486                           tblptrh	equ	0xFF7
  5487                           tblptrl	equ	0xFF6
  5488                           tablat	equ	0xFF5
  5489                           prodh	equ	0xFF4
  5490                           prodl	equ	0xFF3
  5491                           postinc0	equ	0xFEE
  5492                           wreg	equ	0xFE8
  5493                           postdec1	equ	0xFE5
  5494                           fsr1l	equ	0xFE1
  5495                           indf2	equ	0xFDF
  5496                           postinc2	equ	0xFDE
  5497                           postdec2	equ	0xFDD
  5498                           fsr2h	equ	0xFDA
  5499                           fsr2l	equ	0xFD9
  5500                           status	equ	0xFD8
  5501                           
  5502 ;; *************** function _Lcd_Chr_CP *****************
  5503 ;; Defined at:
  5504 ;;		line 136 in file "lcd.h"
  5505 ;; Parameters:    Size  Location     Type
  5506 ;;  data            1    wreg     unsigned char 
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;  data            1    2[COMRAM] unsigned char 
  5509 ;; Return value:  Size  Location     Type
  5510 ;;                  1    wreg      void 
  5511 ;; Registers used:
  5512 ;;		wreg, status,2, status,0
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5518 ;;      Params:         0       0       0       0       0       0       0
  5519 ;;      Locals:         1       0       0       0       0       0       0
  5520 ;;      Temps:          2       0       0       0       0       0       0
  5521 ;;      Totals:         3       0       0       0       0       0       0
  5522 ;;Total ram usage:        3 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; This function calls:
  5525 ;;		Nothing
  5526 ;; This function is called by:
  5527 ;;		_Lcd_Out
  5528 ;;		_main
  5529 ;;		_Lcd_Out2
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           	psect	text22
  5534  0016AE                     __ptext22:
  5535                           	opt stack 0
  5536  0016AE                     _Lcd_Chr_CP:
  5537                           	opt stack 29
  5538                           
  5539                           ;incstack = 0
  5540                           ;Lcd_Chr_CP@data stored from wreg
  5541  0016AE  6E03               	movwf	Lcd_Chr_CP@data,c
  5542                           
  5543                           ;lcd.h: 138: PORTDbits.RD0 = 0; PORTDbits.RD1 = 1;
  5544  0016B0  9083               	bcf	3971,0,c	;volatile
  5545  0016B2  8283               	bsf	3971,1,c	;volatile
  5546                           
  5547                           ;lcd.h: 139: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b01000000)
      +                          >>6;
  5548  0016B4  6A01               	clrf	??_Lcd_Chr_CP& (0+255),c
  5549  0016B6  AE03               	btfss	Lcd_Chr_CP@data,7,c
  5550  0016B8  D001               	bra	u1915
  5551  0016BA  2A01               	incf	??_Lcd_Chr_CP& (0+255),f,c
  5552  0016BC                     u1915:
  5553  0016BC  0E01               	movlw	1
  5554  0016BE  1601               	andwf	??_Lcd_Chr_CP,f,c
  5555  0016C0  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5556  0016C2  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5557  0016C4  5083               	movf	3971,w,c	;volatile
  5558  0016C6  1801               	xorwf	??_Lcd_Chr_CP,w,c
  5559  0016C8  0B7F               	andlw	-129
  5560  0016CA  1801               	xorwf	??_Lcd_Chr_CP,w,c
  5561  0016CC  6E83               	movwf	3971,c	;volatile
  5562  0016CE  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  5563  0016D2  0E06               	movlw	6
  5564  0016D4  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  5565  0016D6                     u1925:
  5566  0016D6  90D8               	bcf	status,0,c
  5567  0016D8  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5568  0016DA  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  5569  0016DC  D7FC               	goto	u1925
  5570  0016DE  0E01               	movlw	1
  5571  0016E0  1601               	andwf	??_Lcd_Chr_CP,f,c
  5572  0016E2  3A01               	swapf	??_Lcd_Chr_CP,f,c
  5573  0016E4  4601               	rlncf	??_Lcd_Chr_CP,f,c
  5574  0016E6  4601               	rlncf	??_Lcd_Chr_CP,f,c
  5575  0016E8  5083               	movf	3971,w,c	;volatile
  5576  0016EA  1801               	xorwf	??_Lcd_Chr_CP,w,c
  5577  0016EC  0BBF               	andlw	-65
  5578  0016EE  1801               	xorwf	??_Lcd_Chr_CP,w,c
  5579  0016F0  6E83               	movwf	3971,c	;volatile
  5580                           
  5581                           ;lcd.h: 140: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b00010000)
      +                          >>4;
  5582  0016F2  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  5583  0016F6  0E05               	movlw	5
  5584  0016F8  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  5585  0016FA                     u1935:
  5586  0016FA  90D8               	bcf	status,0,c
  5587  0016FC  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5588  0016FE  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  5589  001700  D7FC               	goto	u1935
  5590  001702  0E01               	movlw	1
  5591  001704  1601               	andwf	??_Lcd_Chr_CP,f,c
  5592  001706  3A01               	swapf	??_Lcd_Chr_CP,f,c
  5593  001708  4601               	rlncf	??_Lcd_Chr_CP,f,c
  5594  00170A  5083               	movf	3971,w,c	;volatile
  5595  00170C  1801               	xorwf	??_Lcd_Chr_CP,w,c
  5596  00170E  0BDF               	andlw	-33
  5597  001710  1801               	xorwf	??_Lcd_Chr_CP,w,c
  5598  001712  6E83               	movwf	3971,c	;volatile
  5599  001714  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  5600  001718  3A01               	swapf	??_Lcd_Chr_CP,f,c
  5601  00171A  0E0F               	movlw	15
  5602  00171C  1601               	andwf	??_Lcd_Chr_CP,f,c
  5603  00171E  0E01               	movlw	1
  5604  001720  1601               	andwf	??_Lcd_Chr_CP,f,c
  5605  001722  3A01               	swapf	??_Lcd_Chr_CP,f,c
  5606  001724  5083               	movf	3971,w,c	;volatile
  5607  001726  1801               	xorwf	??_Lcd_Chr_CP,w,c
  5608  001728  0BEF               	andlw	-17
  5609  00172A  1801               	xorwf	??_Lcd_Chr_CP,w,c
  5610  00172C  6E83               	movwf	3971,c	;volatile
  5611                           
  5612                           ;lcd.h: 141: _delay(10);
  5613  00172E  0E03               	movlw	3
  5614  001730                     u2817:
  5615  001730  2EE8               	decfsz	wreg,f,c
  5616  001732  D7FE               	bra	u2817
  5617  001734  F000               	nop	
  5618                           
  5619                           ;lcd.h: 142: PORTDbits.RD0 = 1; _delay((unsigned long)((5)*(16000000/4000000.0))); PORTD
      +                          bits.RD0 = 0;
  5620  001736  8083               	bsf	3971,0,c	;volatile
  5621  001738  0E06               	movlw	6
  5622  00173A                     u2827:
  5623  00173A  2EE8               	decfsz	wreg,f,c
  5624  00173C  D7FE               	bra	u2827
  5625  00173E  F000 F000          	nop2	
  5626  001742  9083               	bcf	3971,0,c	;volatile
  5627                           
  5628                           ;lcd.h: 143: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b00000100)
      +                          >>2;
  5629  001744  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  5630  001748  90D8               	bcf	status,0,c
  5631  00174A  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5632  00174C  90D8               	bcf	status,0,c
  5633  00174E  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5634  001750  90D8               	bcf	status,0,c
  5635  001752  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5636  001754  0E01               	movlw	1
  5637  001756  1601               	andwf	??_Lcd_Chr_CP,f,c
  5638  001758  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5639  00175A  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5640  00175C  5083               	movf	3971,w,c	;volatile
  5641  00175E  1801               	xorwf	??_Lcd_Chr_CP,w,c
  5642  001760  0B7F               	andlw	-129
  5643  001762  1801               	xorwf	??_Lcd_Chr_CP,w,c
  5644  001764  6E83               	movwf	3971,c	;volatile
  5645  001766  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  5646  00176A  90D8               	bcf	status,0,c
  5647  00176C  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5648  00176E  90D8               	bcf	status,0,c
  5649  001770  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5650  001772  0E01               	movlw	1
  5651  001774  1601               	andwf	??_Lcd_Chr_CP,f,c
  5652  001776  3A01               	swapf	??_Lcd_Chr_CP,f,c
  5653  001778  4601               	rlncf	??_Lcd_Chr_CP,f,c
  5654  00177A  4601               	rlncf	??_Lcd_Chr_CP,f,c
  5655  00177C  5083               	movf	3971,w,c	;volatile
  5656  00177E  1801               	xorwf	??_Lcd_Chr_CP,w,c
  5657  001780  0BBF               	andlw	-65
  5658  001782  1801               	xorwf	??_Lcd_Chr_CP,w,c
  5659  001784  6E83               	movwf	3971,c	;volatile
  5660                           
  5661                           ;lcd.h: 144: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b00000001)
      +                          ;
  5662  001786  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  5663  00178A  90D8               	bcf	status,0,c
  5664  00178C  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5665  00178E  0E01               	movlw	1
  5666  001790  1601               	andwf	??_Lcd_Chr_CP,f,c
  5667  001792  3A01               	swapf	??_Lcd_Chr_CP,f,c
  5668  001794  4601               	rlncf	??_Lcd_Chr_CP,f,c
  5669  001796  5083               	movf	3971,w,c	;volatile
  5670  001798  1801               	xorwf	??_Lcd_Chr_CP,w,c
  5671  00179A  0BDF               	andlw	-33
  5672  00179C  1801               	xorwf	??_Lcd_Chr_CP,w,c
  5673  00179E  6E83               	movwf	3971,c	;volatile
  5674  0017A0  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  5675  0017A4  0E01               	movlw	1
  5676  0017A6  1601               	andwf	??_Lcd_Chr_CP,f,c
  5677  0017A8  3A01               	swapf	??_Lcd_Chr_CP,f,c
  5678  0017AA  5083               	movf	3971,w,c	;volatile
  5679  0017AC  1801               	xorwf	??_Lcd_Chr_CP,w,c
  5680  0017AE  0BEF               	andlw	-17
  5681  0017B0  1801               	xorwf	??_Lcd_Chr_CP,w,c
  5682  0017B2  6E83               	movwf	3971,c	;volatile
  5683                           
  5684                           ;lcd.h: 145: _delay(10);
  5685  0017B4  0E03               	movlw	3
  5686  0017B6                     u2837:
  5687  0017B6  2EE8               	decfsz	wreg,f,c
  5688  0017B8  D7FE               	bra	u2837
  5689  0017BA  F000               	nop	
  5690                           
  5691                           ;lcd.h: 146: PORTDbits.RD0 = 1; _delay((unsigned long)((5)*(16000000/4000000.0))); PORTD
      +                          bits.RD0 = 0;
  5692  0017BC  8083               	bsf	3971,0,c	;volatile
  5693  0017BE  0E06               	movlw	6
  5694  0017C0                     u2847:
  5695  0017C0  2EE8               	decfsz	wreg,f,c
  5696  0017C2  D7FE               	bra	u2847
  5697  0017C4  F000 F000          	nop2	
  5698  0017C8  9083               	bcf	3971,0,c	;volatile
  5699                           
  5700                           ;lcd.h: 147: _delay((unsigned long)((5)*(16000000/4000000.0))); _delay((unsigned long)((
      +                          5500)*(16000000/4000000.0)));
  5701  0017CA  0E06               	movlw	6
  5702  0017CC                     u2857:
  5703  0017CC  2EE8               	decfsz	wreg,f,c
  5704  0017CE  D7FE               	bra	u2857
  5705  0017D0  F000 F000          	nop2	
  5706  0017D4  0E1D               	movlw	29
  5707  0017D6  6E01               	movwf	??_Lcd_Chr_CP& (0+255),c
  5708  0017D8  0E91               	movlw	145
  5709  0017DA                     u2867:
  5710  0017DA  2EE8               	decfsz	wreg,f,c
  5711  0017DC  D7FE               	bra	u2867
  5712  0017DE  2E01               	decfsz	??_Lcd_Chr_CP& (0+255),f,c
  5713  0017E0  D7FC               	bra	u2867
  5714  0017E2  F000               	nop	
  5715  0017E4  0012               	return		;funcret
  5716  0017E6                     __end_of_Lcd_Chr_CP:
  5717                           	opt stack 0
  5718                           tblptru	equ	0xFF8
  5719                           tblptrh	equ	0xFF7
  5720                           tblptrl	equ	0xFF6
  5721                           tablat	equ	0xFF5
  5722                           prodh	equ	0xFF4
  5723                           prodl	equ	0xFF3
  5724                           postinc0	equ	0xFEE
  5725                           wreg	equ	0xFE8
  5726                           postdec1	equ	0xFE5
  5727                           fsr1l	equ	0xFE1
  5728                           indf2	equ	0xFDF
  5729                           postinc2	equ	0xFDE
  5730                           postdec2	equ	0xFDD
  5731                           fsr2h	equ	0xFDA
  5732                           fsr2l	equ	0xFD9
  5733                           status	equ	0xFD8
  5734                           
  5735 ;; *************** function _Lcd_Init *****************
  5736 ;; Defined at:
  5737 ;;		line 51 in file "lcd.h"
  5738 ;; Parameters:    Size  Location     Type
  5739 ;;		None
  5740 ;; Auto vars:     Size  Location     Type
  5741 ;;  data            1    4[COMRAM] unsigned char 
  5742 ;; Return value:  Size  Location     Type
  5743 ;;                  1    wreg      void 
  5744 ;; Registers used:
  5745 ;;		wreg, status,2, status,0, cstack
  5746 ;; Tracked objects:
  5747 ;;		On entry : 0/0
  5748 ;;		On exit  : 0/0
  5749 ;;		Unchanged: 0/0
  5750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5751 ;;      Params:         0       0       0       0       0       0       0
  5752 ;;      Locals:         1       0       0       0       0       0       0
  5753 ;;      Temps:          1       0       0       0       0       0       0
  5754 ;;      Totals:         2       0       0       0       0       0       0
  5755 ;;Total ram usage:        2 bytes
  5756 ;; Hardware stack levels used:    1
  5757 ;; Hardware stack levels required when called:    1
  5758 ;; This function calls:
  5759 ;;		_Lcd_Cmd
  5760 ;; This function is called by:
  5761 ;;		_main
  5762 ;; This function uses a non-reentrant model
  5763 ;;
  5764                           
  5765                           	psect	text23
  5766  001A46                     __ptext23:
  5767                           	opt stack 0
  5768  001A46                     _Lcd_Init:
  5769                           	opt stack 29
  5770                           
  5771                           ;lcd.h: 53: unsigned char data;
  5772                           ;lcd.h: 54: TRISDbits.TRISD7 = 0;
  5773                           
  5774                           ;incstack = 0
  5775  001A46  9E95               	bcf	3989,7,c	;volatile
  5776                           
  5777                           ;lcd.h: 55: TRISDbits.TRISD6 = 0;
  5778  001A48  9C95               	bcf	3989,6,c	;volatile
  5779                           
  5780                           ;lcd.h: 56: TRISDbits.TRISD5 = 0;
  5781  001A4A  9A95               	bcf	3989,5,c	;volatile
  5782                           
  5783                           ;lcd.h: 57: TRISDbits.TRISD4 = 0;
  5784  001A4C  9895               	bcf	3989,4,c	;volatile
  5785                           
  5786                           ;lcd.h: 58: TRISDbits.TRISD0 = 0;
  5787  001A4E  9095               	bcf	3989,0,c	;volatile
  5788                           
  5789                           ;lcd.h: 59: TRISDbits.TRISD1 = 0;
  5790  001A50  9295               	bcf	3989,1,c	;volatile
  5791                           
  5792                           ;lcd.h: 60: PORTDbits.RD7 = 0;
  5793  001A52  9E83               	bcf	3971,7,c	;volatile
  5794                           
  5795                           ;lcd.h: 61: PORTDbits.RD6 = 0;
  5796  001A54  9C83               	bcf	3971,6,c	;volatile
  5797                           
  5798                           ;lcd.h: 62: PORTDbits.RD5 = 0;
  5799  001A56  9A83               	bcf	3971,5,c	;volatile
  5800                           
  5801                           ;lcd.h: 63: PORTDbits.RD4 = 0;
  5802  001A58  9883               	bcf	3971,4,c	;volatile
  5803                           
  5804                           ;lcd.h: 64: PORTDbits.RD0 = 0;
  5805  001A5A  9083               	bcf	3971,0,c	;volatile
  5806                           
  5807                           ;lcd.h: 65: PORTDbits.RD1 = 0;
  5808  001A5C  9283               	bcf	3971,1,c	;volatile
  5809                           
  5810                           ;lcd.h: 66: _delay((unsigned long)((5500)*(16000000/4000000.0)));
  5811  001A5E  0E1D               	movlw	29
  5812  001A60  6E04               	movwf	??_Lcd_Init& (0+255),c
  5813  001A62  0E91               	movlw	145
  5814  001A64                     u2877:
  5815  001A64  2EE8               	decfsz	wreg,f,c
  5816  001A66  D7FE               	bra	u2877
  5817  001A68  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5818  001A6A  D7FC               	bra	u2877
  5819  001A6C  F000               	nop	
  5820                           
  5821                           ;lcd.h: 67: _delay((unsigned long)((5500)*(16000000/4000000.0)));
  5822  001A6E  0E1D               	movlw	29
  5823  001A70  6E04               	movwf	??_Lcd_Init& (0+255),c
  5824  001A72  0E91               	movlw	145
  5825  001A74                     u2887:
  5826  001A74  2EE8               	decfsz	wreg,f,c
  5827  001A76  D7FE               	bra	u2887
  5828  001A78  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5829  001A7A  D7FC               	bra	u2887
  5830  001A7C  F000               	nop	
  5831                           
  5832                           ;lcd.h: 68: _delay((unsigned long)((5500)*(16000000/4000000.0)));
  5833  001A7E  0E1D               	movlw	29
  5834  001A80  6E04               	movwf	??_Lcd_Init& (0+255),c
  5835  001A82  0E91               	movlw	145
  5836  001A84                     u2897:
  5837  001A84  2EE8               	decfsz	wreg,f,c
  5838  001A86  D7FE               	bra	u2897
  5839  001A88  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5840  001A8A  D7FC               	bra	u2897
  5841  001A8C  F000               	nop	
  5842                           
  5843                           ;lcd.h: 69: _delay((unsigned long)((5500)*(16000000/4000000.0)));
  5844  001A8E  0E1D               	movlw	29
  5845  001A90  6E04               	movwf	??_Lcd_Init& (0+255),c
  5846  001A92  0E91               	movlw	145
  5847  001A94                     u2907:
  5848  001A94  2EE8               	decfsz	wreg,f,c
  5849  001A96  D7FE               	bra	u2907
  5850  001A98  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5851  001A9A  D7FC               	bra	u2907
  5852  001A9C  F000               	nop	
  5853                           
  5854                           ;lcd.h: 70: _delay((unsigned long)((5500)*(16000000/4000000.0)));
  5855  001A9E  0E1D               	movlw	29
  5856  001AA0  6E04               	movwf	??_Lcd_Init& (0+255),c
  5857  001AA2  0E91               	movlw	145
  5858  001AA4                     u2917:
  5859  001AA4  2EE8               	decfsz	wreg,f,c
  5860  001AA6  D7FE               	bra	u2917
  5861  001AA8  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5862  001AAA  D7FC               	bra	u2917
  5863  001AAC  F000               	nop	
  5864                           
  5865                           ;lcd.h: 71: _delay((unsigned long)((5500)*(16000000/4000000.0)));
  5866  001AAE  0E1D               	movlw	29
  5867  001AB0  6E04               	movwf	??_Lcd_Init& (0+255),c
  5868  001AB2  0E91               	movlw	145
  5869  001AB4                     u2927:
  5870  001AB4  2EE8               	decfsz	wreg,f,c
  5871  001AB6  D7FE               	bra	u2927
  5872  001AB8  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5873  001ABA  D7FC               	bra	u2927
  5874  001ABC  F000               	nop	
  5875                           
  5876                           ;lcd.h: 73: for(data = 1; data < 4; data ++)
  5877  001ABE  0E01               	movlw	1
  5878  001AC0  6E05               	movwf	Lcd_Init@data,c
  5879  001AC2  D020               	goto	L6
  5880  001AC4                     l19:
  5881                           
  5882                           ;lcd.h: 74: {
  5883                           ;lcd.h: 75: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 = 1; 
      +                          PORTDbits.RD0 = 0;
  5884  001AC4  9E83               	bcf	3971,7,c	;volatile
  5885  001AC6  9C83               	bcf	3971,6,c	;volatile
  5886  001AC8  8A83               	bsf	3971,5,c	;volatile
  5887  001ACA  8883               	bsf	3971,4,c	;volatile
  5888  001ACC  9083               	bcf	3971,0,c	;volatile
  5889                           
  5890                           ;lcd.h: 76: PORTDbits.RD1 = 0; PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; 
      +                          PORTDbits.RD4 = 1;
  5891  001ACE  9283               	bcf	3971,1,c	;volatile
  5892  001AD0  9E83               	bcf	3971,7,c	;volatile
  5893  001AD2  9C83               	bcf	3971,6,c	;volatile
  5894  001AD4  8A83               	bsf	3971,5,c	;volatile
  5895  001AD6  8883               	bsf	3971,4,c	;volatile
  5896                           
  5897                           ;lcd.h: 77: PORTDbits.RD0 = 1; PORTDbits.RD1 = 0;
  5898  001AD8  8083               	bsf	3971,0,c	;volatile
  5899  001ADA  9283               	bcf	3971,1,c	;volatile
  5900                           
  5901                           ;lcd.h: 78: _delay((unsigned long)((5)*(16000000/4000000.0)));
  5902  001ADC  0E06               	movlw	6
  5903  001ADE                     u2937:
  5904  001ADE  2EE8               	decfsz	wreg,f,c
  5905  001AE0  D7FE               	bra	u2937
  5906  001AE2  F000 F000          	nop2	
  5907                           
  5908                           ;lcd.h: 79: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 = 1; 
      +                          PORTDbits.RD0 = 0;
  5909  001AE6  9E83               	bcf	3971,7,c	;volatile
  5910  001AE8  9C83               	bcf	3971,6,c	;volatile
  5911  001AEA  8A83               	bsf	3971,5,c	;volatile
  5912  001AEC  8883               	bsf	3971,4,c	;volatile
  5913  001AEE  9083               	bcf	3971,0,c	;volatile
  5914                           
  5915                           ;lcd.h: 80: PORTDbits.RD1 = 0;
  5916  001AF0  9283               	bcf	3971,1,c	;volatile
  5917                           
  5918                           ;lcd.h: 81: _delay((unsigned long)((5500)*(16000000/4000000.0)));
  5919  001AF2  0E1D               	movlw	29
  5920  001AF4  6E04               	movwf	??_Lcd_Init& (0+255),c
  5921  001AF6  0E91               	movlw	145
  5922  001AF8                     u2947:
  5923  001AF8  2EE8               	decfsz	wreg,f,c
  5924  001AFA  D7FE               	bra	u2947
  5925  001AFC  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5926  001AFE  D7FC               	bra	u2947
  5927  001B00  F000               	nop	
  5928  001B02  2A05               	incf	Lcd_Init@data,f,c
  5929  001B04                     L6:
  5930  001B04  0E03               	movlw	3
  5931  001B06  6405               	cpfsgt	Lcd_Init@data,c
  5932  001B08  D7DD               	goto	l19
  5933                           
  5934                           ;lcd.h: 82: }
  5935                           ;lcd.h: 83: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 = 0; 
      +                          PORTDbits.RD0 = 0; PORTDbits.RD1 = 0;
  5936  001B0A  9E83               	bcf	3971,7,c	;volatile
  5937  001B0C  9C83               	bcf	3971,6,c	;volatile
  5938  001B0E  8A83               	bsf	3971,5,c	;volatile
  5939  001B10  9883               	bcf	3971,4,c	;volatile
  5940  001B12  9083               	bcf	3971,0,c	;volatile
  5941  001B14  9283               	bcf	3971,1,c	;volatile
  5942                           
  5943                           ;lcd.h: 84: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 = 0; 
      +                          PORTDbits.RD0 = 1; PORTDbits.RD1 = 0;
  5944  001B16  9E83               	bcf	3971,7,c	;volatile
  5945  001B18  9C83               	bcf	3971,6,c	;volatile
  5946  001B1A  8A83               	bsf	3971,5,c	;volatile
  5947  001B1C  9883               	bcf	3971,4,c	;volatile
  5948  001B1E  8083               	bsf	3971,0,c	;volatile
  5949  001B20  9283               	bcf	3971,1,c	;volatile
  5950                           
  5951                           ;lcd.h: 85: _delay((unsigned long)((5)*(16000000/4000000.0)));
  5952  001B22  0E06               	movlw	6
  5953  001B24                     u2957:
  5954  001B24  2EE8               	decfsz	wreg,f,c
  5955  001B26  D7FE               	bra	u2957
  5956  001B28  F000 F000          	nop2	
  5957                           
  5958                           ;lcd.h: 86: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 = 0; 
      +                          PORTDbits.RD0 = 0; PORTDbits.RD1 = 0;
  5959  001B2C  9E83               	bcf	3971,7,c	;volatile
  5960  001B2E  9C83               	bcf	3971,6,c	;volatile
  5961  001B30  8A83               	bsf	3971,5,c	;volatile
  5962  001B32  9883               	bcf	3971,4,c	;volatile
  5963  001B34  9083               	bcf	3971,0,c	;volatile
  5964  001B36  9283               	bcf	3971,1,c	;volatile
  5965                           
  5966                           ;lcd.h: 87: _delay((unsigned long)((5500)*(16000000/4000000.0)));
  5967  001B38  0E1D               	movlw	29
  5968  001B3A  6E04               	movwf	??_Lcd_Init& (0+255),c
  5969  001B3C  0E91               	movlw	145
  5970  001B3E                     u2967:
  5971  001B3E  2EE8               	decfsz	wreg,f,c
  5972  001B40  D7FE               	bra	u2967
  5973  001B42  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5974  001B44  D7FC               	bra	u2967
  5975  001B46  F000               	nop	
  5976                           
  5977                           ;lcd.h: 88: data = 40; Lcd_Cmd(data);
  5978  001B48  0E28               	movlw	40
  5979  001B4A  6E05               	movwf	Lcd_Init@data,c
  5980  001B4C  5005               	movf	Lcd_Init@data,w,c
  5981  001B4E  EC8C  F00C         	call	_Lcd_Cmd
  5982                           
  5983                           ;lcd.h: 89: data = 16; Lcd_Cmd(data);
  5984  001B52  0E10               	movlw	16
  5985  001B54  6E05               	movwf	Lcd_Init@data,c
  5986  001B56  5005               	movf	Lcd_Init@data,w,c
  5987  001B58  EC8C  F00C         	call	_Lcd_Cmd
  5988                           
  5989                           ;lcd.h: 90: data = 1; Lcd_Cmd(data);
  5990  001B5C  0E01               	movlw	1
  5991  001B5E  6E05               	movwf	Lcd_Init@data,c
  5992  001B60  5005               	movf	Lcd_Init@data,w,c
  5993  001B62  EC8C  F00C         	call	_Lcd_Cmd
  5994                           
  5995                           ;lcd.h: 91: data = 15; Lcd_Cmd(data);
  5996  001B66  0E0F               	movlw	15
  5997  001B68  6E05               	movwf	Lcd_Init@data,c
  5998  001B6A  5005               	movf	Lcd_Init@data,w,c
  5999  001B6C  EC8C  F00C         	call	_Lcd_Cmd
  6000  001B70  0012               	return		;funcret
  6001  001B72                     __end_of_Lcd_Init:
  6002                           	opt stack 0
  6003                           tblptru	equ	0xFF8
  6004                           tblptrh	equ	0xFF7
  6005                           tblptrl	equ	0xFF6
  6006                           tablat	equ	0xFF5
  6007                           prodh	equ	0xFF4
  6008                           prodl	equ	0xFF3
  6009                           postinc0	equ	0xFEE
  6010                           wreg	equ	0xFE8
  6011                           postdec1	equ	0xFE5
  6012                           fsr1l	equ	0xFE1
  6013                           indf2	equ	0xFDF
  6014                           postinc2	equ	0xFDE
  6015                           postdec2	equ	0xFDD
  6016                           fsr2h	equ	0xFDA
  6017                           fsr2l	equ	0xFD9
  6018                           status	equ	0xFD8
  6019                           
  6020 ;; *************** function _Lcd_Cmd *****************
  6021 ;; Defined at:
  6022 ;;		line 150 in file "lcd.h"
  6023 ;; Parameters:    Size  Location     Type
  6024 ;;  data            1    wreg     unsigned char 
  6025 ;; Auto vars:     Size  Location     Type
  6026 ;;  data            1    2[COMRAM] unsigned char 
  6027 ;; Return value:  Size  Location     Type
  6028 ;;                  1    wreg      void 
  6029 ;; Registers used:
  6030 ;;		wreg, status,2, status,0
  6031 ;; Tracked objects:
  6032 ;;		On entry : 0/0
  6033 ;;		On exit  : 0/0
  6034 ;;		Unchanged: 0/0
  6035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6036 ;;      Params:         0       0       0       0       0       0       0
  6037 ;;      Locals:         1       0       0       0       0       0       0
  6038 ;;      Temps:          2       0       0       0       0       0       0
  6039 ;;      Totals:         3       0       0       0       0       0       0
  6040 ;;Total ram usage:        3 bytes
  6041 ;; Hardware stack levels used:    1
  6042 ;; This function calls:
  6043 ;;		Nothing
  6044 ;; This function is called by:
  6045 ;;		_Lcd_Init
  6046 ;;		_Lcd_Out
  6047 ;;		_main
  6048 ;;		_Lcd_Out2
  6049 ;; This function uses a non-reentrant model
  6050 ;;
  6051                           
  6052                           	psect	text24
  6053  001918                     __ptext24:
  6054                           	opt stack 0
  6055  001918                     _Lcd_Cmd:
  6056                           	opt stack 29
  6057                           
  6058                           ;incstack = 0
  6059                           ;Lcd_Cmd@data stored from wreg
  6060  001918  6E03               	movwf	Lcd_Cmd@data,c
  6061                           
  6062                           ;lcd.h: 152: PORTDbits.RD0 = 0; PORTDbits.RD1 = 0;
  6063  00191A  9083               	bcf	3971,0,c	;volatile
  6064  00191C  9283               	bcf	3971,1,c	;volatile
  6065                           
  6066                           ;lcd.h: 153: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b01000000)
      +                          >>6;
  6067  00191E  6A01               	clrf	??_Lcd_Cmd& (0+255),c
  6068  001920  AE03               	btfss	Lcd_Cmd@data,7,c
  6069  001922  D001               	bra	u1885
  6070  001924  2A01               	incf	??_Lcd_Cmd& (0+255),f,c
  6071  001926                     u1885:
  6072  001926  0E01               	movlw	1
  6073  001928  1601               	andwf	??_Lcd_Cmd,f,c
  6074  00192A  3201               	rrcf	??_Lcd_Cmd,f,c
  6075  00192C  3201               	rrcf	??_Lcd_Cmd,f,c
  6076  00192E  5083               	movf	3971,w,c	;volatile
  6077  001930  1801               	xorwf	??_Lcd_Cmd,w,c
  6078  001932  0B7F               	andlw	-129
  6079  001934  1801               	xorwf	??_Lcd_Cmd,w,c
  6080  001936  6E83               	movwf	3971,c	;volatile
  6081  001938  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6082  00193C  0E06               	movlw	6
  6083  00193E  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  6084  001940                     u1895:
  6085  001940  90D8               	bcf	status,0,c
  6086  001942  3201               	rrcf	??_Lcd_Cmd,f,c
  6087  001944  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  6088  001946  D7FC               	goto	u1895
  6089  001948  0E01               	movlw	1
  6090  00194A  1601               	andwf	??_Lcd_Cmd,f,c
  6091  00194C  3A01               	swapf	??_Lcd_Cmd,f,c
  6092  00194E  4601               	rlncf	??_Lcd_Cmd,f,c
  6093  001950  4601               	rlncf	??_Lcd_Cmd,f,c
  6094  001952  5083               	movf	3971,w,c	;volatile
  6095  001954  1801               	xorwf	??_Lcd_Cmd,w,c
  6096  001956  0BBF               	andlw	-65
  6097  001958  1801               	xorwf	??_Lcd_Cmd,w,c
  6098  00195A  6E83               	movwf	3971,c	;volatile
  6099                           
  6100                           ;lcd.h: 154: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b00010000)
      +                          >>4;
  6101  00195C  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6102  001960  0E05               	movlw	5
  6103  001962  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  6104  001964                     u1905:
  6105  001964  90D8               	bcf	status,0,c
  6106  001966  3201               	rrcf	??_Lcd_Cmd,f,c
  6107  001968  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  6108  00196A  D7FC               	goto	u1905
  6109  00196C  0E01               	movlw	1
  6110  00196E  1601               	andwf	??_Lcd_Cmd,f,c
  6111  001970  3A01               	swapf	??_Lcd_Cmd,f,c
  6112  001972  4601               	rlncf	??_Lcd_Cmd,f,c
  6113  001974  5083               	movf	3971,w,c	;volatile
  6114  001976  1801               	xorwf	??_Lcd_Cmd,w,c
  6115  001978  0BDF               	andlw	-33
  6116  00197A  1801               	xorwf	??_Lcd_Cmd,w,c
  6117  00197C  6E83               	movwf	3971,c	;volatile
  6118  00197E  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6119  001982  3A01               	swapf	??_Lcd_Cmd,f,c
  6120  001984  0E0F               	movlw	15
  6121  001986  1601               	andwf	??_Lcd_Cmd,f,c
  6122  001988  0E01               	movlw	1
  6123  00198A  1601               	andwf	??_Lcd_Cmd,f,c
  6124  00198C  3A01               	swapf	??_Lcd_Cmd,f,c
  6125  00198E  5083               	movf	3971,w,c	;volatile
  6126  001990  1801               	xorwf	??_Lcd_Cmd,w,c
  6127  001992  0BEF               	andlw	-17
  6128  001994  1801               	xorwf	??_Lcd_Cmd,w,c
  6129  001996  6E83               	movwf	3971,c	;volatile
  6130                           
  6131                           ;lcd.h: 155: _delay(10);
  6132  001998  0E03               	movlw	3
  6133  00199A                     u2977:
  6134  00199A  2EE8               	decfsz	wreg,f,c
  6135  00199C  D7FE               	bra	u2977
  6136  00199E  F000               	nop	
  6137                           
  6138                           ;lcd.h: 156: PORTDbits.RD0 = 1; _delay((unsigned long)((5)*(16000000/4000000.0))); PORTD
      +                          bits.RD0 = 0;
  6139  0019A0  8083               	bsf	3971,0,c	;volatile
  6140  0019A2  0E06               	movlw	6
  6141  0019A4                     u2987:
  6142  0019A4  2EE8               	decfsz	wreg,f,c
  6143  0019A6  D7FE               	bra	u2987
  6144  0019A8  F000 F000          	nop2	
  6145  0019AC  9083               	bcf	3971,0,c	;volatile
  6146                           
  6147                           ;lcd.h: 157: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b00000100)
      +                          >>2;
  6148  0019AE  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6149  0019B2  90D8               	bcf	status,0,c
  6150  0019B4  3201               	rrcf	??_Lcd_Cmd,f,c
  6151  0019B6  90D8               	bcf	status,0,c
  6152  0019B8  3201               	rrcf	??_Lcd_Cmd,f,c
  6153  0019BA  90D8               	bcf	status,0,c
  6154  0019BC  3201               	rrcf	??_Lcd_Cmd,f,c
  6155  0019BE  0E01               	movlw	1
  6156  0019C0  1601               	andwf	??_Lcd_Cmd,f,c
  6157  0019C2  3201               	rrcf	??_Lcd_Cmd,f,c
  6158  0019C4  3201               	rrcf	??_Lcd_Cmd,f,c
  6159  0019C6  5083               	movf	3971,w,c	;volatile
  6160  0019C8  1801               	xorwf	??_Lcd_Cmd,w,c
  6161  0019CA  0B7F               	andlw	-129
  6162  0019CC  1801               	xorwf	??_Lcd_Cmd,w,c
  6163  0019CE  6E83               	movwf	3971,c	;volatile
  6164  0019D0  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6165  0019D4  90D8               	bcf	status,0,c
  6166  0019D6  3201               	rrcf	??_Lcd_Cmd,f,c
  6167  0019D8  90D8               	bcf	status,0,c
  6168  0019DA  3201               	rrcf	??_Lcd_Cmd,f,c
  6169  0019DC  0E01               	movlw	1
  6170  0019DE  1601               	andwf	??_Lcd_Cmd,f,c
  6171  0019E0  3A01               	swapf	??_Lcd_Cmd,f,c
  6172  0019E2  4601               	rlncf	??_Lcd_Cmd,f,c
  6173  0019E4  4601               	rlncf	??_Lcd_Cmd,f,c
  6174  0019E6  5083               	movf	3971,w,c	;volatile
  6175  0019E8  1801               	xorwf	??_Lcd_Cmd,w,c
  6176  0019EA  0BBF               	andlw	-65
  6177  0019EC  1801               	xorwf	??_Lcd_Cmd,w,c
  6178  0019EE  6E83               	movwf	3971,c	;volatile
  6179                           
  6180                           ;lcd.h: 158: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b00000001)
      +                          ;
  6181  0019F0  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6182  0019F4  90D8               	bcf	status,0,c
  6183  0019F6  3201               	rrcf	??_Lcd_Cmd,f,c
  6184  0019F8  0E01               	movlw	1
  6185  0019FA  1601               	andwf	??_Lcd_Cmd,f,c
  6186  0019FC  3A01               	swapf	??_Lcd_Cmd,f,c
  6187  0019FE  4601               	rlncf	??_Lcd_Cmd,f,c
  6188  001A00  5083               	movf	3971,w,c	;volatile
  6189  001A02  1801               	xorwf	??_Lcd_Cmd,w,c
  6190  001A04  0BDF               	andlw	-33
  6191  001A06  1801               	xorwf	??_Lcd_Cmd,w,c
  6192  001A08  6E83               	movwf	3971,c	;volatile
  6193  001A0A  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6194  001A0E  0E01               	movlw	1
  6195  001A10  1601               	andwf	??_Lcd_Cmd,f,c
  6196  001A12  3A01               	swapf	??_Lcd_Cmd,f,c
  6197  001A14  5083               	movf	3971,w,c	;volatile
  6198  001A16  1801               	xorwf	??_Lcd_Cmd,w,c
  6199  001A18  0BEF               	andlw	-17
  6200  001A1A  1801               	xorwf	??_Lcd_Cmd,w,c
  6201  001A1C  6E83               	movwf	3971,c	;volatile
  6202                           
  6203                           ;lcd.h: 159: _delay(10);
  6204  001A1E  0E03               	movlw	3
  6205  001A20                     u2997:
  6206  001A20  2EE8               	decfsz	wreg,f,c
  6207  001A22  D7FE               	bra	u2997
  6208  001A24  F000               	nop	
  6209                           
  6210                           ;lcd.h: 160: PORTDbits.RD0 = 1; _delay((unsigned long)((5)*(16000000/4000000.0))); PORTD
      +                          bits.RD0 = 0;
  6211  001A26  8083               	bsf	3971,0,c	;volatile
  6212  001A28  0E06               	movlw	6
  6213  001A2A                     u3007:
  6214  001A2A  2EE8               	decfsz	wreg,f,c
  6215  001A2C  D7FE               	bra	u3007
  6216  001A2E  F000 F000          	nop2	
  6217  001A32  9083               	bcf	3971,0,c	;volatile
  6218                           
  6219                           ;lcd.h: 161: _delay((unsigned long)((5500)*(16000000/4000000.0)));
  6220  001A34  0E1D               	movlw	29
  6221  001A36  6E01               	movwf	??_Lcd_Cmd& (0+255),c
  6222  001A38  0E91               	movlw	145
  6223  001A3A                     u3017:
  6224  001A3A  2EE8               	decfsz	wreg,f,c
  6225  001A3C  D7FE               	bra	u3017
  6226  001A3E  2E01               	decfsz	??_Lcd_Cmd& (0+255),f,c
  6227  001A40  D7FC               	bra	u3017
  6228  001A42  F000               	nop	
  6229  001A44  0012               	return		;funcret
  6230  001A46                     __end_of_Lcd_Cmd:
  6231                           	opt stack 0
  6232                           tblptru	equ	0xFF8
  6233                           tblptrh	equ	0xFF7
  6234                           tblptrl	equ	0xFF6
  6235                           tablat	equ	0xFF5
  6236                           prodh	equ	0xFF4
  6237                           prodl	equ	0xFF3
  6238                           postinc0	equ	0xFEE
  6239                           wreg	equ	0xFE8
  6240                           postdec1	equ	0xFE5
  6241                           fsr1l	equ	0xFE1
  6242                           indf2	equ	0xFDF
  6243                           postinc2	equ	0xFDE
  6244                           postdec2	equ	0xFDD
  6245                           fsr2h	equ	0xFDA
  6246                           fsr2l	equ	0xFD9
  6247                           status	equ	0xFD8
  6248                           tblptru	equ	0xFF8
  6249                           tblptrh	equ	0xFF7
  6250                           tblptrl	equ	0xFF6
  6251                           tablat	equ	0xFF5
  6252                           prodh	equ	0xFF4
  6253                           prodl	equ	0xFF3
  6254                           postinc0	equ	0xFEE
  6255                           wreg	equ	0xFE8
  6256                           postdec1	equ	0xFE5
  6257                           fsr1l	equ	0xFE1
  6258                           indf2	equ	0xFDF
  6259                           postinc2	equ	0xFDE
  6260                           postdec2	equ	0xFDD
  6261                           fsr2h	equ	0xFDA
  6262                           fsr2l	equ	0xFD9
  6263                           status	equ	0xFD8
  6264                           
  6265                           	psect	rparam
  6266  0000                     tblptru	equ	0xFF8
  6267                           tblptrh	equ	0xFF7
  6268                           tblptrl	equ	0xFF6
  6269                           tablat	equ	0xFF5
  6270                           prodh	equ	0xFF4
  6271                           prodl	equ	0xFF3
  6272                           postinc0	equ	0xFEE
  6273                           wreg	equ	0xFE8
  6274                           postdec1	equ	0xFE5
  6275                           fsr1l	equ	0xFE1
  6276                           indf2	equ	0xFDF
  6277                           postinc2	equ	0xFDE
  6278                           postdec2	equ	0xFDD
  6279                           fsr2h	equ	0xFDA
  6280                           fsr2l	equ	0xFD9
  6281                           status	equ	0xFD8


Data Sizes:
    Strings     12
    Constant    118
    Data        19
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     78      84
    BANK0           160     23      52
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> TextoLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 16
		 -> TextoLCD(BANK0[16]), Mensaje(BANK0[13]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   50552
                         _Lcd_Chr_CP
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                              _SetUp
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             46    37      9   49049
                                             63 COMRAM    15     6      9
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   11677
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   11479
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2743
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5007
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2572
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     767
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4042
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3697
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2427
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _SetUp                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out                                              5     2      3     837
                                              3 COMRAM     5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Chr_CP
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Lcd_Chr_CP
     _Lcd_Cmd
   _SetUp
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     17      34       5       32.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4E      54       1       88.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      88      15        0.0%
DATA                 0      0      88       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Apr 27 22:10:35 2018

                      _b 004F                       l31 2256                       l32 2244  
                     l24 2222                       l25 2208                       l26 223C  
                     l19 1AC4                       l27 220E                       l28 2214  
                     l29 221A                       l68 219C                       l93 13F6  
                     l96 14C2                       l99 10B0             ___awdiv@sign 000C  
    ___wmul@multiplicand 0011             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000             ___ftadd@exp1 0039  
           ___ftadd@exp2 0038             ___ftadd@sign 0037                      l100 0FDC  
                    l110 0690                      l103 108C                      l111 06AA  
                    l104 11DC                      l120 0730                      l112 0722  
                    l121 0762                      l113 070C                      l106 128C  
                    l130 08B0                      l114 06D4                      l132 08D6  
                    l125 0CFC                      l133 0916                      l117 0734  
                    l134 09DE                      l126 0776                      l151 0B54  
                    l143 0A44                      l127 07B8                      l160 0CF2  
                    l152 0B3E                      l161 0CDC                      l137 0986  
                    l129 084A                      l170 0DC6                      l154 0B78  
                    l411 1EDE                      l163 0D36                      l155 0B7C  
                    l412 1EC8                      l172 0E70                      l164 0D4E  
                    l156 0B9E                      l148 0B34                      l173 0DE8  
                    l157 0CD0                      l149 0AA0                      l414 1F06  
                    l510 1D44                      l158 0BEE                      l415 1EFC  
                    l351 2022                      l511 1D54                      l408 1EAA  
                    l352 202C                      l344 1FD4                      l360 20FC  
                    l504 1CC2                      l168 0DA6                      l409 1EA0  
                    l521 232E                      l353 203A                      l345 1FE4  
                    l361 20F4                      l506 1CEA                      l515 2394  
                    l443 157E                      l347 2002                      l507 1D1C  
                    l380 1C20                      l348 1FFA                      l364 2114  
                    l508 1D2C                      l540 23B8                      l453 15DA  
                    l533 1E54                      l525 1DBA                      l365 211E  
                    l357 20DA                      l462 1618                      l454 15D0  
                    l534 1E48                      l382 1C5E                      l366 212C  
                    l358 20E6                      l463 160E                      l439 1554  
                    l527 1E30                      l383 1C4E                      l448 15E4  
                    l536 1E70                      l528 1E20                      l376 1B90  
                    l480 1812                      l465 163C                      l466 1658  
                    l570 20A6                      l378 1BAE                      l482 183E  
                    l467 1688                      l571 20B4                      l379 1BF0  
                    l483 1878                      l580 21E4                      l388 1C82  
                    l492 1900                      l484 18A0                      l581 21F2  
                    l389 1C76                      l493 18F4                      l566 2072  
                    l486 18DC                      l567 2066                      l487 18CC  
                    l576 21BC                      l497 1F60                      l577 21B0  
                    l498 1F90                      l587 2278                      l588 226C  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000             __CFG_BORV$18 000000  
           ___awmod@sign 0006                      wreg 000FE8              _sprintf$843 0060  
           __CFG_LVP$OFF 000000                     l1807 1FBC                     l2713 0DE8  
                   l2625 0B3E                     l2717 0E6C                     l2577 0960  
                   l2569 0916                     l2597 0A48                     l2687 0D52  
                   STR_1 0677                     u2110 1906                     u2031 17F6  
                   u2051 1822                     u1420 1E92                     u2300 1E5A  
                   u1501 1526                     u3007 1A2A                     u3017 1A3A  
                   u2241 1D9E                     u1530 1546                     u2330 2076  
                   u1460 1F10                     u2260 1DD8                     u2180 1C88  
                   u1701 1CAA                     u1630 15EC                     u1560 1570  
                   u2360 21C0                     u2265 1DD0                     u1721 1CD2  
                   u2610 0A80                     u2530 08E8                     u1491 1512  
                   u1660 1620                     u2540 0928                     u1590 15AE  
                   u2640 0B62                     u1905 1964                     u1850 2100  
                   u2650 0B72                     u2570 0960                     u2490 07F0  
                   u1915 16BC                     u2740 0D8A                     u1925 16D6  
                   u1790 2006                     u1935 16FA                     u2495 07E6  
                   u2817 1730                     u2907 1A94                     u2827 173A  
                   u2780 0E80                     u1885 1926                     u2917 1AA4  
                   u2837 17B6                     u2790 0E9A                     u1895 1940  
                   u2927 1AB4                     u2847 17C0                     u2937 1ADE  
                   u2857 17CC                     u2947 1AF8                     u2867 17DA  
                   u2957 1B24                     u2877 1A64                     u2967 1B3E  
                   u2887 1A74                     u2977 199A                     u2897 1A84  
                   u2987 19A4                     u2997 1A20             __CFG_PWRT$ON 000000  
                   _main 2136             ___ftpack@arg 0001             ___ftpack@exp 0004  
                   fsr2h 000FDA                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000          __end_of_Lcd_Cmd 1A46  
        __end_of_Lcd_Out 2266            __CFG_MCLRE$ON 000000             ___ftmul@cntr 0022  
           ___param_bank 000000             ___ftmul@sign 0023               _Lcd_Chr_CP 16AE  
           ___fttol@exp1 0039             ___fttol@lval 0035                    ?_main 0001  
        __end_of___awdiv 2044          __end_of___ftadd 16AE          __end_of___awmod 2136  
        __end_of___ftneg 23A2          __end_of___lldiv 20C6          __end_of___ftmul 1D8E  
        ___awdiv@divisor 0009          __end_of___llmod 2204          __end_of___ftsub 2358  
        __end_of___fttol 1E82          ___awdiv@counter 000B            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
                  _u16_a 0052             ___lltoft@exp 0011           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
                  _SetUp 23CE           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
        __end_of_dpowers 0629                    _scale 0EA8          __end_of_isdigit 23C0  
          ___ftpack@sign 0005                    tablat 000FF5                    status 000FD8  
        __end_of_sprintf 0EA8           __CFG_HFOFST$ON 000000         __end_of_Lcd_Init 1B72  
        __initialization 22C2             __end_of_main 219E                   ??_main 004F  
          ___fttol@sign1 0034            __activetblptr 000002     __size_of__tdiv_to_l_ 0132  
                 ?_SetUp 0001         ___llmod@dividend 000E                   ?_scale 0024  
       ___awdiv@dividend 0007         __end_of___ftpack 1F30         __end_of___lltoft 22C2  
         __CFG_WDTEN$OFF 000000                ??_Lcd_Cmd 0001                ??_Lcd_Out 0007  
         __CFG_XINST$OFF 000000         __end_of__powers_ 0650                   ___ftge 1F30  
            ?_Lcd_Chr_CP 0001                   ___wmul 2358                ??___awdiv 000B  
              ??___ftadd 0034           __CFG_STVREN$ON 000000                ??___awmod 0005  
              ??___ftneg 0004                ??___lldiv 0009                ??___ftmul 001B  
              ??___llmod 0016                ??___ftsub 0040                ??___fttol 002F  
                 _fround 12B0                   clear_0 2308         ___awdiv@quotient 000D  
        ___awmod@divisor 0003          ___awmod@counter 0005    ___ftmul@f3_as_product 001F  
           __pdataCOMRAM 004F                ??_isdigit 0001             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ??_sprintf 0049               __accesstop 0060  __end_of__initialization 230E  
        __CFG_PBADEN$OFF 000000               ___ftadd@f1 002E               ___ftadd@f2 0031  
             ___ftge@ff1 0001               ___ftge@ff2 0004            ___rparam_used 000001  
             ___ftneg@f1 0001               ___ftmul@f1 0015               ___ftmul@f2 0018  
             ___ftsub@f1 003A               ___ftsub@f2 003D               ___fttol@f1 002B  
         __pcstackCOMRAM 0001            __end_of_SetUp 23D6             __pidataBANK0 23C0  
             ___lltoft@c 0009            __end_of_scale 12B0               __div_to_l_ 1B72  
                ??_SetUp 0001                ?_Lcd_Init 0001          __div_to_l_@exp1 000C  
        __div_to_l_@cntr 000B                  ??_scale 0027          __div_to_l_@quot 0007  
    __size_of_Lcd_Chr_CP 0138               __pbssBANK0 0077            __div_to_l_@f1 0001  
          __div_to_l_@f2 0004                  ?___ftge 0001                  ?___wmul 000F  
                ?_fround 0024                ?___ftpack 0001                ?___lltoft 0009  
             ??_Lcd_Init 0004                  _Lcd_Cmd 1918                  _Lcd_Out 2204  
                _Mensaje 0087        __end_of__npowers_ 0677                  __Hparam 0000  
                __Lparam 0000          __size_of___ftge 0090                  ___awdiv 1FC0  
                ___ftadd 1502                  ___awmod 20C6                  ___ftneg 237E  
                ___lldiv 2044          __size_of___wmul 0026                  ___ftmul 1C9A  
                ___llmod 219E                  ___ftsub 2318                  ___fttol 1D8E  
             _fround$840 002A               _fround$841 0027             __psmallconst 0600  
                __pcinit 22C2               ??___ftpack 0006          __size_of_fround 0252  
                __ramtop 0600               ??___lltoft 000D                  __ptext0 2136  
                __ptext1 0684                  __ptext2 0EA8                  __ptext3 23A2  
                __ptext4 12B0                  __ptext5 2358                  __ptext6 1C9A  
                __ptext7 20C6                  __ptext8 1FC0                  __ptext9 17E6  
            ?__div_to_l_ 0001                  _dpowers 0601                  _isdigit 23A2  
       ___awmod@dividend 0001                  _sprintf 0684     end_of_initialization 230E  
          __Lmediumconst 0000          ___lldiv@divisor 0005          ___lldiv@counter 000D  
           ??_Lcd_Chr_CP 0001                  postdec1 000FE5                  postdec2 000FDD  
                postinc0 000FEE                  postinc2 000FDE           __tdiv_to_l_@f1 0001  
         __tdiv_to_l_@f2 0004            ??__tdiv_to_l_ 0007                _PORTDbits 000F83  
              _TRISDbits 000F95       __end_of_Lcd_Chr_CP 17E6      __size_of__div_to_l_ 0128  
            ___ftmul@exp 001E           __end_of___ftge 1FC0           __end_of___wmul 237E  
          __pidataCOMRAM 23D6           __end_of_fround 1502      start_initialization 22C2  
    __end_of__tdiv_to_l_ 1918            Lcd_Out@buffer 0005        __size_of_Lcd_Init 012C  
        ___llmod@divisor 0012          ___llmod@counter 0016                 ??___ftge 0007  
               ??___wmul 0013              __pdataBANK0 0087         __CFG_LPT1OSC$OFF 000000  
               ??_fround 0027            sprintf@tmpval 0069               fround@prec 002D  
      __size_of___ftpack 00AE        __size_of___lltoft 005C            __pcstackBANK0 0060  
               ?_Lcd_Cmd 0001              sprintf@flag 0065                 ?_Lcd_Out 0004  
            sprintf@fval 0073              sprintf@prec 0071        __CFG_CCP2MX$PORTC 000000  
               ?___awdiv 0007                 ?___ftadd 002E                 ?___awmod 0001  
               ?___ftneg 0001                 ?___lldiv 0001                 ?___ftmul 0015  
               ?___llmod 000E                 ?___ftsub 003A                __npowers_ 0650  
               ?___fttol 002B              __tdiv_to_l_ 17E6             ??__div_to_l_ 0007  
            __smallconst 0600                 ?_isdigit 0001                _scale$842 0027  
         __size_of_SetUp 0008                 ?_sprintf 0040           __size_of_scale 0408  
         ___wmul@product 0013       __end_of__div_to_l_ 1C9A                 Lcd_Out@x 0004  
       __CFG_WDTPS$32768 000000                 Lcd_Out@y 0007             Lcd_Init@data 0005  
      ___wmul@multiplier 000F                 _Caracter 0054                 _Lcd_Init 1A46  
              copy_data0 22D6                copy_data1 22F6         __size_of_Lcd_Cmd 012E  
       __size_of_Lcd_Out 0062                 __Hrparam 0000                 __Lrparam 0000  
     __CFG_BOREN$SBORDIS 000000                 _TextoLCD 0077         __size_of___awdiv 0084  
       __size_of___ftadd 01AC         __size_of___awmod 0070         __size_of___ftneg 0024  
       __size_of___lldiv 0082         __size_of___ftmul 00F4         __size_of___llmod 0066  
       __size_of___ftsub 0040         __size_of___fttol 00F4                 ___ftpack 1E82  
               ___lltoft 2266              _isdigit$506 0002               sprintf@exp 0067  
             sprintf@val 006D         __size_of_isdigit 001E           Lcd_Chr_CP@data 0003  
               __ptext10 1B72                 __ptext11 2266                 __ptext20 23CE  
               __ptext12 219E                 __ptext21 2204                 __ptext13 2044  
               __ptext22 16AE                 __ptext14 1D8E                 __ptext23 1A46  
               __ptext15 2318                 __ptext24 1918                 __ptext16 1502  
               __ptext17 1E82                 __ptext18 237E                 __ptext19 1F30  
               __powers_ 0629         __size_of_sprintf 0824              Lcd_Cmd@data 0003  
          __size_of_main 0068              Lcd_Out@data 0008                 isdigit@c 0003  
               scale@scl 002A                sprintf@ap 0063         __tdiv_to_l_@exp1 000F  
              sprintf@sp 0040         __tdiv_to_l_@cntr 000E         __tdiv_to_l_@quot 000A  
       ___lldiv@dividend 0001               _OSCCONbits 000FD3             ?__tdiv_to_l_ 0001  
               sprintf@c 0076                 sprintf@f 0042         ___lldiv@quotient 0009  
      __CFG_FOSC$INTIO67 000000  
