

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Apr 27 23:16:14 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21  0000                     
    22                           ; Version 1.45
    23                           ; Generated 16/11/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F45K20 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     
    57                           	psect	idataCOMRAM
    58  007A89                     __pidataCOMRAM:
    59                           	opt stack 0
    60                           
    61                           ;initializer for _Keys
    62  007A89  31                 	db	49
    63  007A8A  32                 	db	50
    64  007A8B  33                 	db	51
    65  007A8C  41                 	db	65
    66  007A8D  34                 	db	52
    67  007A8E  35                 	db	53
    68  007A8F  36                 	db	54
    69  007A90  42                 	db	66
    70  007A91  37                 	db	55
    71  007A92  38                 	db	56
    72  007A93  39                 	db	57
    73  007A94  43                 	db	67
    74  007A95  2A                 	db	42
    75  007A96  30                 	db	48
    76  007A97  23                 	db	35
    77  007A98  44                 	db	68
    78                           
    79                           ;initializer for _Mensaje1
    80  007A99  44                 	db	68
    81  007A9A  49                 	db	73
    82  007A9B  47                 	db	71
    83  007A9C  49                 	db	73
    84  007A9D  54                 	db	84
    85  007A9E  45                 	db	69
    86  007A9F  20                 	db	32
    87  007AA0  4C                 	db	76
    88  007AA1  41                 	db	65
    89  007AA2  20                 	db	32
    90  007AA3  43                 	db	67
    91  007AA4  4C                 	db	76
    92  007AA5  41                 	db	65
    93  007AA6  56                 	db	86
    94  007AA7  45                 	db	69
    95  007AA8  3A                 	db	58
    96  007AA9  00                 	db	0
    97                           
    98                           ;initializer for _Mensaje2
    99  007AAA  43                 	db	67
   100  007AAB  6C                 	db	108
   101  007AAC  61                 	db	97
   102  007AAD  76                 	db	118
   103  007AAE  65                 	db	101
   104  007AAF  20                 	db	32
   105  007AB0  44                 	db	68
   106  007AB1  69                 	db	105
   107  007AB2  67                 	db	103
   108  007AB3  69                 	db	105
   109  007AB4  74                 	db	116
   110  007AB5  61                 	db	97
   111  007AB6  64                 	db	100
   112  007AB7  61                 	db	97
   113  007AB8  3A                 	db	58
   114  007AB9  00                 	db	0
   115                           
   116                           ;initializer for _Clave
   117  007ABA  30                 	db	48
   118  007ABB  30                 	db	48
   119  007ABC  30                 	db	48
   120  007ABD  30                 	db	48
   121  0000                     _OSCCONbits	set	4051
   122  0000                     _TRISB	set	3987
   123  0000                     _ANSELHbits	set	3967
   124  0000                     _LATB	set	3978
   125  0000                     _PORTB	set	3969
   126  0000                     _PORTDbits	set	3971
   127  0000                     _TRISDbits	set	3989
   128                           
   129                           ; #config settings
   130  0000                     
   131                           	psect	cinit
   132  007A28                     __pcinit:
   133                           	opt stack 0
   134  007A28                     start_initialization:
   135                           	opt stack 0
   136  007A28                     __initialization:
   137                           	opt stack 0
   138                           
   139                           ; Initialize objects allocated to COMRAM (53 bytes)
   140                           ; load TBLPTR registers with __pidataCOMRAM
   141  007A28  0E89               	movlw	low __pidataCOMRAM
   142  007A2A  6EF6               	movwf	tblptrl,c
   143  007A2C  0E7A               	movlw	high __pidataCOMRAM
   144  007A2E  6EF7               	movwf	tblptrh,c
   145  007A30  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   146  007A32  6EF8               	movwf	tblptru,c
   147  007A34  EE00  F001         	lfsr	0,__pdataCOMRAM
   148  007A38  EE10 F035          	lfsr	1,53
   149  007A3C                     copy_data0:
   150  007A3C  0009               	tblrd		*+
   151  007A3E  CFF5 FFEE          	movff	tablat,postinc0
   152  007A42  50E5               	movf	postdec1,w,c
   153  007A44  50E1               	movf	fsr1l,w,c
   154  007A46  E1FA               	bnz	copy_data0
   155                           
   156                           ; Clear objects allocated to COMRAM (1 bytes)
   157  007A48  6A40               	clrf	__pbssCOMRAM& (0+255),c
   158  007A4A                     end_of_initialization:
   159                           	opt stack 0
   160  007A4A                     __end_of__initialization:
   161                           	opt stack 0
   162  007A4A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   163  007A4C  6EF8               	movwf	tblptru,c
   164  007A4E  0100               	movlb	0
   165  007A50  EFDD  F03D         	goto	_main	;jump to C main() function
   166                           tblptru	equ	0xFF8
   167                           tblptrh	equ	0xFF7
   168                           tblptrl	equ	0xFF6
   169                           tablat	equ	0xFF5
   170                           postinc0	equ	0xFEE
   171                           postdec1	equ	0xFE5
   172                           fsr1l	equ	0xFE1
   173                           
   174                           	psect	bssCOMRAM
   175  000040                     __pbssCOMRAM:
   176                           	opt stack 0
   177  000040                     _u8_i:
   178                           	opt stack 0
   179  000040                     	ds	1
   180                           tblptru	equ	0xFF8
   181                           tblptrh	equ	0xFF7
   182                           tblptrl	equ	0xFF6
   183                           tablat	equ	0xFF5
   184                           postinc0	equ	0xFEE
   185                           postdec1	equ	0xFE5
   186                           fsr1l	equ	0xFE1
   187                           
   188                           	psect	dataCOMRAM
   189  000001                     __pdataCOMRAM:
   190                           	opt stack 0
   191  000001                     _Keys:
   192                           	opt stack 0
   193  000001                     	ds	16
   194  000011                     _Mensaje1:
   195                           	opt stack 0
   196  000011                     	ds	17
   197  000022                     _Mensaje2:
   198                           	opt stack 0
   199  000022                     	ds	16
   200  000032                     _Clave:
   201                           	opt stack 0
   202  000032                     	ds	4
   203                           tblptru	equ	0xFF8
   204                           tblptrh	equ	0xFF7
   205                           tblptrl	equ	0xFF6
   206                           tablat	equ	0xFF5
   207                           postinc0	equ	0xFEE
   208                           postdec1	equ	0xFE5
   209                           fsr1l	equ	0xFE1
   210                           
   211                           	psect	cstackCOMRAM
   212  000036                     __pcstackCOMRAM:
   213                           	opt stack 0
   214  000036                     ??_Lcd_Cmd:
   215  000036                     ??_Lcd_Chr_CP:
   216  000036                     GetCol@ColValue:
   217                           	opt stack 0
   218                           
   219                           ; 1 bytes @ 0x0
   220  000036                     	ds	1
   221  000037                     GetCol@Col:
   222                           	opt stack 0
   223                           
   224                           ; 1 bytes @ 0x1
   225  000037                     	ds	1
   226  000038                     ??_GetKey:
   227  000038                     Lcd_Chr_CP@data:
   228                           	opt stack 0
   229  000038                     Lcd_Cmd@data:
   230                           	opt stack 0
   231                           
   232                           ; 1 bytes @ 0x2
   233  000038                     	ds	1
   234  000039                     ??_Lcd_Init:
   235  000039                     Lcd_Out@x:
   236                           	opt stack 0
   237                           
   238                           ; 1 bytes @ 0x3
   239  000039                     	ds	1
   240  00003A                     Lcd_Init@data:
   241                           	opt stack 0
   242  00003A                     GetKey@Col:
   243                           	opt stack 0
   244  00003A                     Lcd_Out@buffer:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x4
   248  00003A                     	ds	1
   249  00003B                     GetKey@Cont:
   250                           	opt stack 0
   251                           
   252                           ; 1 bytes @ 0x5
   253  00003B                     	ds	1
   254  00003C                     Lcd_Out@y:
   255                           	opt stack 0
   256  00003C                     GetKey@AnsCol:
   257                           	opt stack 0
   258                           
   259                           ; 1 bytes @ 0x6
   260  00003C                     	ds	1
   261  00003D                     Lcd_Out@data:
   262                           	opt stack 0
   263  00003D                     GetKey@Row:
   264                           	opt stack 0
   265                           
   266                           ; 1 bytes @ 0x7
   267  00003D                     	ds	1
   268  00003E                     ??_main:
   269                           
   270                           ; 1 bytes @ 0x8
   271  00003E                     	ds	2
   272                           tblptru	equ	0xFF8
   273                           tblptrh	equ	0xFF7
   274                           tblptrl	equ	0xFF6
   275                           tablat	equ	0xFF5
   276                           postinc0	equ	0xFEE
   277                           postdec1	equ	0xFE5
   278                           fsr1l	equ	0xFE1
   279                           
   280 ;;
   281 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   282 ;;
   283 ;; *************** function _main *****************
   284 ;; Defined at:
   285 ;;		line 54 in file "main.c"
   286 ;; Parameters:    Size  Location     Type
   287 ;;		None
   288 ;; Auto vars:     Size  Location     Type
   289 ;;		None
   290 ;; Return value:  Size  Location     Type
   291 ;;                  1    wreg      void 
   292 ;; Registers used:
   293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   294 ;; Tracked objects:
   295 ;;		On entry : 0/0
   296 ;;		On exit  : 0/0
   297 ;;		Unchanged: 0/0
   298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   299 ;;      Params:         0       0       0       0       0       0       0
   300 ;;      Locals:         0       0       0       0       0       0       0
   301 ;;      Temps:          2       0       0       0       0       0       0
   302 ;;      Totals:         2       0       0       0       0       0       0
   303 ;;Total ram usage:        2 bytes
   304 ;; Hardware stack levels required when called:    2
   305 ;; This function calls:
   306 ;;		_GetKey
   307 ;;		_Lcd_Chr_CP
   308 ;;		_Lcd_Cmd
   309 ;;		_Lcd_Init
   310 ;;		_Lcd_Out
   311 ;;		_SetUp
   312 ;; This function is called by:
   313 ;;		Startup code after reset
   314 ;; This function uses a non-reentrant model
   315 ;;
   316                           
   317                           	psect	text0
   318  007BBA                     __ptext0:
   319                           	opt stack 0
   320  007BBA                     _main:
   321                           	opt stack 29
   322                           
   323                           ;main.c: 57: SetUp();
   324                           
   325                           ;incstack = 0
   326  007BBA  EC08  F03D         	call	_SetUp	;wreg free
   327                           
   328                           ;main.c: 58: Lcd_Init();
   329  007BBE  EC37  F03E         	call	_Lcd_Init	;wreg free
   330                           
   331                           ;main.c: 60: Lcd_Cmd(12);
   332  007BC2  0E0C               	movlw	12
   333  007BC4  ECCD  F03E         	call	_Lcd_Cmd
   334                           
   335                           ;main.c: 61: Lcd_Out(1,0,Mensaje1);
   336  007BC8  0E00               	movlw	0
   337  007BCA  6E39               	movwf	Lcd_Out@x,c
   338  007BCC  0E11               	movlw	low _Mensaje1
   339  007BCE  6E3A               	movwf	Lcd_Out@buffer,c
   340  007BD0  0E00               	movlw	high _Mensaje1
   341  007BD2  6E3B               	movwf	Lcd_Out@buffer+1,c
   342  007BD4  0E01               	movlw	1
   343  007BD6  EC5F  F03D         	call	_Lcd_Out
   344                           
   345                           ;main.c: 62: Lcd_Cmd(192);
   346  007BDA  0EC0               	movlw	192
   347  007BDC  ECCD  F03E         	call	_Lcd_Cmd
   348                           
   349                           ;main.c: 65: for(u8_i = 0; u8_i <= 3; u8_i++)
   350  007BE0  0E00               	movlw	0
   351  007BE2  6E40               	movwf	_u8_i,c
   352  007BE4                     l1196:
   353  007BE4  0E03               	movlw	3
   354  007BE6  6440               	cpfsgt	_u8_i,c
   355  007BE8  D001               	goto	l100
   356  007BEA  D01F               	goto	u340
   357  007BEC                     l100:
   358                           
   359                           ;main.c: 66: {
   360                           ;main.c: 67: Clave[u8_i] = GetKey();
   361  007BEC  EC90  F03D         	call	_GetKey	;wreg free
   362  007BF0  6E3E               	movwf	??_main& (0+255),c
   363  007BF2  5040               	movf	_u8_i,w,c
   364  007BF4  0D01               	mullw	1
   365  007BF6  0E32               	movlw	low _Clave
   366  007BF8  24F3               	addwf	prodl,w,c
   367  007BFA  6ED9               	movwf	fsr2l,c
   368  007BFC  0E00               	movlw	high _Clave
   369  007BFE  20F4               	addwfc	prodh,w,c
   370  007C00  6EDA               	movwf	fsr2h,c
   371  007C02  C03E  FFDF         	movff	??_main,indf2
   372                           
   373                           ;main.c: 68: _delay((unsigned long)((300)*(16000000/4000.0)));
   374  007C06  0E07               	movlw	7
   375  007C08  6E3F               	movwf	(??_main+1)& (0+255),c
   376  007C0A  0E17               	movlw	23
   377  007C0C  6E3E               	movwf	??_main& (0+255),c
   378  007C0E  0E6A               	movlw	106
   379  007C10                     u357:
   380  007C10  2EE8               	decfsz	wreg,f,c
   381  007C12  D7FE               	bra	u357
   382  007C14  2E3E               	decfsz	??_main& (0+255),f,c
   383  007C16  D7FC               	bra	u357
   384  007C18  2E3F               	decfsz	(??_main+1)& (0+255),f,c
   385  007C1A  D7FA               	bra	u357
   386  007C1C  F000 F000          	nop2	
   387                           
   388                           ;main.c: 69: Lcd_Chr_CP('*');
   389  007C20  0E2A               	movlw	42
   390  007C22  EC64  F03F         	call	_Lcd_Chr_CP
   391  007C26  2A40               	incf	_u8_i,f,c
   392  007C28  D7DD               	goto	l1196
   393  007C2A                     u340:
   394                           
   395                           ;main.c: 70: }
   396                           ;main.c: 72: _delay((unsigned long)((800)*(16000000/4000.0)));
   397  007C2A  0E11               	movlw	17
   398  007C2C  6E3F               	movwf	(??_main+1)& (0+255),c
   399  007C2E  0E3C               	movlw	60
   400  007C30  6E3E               	movwf	??_main& (0+255),c
   401  007C32  0ECB               	movlw	203
   402  007C34                     u367:
   403  007C34  2EE8               	decfsz	wreg,f,c
   404  007C36  D7FE               	bra	u367
   405  007C38  2E3E               	decfsz	??_main& (0+255),f,c
   406  007C3A  D7FC               	bra	u367
   407  007C3C  2E3F               	decfsz	(??_main+1)& (0+255),f,c
   408  007C3E  D7FA               	bra	u367
   409  007C40  F000               	nop	
   410                           
   411                           ;main.c: 73: Lcd_Cmd(1);
   412  007C42  0E01               	movlw	1
   413  007C44  ECCD  F03E         	call	_Lcd_Cmd
   414                           
   415                           ;main.c: 74: Lcd_Out(1,0,Mensaje2);
   416  007C48  0E00               	movlw	0
   417  007C4A  6E39               	movwf	Lcd_Out@x,c
   418  007C4C  0E22               	movlw	low _Mensaje2
   419  007C4E  6E3A               	movwf	Lcd_Out@buffer,c
   420  007C50  0E00               	movlw	high _Mensaje2
   421  007C52  6E3B               	movwf	Lcd_Out@buffer+1,c
   422  007C54  0E01               	movlw	1
   423  007C56  EC5F  F03D         	call	_Lcd_Out
   424                           
   425                           ;main.c: 75: Lcd_Out(2,0,Clave);
   426  007C5A  0E00               	movlw	0
   427  007C5C  6E39               	movwf	Lcd_Out@x,c
   428  007C5E  0E32               	movlw	low _Clave
   429  007C60  6E3A               	movwf	Lcd_Out@buffer,c
   430  007C62  0E00               	movlw	high _Clave
   431  007C64  6E3B               	movwf	Lcd_Out@buffer+1,c
   432  007C66  0E02               	movlw	2
   433  007C68  EC5F  F03D         	call	_Lcd_Out
   434  007C6C                     l102:
   435  007C6C  D7FF               	goto	l102
   436  007C6E                     __end_of_main:
   437                           	opt stack 0
   438                           tblptru	equ	0xFF8
   439                           tblptrh	equ	0xFF7
   440                           tblptrl	equ	0xFF6
   441                           tablat	equ	0xFF5
   442                           prodh	equ	0xFF4
   443                           prodl	equ	0xFF3
   444                           postinc0	equ	0xFEE
   445                           wreg	equ	0xFE8
   446                           postdec1	equ	0xFE5
   447                           fsr1l	equ	0xFE1
   448                           indf2	equ	0xFDF
   449                           fsr2h	equ	0xFDA
   450                           fsr2l	equ	0xFD9
   451                           
   452 ;; *************** function _SetUp *****************
   453 ;; Defined at:
   454 ;;		line 86 in file "main.c"
   455 ;; Parameters:    Size  Location     Type
   456 ;;		None
   457 ;; Auto vars:     Size  Location     Type
   458 ;;		None
   459 ;; Return value:  Size  Location     Type
   460 ;;                  1    wreg      void 
   461 ;; Registers used:
   462 ;;		None
   463 ;; Tracked objects:
   464 ;;		On entry : 0/0
   465 ;;		On exit  : 0/0
   466 ;;		Unchanged: 0/0
   467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   468 ;;      Params:         0       0       0       0       0       0       0
   469 ;;      Locals:         0       0       0       0       0       0       0
   470 ;;      Temps:          0       0       0       0       0       0       0
   471 ;;      Totals:         0       0       0       0       0       0       0
   472 ;;Total ram usage:        0 bytes
   473 ;; Hardware stack levels used:    1
   474 ;; This function calls:
   475 ;;		Nothing
   476 ;; This function is called by:
   477 ;;		_main
   478 ;; This function uses a non-reentrant model
   479 ;;
   480                           
   481                           	psect	text1
   482  007A10                     __ptext1:
   483                           	opt stack 0
   484  007A10                     _SetUp:
   485                           	opt stack 30
   486                           
   487                           ;main.c: 91: OSCCONbits.IRCF = 0b111;
   488                           
   489                           ;incstack = 0
   490  007A10  88D3               	bsf	4051,4,c	;volatile
   491  007A12  8AD3               	bsf	4051,5,c	;volatile
   492  007A14  8CD3               	bsf	4051,6,c	;volatile
   493                           
   494                           ;main.c: 93: return;
   495  007A16  0012               	return		;funcret
   496  007A18                     __end_of_SetUp:
   497                           	opt stack 0
   498                           tblptru	equ	0xFF8
   499                           tblptrh	equ	0xFF7
   500                           tblptrl	equ	0xFF6
   501                           tablat	equ	0xFF5
   502                           prodh	equ	0xFF4
   503                           prodl	equ	0xFF3
   504                           postinc0	equ	0xFEE
   505                           wreg	equ	0xFE8
   506                           postdec1	equ	0xFE5
   507                           fsr1l	equ	0xFE1
   508                           indf2	equ	0xFDF
   509                           fsr2h	equ	0xFDA
   510                           fsr2l	equ	0xFD9
   511                           
   512 ;; *************** function _Lcd_Out *****************
   513 ;; Defined at:
   514 ;;		line 94 in file "lcd.h"
   515 ;; Parameters:    Size  Location     Type
   516 ;;  y               1    wreg     unsigned char 
   517 ;;  x               1    3[COMRAM] unsigned char 
   518 ;;  buffer          2    4[COMRAM] PTR const unsigned char 
   519 ;;		 -> Mensaje2(16), Clave(4), Mensaje1(17), 
   520 ;; Auto vars:     Size  Location     Type
   521 ;;  y               1    6[COMRAM] unsigned char 
   522 ;;  data            1    7[COMRAM] unsigned char 
   523 ;; Return value:  Size  Location     Type
   524 ;;                  1    wreg      void 
   525 ;; Registers used:
   526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   527 ;; Tracked objects:
   528 ;;		On entry : 0/0
   529 ;;		On exit  : 0/0
   530 ;;		Unchanged: 0/0
   531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   532 ;;      Params:         3       0       0       0       0       0       0
   533 ;;      Locals:         2       0       0       0       0       0       0
   534 ;;      Temps:          0       0       0       0       0       0       0
   535 ;;      Totals:         5       0       0       0       0       0       0
   536 ;;Total ram usage:        5 bytes
   537 ;; Hardware stack levels used:    1
   538 ;; Hardware stack levels required when called:    1
   539 ;; This function calls:
   540 ;;		_Lcd_Chr_CP
   541 ;;		_Lcd_Cmd
   542 ;; This function is called by:
   543 ;;		_main
   544 ;; This function uses a non-reentrant model
   545 ;;
   546                           
   547                           	psect	text2
   548  007ABE                     __ptext2:
   549                           	opt stack 0
   550  007ABE                     _Lcd_Out:
   551                           	opt stack 29
   552                           
   553                           ;incstack = 0
   554                           ;Lcd_Out@y stored from wreg
   555  007ABE  6E3C               	movwf	Lcd_Out@y,c
   556                           
   557                           ;lcd.h: 96: unsigned char data;
   558                           ;lcd.h: 98: switch (y)
   559  007AC0  D00D               	goto	l34
   560  007AC2  5039               	movf	Lcd_Out@x,w,c
   561  007AC4  0F80               	addlw	128
   562  007AC6  D008               	goto	L3
   563  007AC8  5039               	movf	Lcd_Out@x,w,c
   564  007ACA  0FC0               	addlw	192
   565  007ACC  D005               	goto	L3
   566  007ACE  5039               	movf	Lcd_Out@x,w,c
   567  007AD0  0F94               	addlw	148
   568  007AD2  D002               	goto	L3
   569  007AD4  5039               	movf	Lcd_Out@x,w,c
   570  007AD6  0FD4               	addlw	212
   571  007AD8                     L3:
   572  007AD8  6E3D               	movwf	Lcd_Out@data,c
   573                           
   574                           ;lcd.h: 105: }
   575                           
   576                           ;lcd.h: 104: default: break;
   577  007ADA  D00D               	goto	l36
   578  007ADC                     l34:
   579  007ADC  503C               	movf	Lcd_Out@y,w,c
   580                           
   581                           ; Switch size 1, requested type "space"
   582                           ; Number of cases is 4, Range of values is 1 to 4
   583                           ; switch strategies available:
   584                           ; Name         Instructions Cycles
   585                           ; simple_byte           13     7 (average)
   586                           ;	Chosen strategy is simple_byte
   587  007ADE  0A01               	xorlw	1	; case 1
   588  007AE0  B4D8               	btfsc	status,2,c
   589  007AE2  D7EF               	goto	l35
   590  007AE4  0A03               	xorlw	3	; case 2
   591  007AE6  B4D8               	btfsc	status,2,c
   592  007AE8  D7EF               	goto	l37
   593  007AEA  0A01               	xorlw	1	; case 3
   594  007AEC  B4D8               	btfsc	status,2,c
   595  007AEE  D7EF               	goto	l38
   596  007AF0  0A07               	xorlw	7	; case 4
   597  007AF2  B4D8               	btfsc	status,2,c
   598  007AF4  D7EF               	goto	l39
   599  007AF6                     l36:
   600                           
   601                           ;lcd.h: 106: Lcd_Cmd(data);
   602  007AF6  503D               	movf	Lcd_Out@data,w,c
   603  007AF8  ECCD  F03E         	call	_Lcd_Cmd
   604                           
   605                           ;lcd.h: 107: while(*buffer)
   606  007AFC  D009               	goto	l41
   607  007AFE                     
   608                           ;lcd.h: 108: {
   609                           ;lcd.h: 109: Lcd_Chr_CP(*buffer);
   610  007AFE  C03A  FFD9         	movff	Lcd_Out@buffer,fsr2l
   611  007B02  C03B  FFDA         	movff	Lcd_Out@buffer+1,fsr2h
   612  007B06  50DF               	movf	indf2,w,c
   613  007B08  EC64  F03F         	call	_Lcd_Chr_CP
   614                           
   615                           ;lcd.h: 110: buffer++;
   616  007B0C  4A3A               	infsnz	Lcd_Out@buffer,f,c
   617  007B0E  2A3B               	incf	Lcd_Out@buffer+1,f,c
   618  007B10                     l41:
   619  007B10  C03A  FFD9         	movff	Lcd_Out@buffer,fsr2l
   620  007B14  C03B  FFDA         	movff	Lcd_Out@buffer+1,fsr2h
   621  007B18  50DF               	movf	indf2,w,c
   622  007B1A  B4D8               	btfsc	status,2,c
   623  007B1C  0012               	return	
   624  007B1E  D7EF               	goto	l42
   625  007B20                     __end_of_Lcd_Out:
   626                           	opt stack 0
   627                           tblptru	equ	0xFF8
   628                           tblptrh	equ	0xFF7
   629                           tblptrl	equ	0xFF6
   630                           tablat	equ	0xFF5
   631                           prodh	equ	0xFF4
   632                           prodl	equ	0xFF3
   633                           postinc0	equ	0xFEE
   634                           wreg	equ	0xFE8
   635                           postdec1	equ	0xFE5
   636                           fsr1l	equ	0xFE1
   637                           indf2	equ	0xFDF
   638                           fsr2h	equ	0xFDA
   639                           fsr2l	equ	0xFD9
   640                           status	equ	0xFD8
   641                           
   642 ;; *************** function _Lcd_Chr_CP *****************
   643 ;; Defined at:
   644 ;;		line 136 in file "lcd.h"
   645 ;; Parameters:    Size  Location     Type
   646 ;;  data            1    wreg     unsigned char 
   647 ;; Auto vars:     Size  Location     Type
   648 ;;  data            1    2[COMRAM] unsigned char 
   649 ;; Return value:  Size  Location     Type
   650 ;;                  1    wreg      void 
   651 ;; Registers used:
   652 ;;		wreg, status,2, status,0
   653 ;; Tracked objects:
   654 ;;		On entry : 0/0
   655 ;;		On exit  : 0/0
   656 ;;		Unchanged: 0/0
   657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   658 ;;      Params:         0       0       0       0       0       0       0
   659 ;;      Locals:         1       0       0       0       0       0       0
   660 ;;      Temps:          2       0       0       0       0       0       0
   661 ;;      Totals:         3       0       0       0       0       0       0
   662 ;;Total ram usage:        3 bytes
   663 ;; Hardware stack levels used:    1
   664 ;; This function calls:
   665 ;;		Nothing
   666 ;; This function is called by:
   667 ;;		_Lcd_Out
   668 ;;		_main
   669 ;;		_Lcd_Out2
   670 ;; This function uses a non-reentrant model
   671 ;;
   672                           
   673                           	psect	text3
   674  007EC8                     __ptext3:
   675                           	opt stack 0
   676  007EC8                     _Lcd_Chr_CP:
   677                           	opt stack 29
   678                           
   679                           ;incstack = 0
   680                           ;Lcd_Chr_CP@data stored from wreg
   681  007EC8  6E38               	movwf	Lcd_Chr_CP@data,c
   682                           
   683                           ;lcd.h: 138: PORTDbits.RD0 = 0; PORTDbits.RD1 = 1;
   684  007ECA  9083               	bcf	3971,0,c	;volatile
   685  007ECC  8283               	bsf	3971,1,c	;volatile
   686                           
   687                           ;lcd.h: 139: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b01000000)
      +                          >>6;
   688  007ECE  6A36               	clrf	??_Lcd_Chr_CP& (0+255),c
   689  007ED0  AE38               	btfss	Lcd_Chr_CP@data,7,c
   690  007ED2  D001               	bra	u215
   691  007ED4  2A36               	incf	??_Lcd_Chr_CP& (0+255),f,c
   692  007ED6                     u215:
   693  007ED6  0E01               	movlw	1
   694  007ED8  1636               	andwf	??_Lcd_Chr_CP,f,c
   695  007EDA  3236               	rrcf	??_Lcd_Chr_CP,f,c
   696  007EDC  3236               	rrcf	??_Lcd_Chr_CP,f,c
   697  007EDE  5083               	movf	3971,w,c	;volatile
   698  007EE0  1836               	xorwf	??_Lcd_Chr_CP,w,c
   699  007EE2  0B7F               	andlw	-129
   700  007EE4  1836               	xorwf	??_Lcd_Chr_CP,w,c
   701  007EE6  6E83               	movwf	3971,c	;volatile
   702  007EE8  C038  F036         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
   703  007EEC  0E06               	movlw	6
   704  007EEE  6E37               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
   705  007EF0                     u225:
   706  007EF0  90D8               	bcf	status,0,c
   707  007EF2  3236               	rrcf	??_Lcd_Chr_CP,f,c
   708  007EF4  2E37               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
   709  007EF6  D7FC               	goto	u225
   710  007EF8  0E01               	movlw	1
   711  007EFA  1636               	andwf	??_Lcd_Chr_CP,f,c
   712  007EFC  3A36               	swapf	??_Lcd_Chr_CP,f,c
   713  007EFE  4636               	rlncf	??_Lcd_Chr_CP,f,c
   714  007F00  4636               	rlncf	??_Lcd_Chr_CP,f,c
   715  007F02  5083               	movf	3971,w,c	;volatile
   716  007F04  1836               	xorwf	??_Lcd_Chr_CP,w,c
   717  007F06  0BBF               	andlw	-65
   718  007F08  1836               	xorwf	??_Lcd_Chr_CP,w,c
   719  007F0A  6E83               	movwf	3971,c	;volatile
   720                           
   721                           ;lcd.h: 140: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b00010000)
      +                          >>4;
   722  007F0C  C038  F036         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
   723  007F10  0E05               	movlw	5
   724  007F12  6E37               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
   725  007F14                     u235:
   726  007F14  90D8               	bcf	status,0,c
   727  007F16  3236               	rrcf	??_Lcd_Chr_CP,f,c
   728  007F18  2E37               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
   729  007F1A  D7FC               	goto	u235
   730  007F1C  0E01               	movlw	1
   731  007F1E  1636               	andwf	??_Lcd_Chr_CP,f,c
   732  007F20  3A36               	swapf	??_Lcd_Chr_CP,f,c
   733  007F22  4636               	rlncf	??_Lcd_Chr_CP,f,c
   734  007F24  5083               	movf	3971,w,c	;volatile
   735  007F26  1836               	xorwf	??_Lcd_Chr_CP,w,c
   736  007F28  0BDF               	andlw	-33
   737  007F2A  1836               	xorwf	??_Lcd_Chr_CP,w,c
   738  007F2C  6E83               	movwf	3971,c	;volatile
   739  007F2E  C038  F036         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
   740  007F32  3A36               	swapf	??_Lcd_Chr_CP,f,c
   741  007F34  0E0F               	movlw	15
   742  007F36  1636               	andwf	??_Lcd_Chr_CP,f,c
   743  007F38  0E01               	movlw	1
   744  007F3A  1636               	andwf	??_Lcd_Chr_CP,f,c
   745  007F3C  3A36               	swapf	??_Lcd_Chr_CP,f,c
   746  007F3E  5083               	movf	3971,w,c	;volatile
   747  007F40  1836               	xorwf	??_Lcd_Chr_CP,w,c
   748  007F42  0BEF               	andlw	-17
   749  007F44  1836               	xorwf	??_Lcd_Chr_CP,w,c
   750  007F46  6E83               	movwf	3971,c	;volatile
   751                           
   752                           ;lcd.h: 141: _delay(10);
   753  007F48  0E03               	movlw	3
   754  007F4A                     u377:
   755  007F4A  2EE8               	decfsz	wreg,f,c
   756  007F4C  D7FE               	bra	u377
   757  007F4E  F000               	nop	
   758                           
   759                           ;lcd.h: 142: PORTDbits.RD0 = 1; _delay((unsigned long)((5)*(16000000/4000000.0))); PORTD
      +                          bits.RD0 = 0;
   760  007F50  8083               	bsf	3971,0,c	;volatile
   761  007F52  0E06               	movlw	6
   762  007F54                     u387:
   763  007F54  2EE8               	decfsz	wreg,f,c
   764  007F56  D7FE               	bra	u387
   765  007F58  F000 F000          	nop2	
   766  007F5C  9083               	bcf	3971,0,c	;volatile
   767                           
   768                           ;lcd.h: 143: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b00000100)
      +                          >>2;
   769  007F5E  C038  F036         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
   770  007F62  90D8               	bcf	status,0,c
   771  007F64  3236               	rrcf	??_Lcd_Chr_CP,f,c
   772  007F66  90D8               	bcf	status,0,c
   773  007F68  3236               	rrcf	??_Lcd_Chr_CP,f,c
   774  007F6A  90D8               	bcf	status,0,c
   775  007F6C  3236               	rrcf	??_Lcd_Chr_CP,f,c
   776  007F6E  0E01               	movlw	1
   777  007F70  1636               	andwf	??_Lcd_Chr_CP,f,c
   778  007F72  3236               	rrcf	??_Lcd_Chr_CP,f,c
   779  007F74  3236               	rrcf	??_Lcd_Chr_CP,f,c
   780  007F76  5083               	movf	3971,w,c	;volatile
   781  007F78  1836               	xorwf	??_Lcd_Chr_CP,w,c
   782  007F7A  0B7F               	andlw	-129
   783  007F7C  1836               	xorwf	??_Lcd_Chr_CP,w,c
   784  007F7E  6E83               	movwf	3971,c	;volatile
   785  007F80  C038  F036         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
   786  007F84  90D8               	bcf	status,0,c
   787  007F86  3236               	rrcf	??_Lcd_Chr_CP,f,c
   788  007F88  90D8               	bcf	status,0,c
   789  007F8A  3236               	rrcf	??_Lcd_Chr_CP,f,c
   790  007F8C  0E01               	movlw	1
   791  007F8E  1636               	andwf	??_Lcd_Chr_CP,f,c
   792  007F90  3A36               	swapf	??_Lcd_Chr_CP,f,c
   793  007F92  4636               	rlncf	??_Lcd_Chr_CP,f,c
   794  007F94  4636               	rlncf	??_Lcd_Chr_CP,f,c
   795  007F96  5083               	movf	3971,w,c	;volatile
   796  007F98  1836               	xorwf	??_Lcd_Chr_CP,w,c
   797  007F9A  0BBF               	andlw	-65
   798  007F9C  1836               	xorwf	??_Lcd_Chr_CP,w,c
   799  007F9E  6E83               	movwf	3971,c	;volatile
   800                           
   801                           ;lcd.h: 144: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b00000001)
      +                          ;
   802  007FA0  C038  F036         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
   803  007FA4  90D8               	bcf	status,0,c
   804  007FA6  3236               	rrcf	??_Lcd_Chr_CP,f,c
   805  007FA8  0E01               	movlw	1
   806  007FAA  1636               	andwf	??_Lcd_Chr_CP,f,c
   807  007FAC  3A36               	swapf	??_Lcd_Chr_CP,f,c
   808  007FAE  4636               	rlncf	??_Lcd_Chr_CP,f,c
   809  007FB0  5083               	movf	3971,w,c	;volatile
   810  007FB2  1836               	xorwf	??_Lcd_Chr_CP,w,c
   811  007FB4  0BDF               	andlw	-33
   812  007FB6  1836               	xorwf	??_Lcd_Chr_CP,w,c
   813  007FB8  6E83               	movwf	3971,c	;volatile
   814  007FBA  C038  F036         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
   815  007FBE  0E01               	movlw	1
   816  007FC0  1636               	andwf	??_Lcd_Chr_CP,f,c
   817  007FC2  3A36               	swapf	??_Lcd_Chr_CP,f,c
   818  007FC4  5083               	movf	3971,w,c	;volatile
   819  007FC6  1836               	xorwf	??_Lcd_Chr_CP,w,c
   820  007FC8  0BEF               	andlw	-17
   821  007FCA  1836               	xorwf	??_Lcd_Chr_CP,w,c
   822  007FCC  6E83               	movwf	3971,c	;volatile
   823                           
   824                           ;lcd.h: 145: _delay(10);
   825  007FCE  0E03               	movlw	3
   826  007FD0                     u397:
   827  007FD0  2EE8               	decfsz	wreg,f,c
   828  007FD2  D7FE               	bra	u397
   829  007FD4  F000               	nop	
   830                           
   831                           ;lcd.h: 146: PORTDbits.RD0 = 1; _delay((unsigned long)((5)*(16000000/4000000.0))); PORTD
      +                          bits.RD0 = 0;
   832  007FD6  8083               	bsf	3971,0,c	;volatile
   833  007FD8  0E06               	movlw	6
   834  007FDA                     u407:
   835  007FDA  2EE8               	decfsz	wreg,f,c
   836  007FDC  D7FE               	bra	u407
   837  007FDE  F000 F000          	nop2	
   838  007FE2  9083               	bcf	3971,0,c	;volatile
   839                           
   840                           ;lcd.h: 147: _delay((unsigned long)((5)*(16000000/4000000.0))); _delay((unsigned long)((
      +                          5500)*(16000000/4000000.0)));
   841  007FE4  0E06               	movlw	6
   842  007FE6                     u417:
   843  007FE6  2EE8               	decfsz	wreg,f,c
   844  007FE8  D7FE               	bra	u417
   845  007FEA  F000 F000          	nop2	
   846  007FEE  0E1D               	movlw	29
   847  007FF0  6E36               	movwf	??_Lcd_Chr_CP& (0+255),c
   848  007FF2  0E91               	movlw	145
   849  007FF4                     u427:
   850  007FF4  2EE8               	decfsz	wreg,f,c
   851  007FF6  D7FE               	bra	u427
   852  007FF8  2E36               	decfsz	??_Lcd_Chr_CP& (0+255),f,c
   853  007FFA  D7FC               	bra	u427
   854  007FFC  F000               	nop	
   855  007FFE  0012               	return		;funcret
   856  008000                     __end_of_Lcd_Chr_CP:
   857                           	opt stack 0
   858                           tblptru	equ	0xFF8
   859                           tblptrh	equ	0xFF7
   860                           tblptrl	equ	0xFF6
   861                           tablat	equ	0xFF5
   862                           prodh	equ	0xFF4
   863                           prodl	equ	0xFF3
   864                           postinc0	equ	0xFEE
   865                           wreg	equ	0xFE8
   866                           postdec1	equ	0xFE5
   867                           fsr1l	equ	0xFE1
   868                           indf2	equ	0xFDF
   869                           fsr2h	equ	0xFDA
   870                           fsr2l	equ	0xFD9
   871                           status	equ	0xFD8
   872                           
   873 ;; *************** function _Lcd_Init *****************
   874 ;; Defined at:
   875 ;;		line 51 in file "lcd.h"
   876 ;; Parameters:    Size  Location     Type
   877 ;;		None
   878 ;; Auto vars:     Size  Location     Type
   879 ;;  data            1    4[COMRAM] unsigned char 
   880 ;; Return value:  Size  Location     Type
   881 ;;                  1    wreg      void 
   882 ;; Registers used:
   883 ;;		wreg, status,2, status,0, cstack
   884 ;; Tracked objects:
   885 ;;		On entry : 0/0
   886 ;;		On exit  : 0/0
   887 ;;		Unchanged: 0/0
   888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   889 ;;      Params:         0       0       0       0       0       0       0
   890 ;;      Locals:         1       0       0       0       0       0       0
   891 ;;      Temps:          1       0       0       0       0       0       0
   892 ;;      Totals:         2       0       0       0       0       0       0
   893 ;;Total ram usage:        2 bytes
   894 ;; Hardware stack levels used:    1
   895 ;; Hardware stack levels required when called:    1
   896 ;; This function calls:
   897 ;;		_Lcd_Cmd
   898 ;; This function is called by:
   899 ;;		_main
   900 ;; This function uses a non-reentrant model
   901 ;;
   902                           
   903                           	psect	text4
   904  007C6E                     __ptext4:
   905                           	opt stack 0
   906  007C6E                     _Lcd_Init:
   907                           	opt stack 29
   908                           
   909                           ;lcd.h: 53: unsigned char data;
   910                           ;lcd.h: 54: TRISDbits.TRISD7 = 0;
   911                           
   912                           ;incstack = 0
   913  007C6E  9E95               	bcf	3989,7,c	;volatile
   914                           
   915                           ;lcd.h: 55: TRISDbits.TRISD6 = 0;
   916  007C70  9C95               	bcf	3989,6,c	;volatile
   917                           
   918                           ;lcd.h: 56: TRISDbits.TRISD5 = 0;
   919  007C72  9A95               	bcf	3989,5,c	;volatile
   920                           
   921                           ;lcd.h: 57: TRISDbits.TRISD4 = 0;
   922  007C74  9895               	bcf	3989,4,c	;volatile
   923                           
   924                           ;lcd.h: 58: TRISDbits.TRISD0 = 0;
   925  007C76  9095               	bcf	3989,0,c	;volatile
   926                           
   927                           ;lcd.h: 59: TRISDbits.TRISD1 = 0;
   928  007C78  9295               	bcf	3989,1,c	;volatile
   929                           
   930                           ;lcd.h: 60: PORTDbits.RD7 = 0;
   931  007C7A  9E83               	bcf	3971,7,c	;volatile
   932                           
   933                           ;lcd.h: 61: PORTDbits.RD6 = 0;
   934  007C7C  9C83               	bcf	3971,6,c	;volatile
   935                           
   936                           ;lcd.h: 62: PORTDbits.RD5 = 0;
   937  007C7E  9A83               	bcf	3971,5,c	;volatile
   938                           
   939                           ;lcd.h: 63: PORTDbits.RD4 = 0;
   940  007C80  9883               	bcf	3971,4,c	;volatile
   941                           
   942                           ;lcd.h: 64: PORTDbits.RD0 = 0;
   943  007C82  9083               	bcf	3971,0,c	;volatile
   944                           
   945                           ;lcd.h: 65: PORTDbits.RD1 = 0;
   946  007C84  9283               	bcf	3971,1,c	;volatile
   947                           
   948                           ;lcd.h: 66: _delay((unsigned long)((5500)*(16000000/4000000.0)));
   949  007C86  0E1D               	movlw	29
   950  007C88  6E39               	movwf	??_Lcd_Init& (0+255),c
   951  007C8A  0E91               	movlw	145
   952  007C8C                     u437:
   953  007C8C  2EE8               	decfsz	wreg,f,c
   954  007C8E  D7FE               	bra	u437
   955  007C90  2E39               	decfsz	??_Lcd_Init& (0+255),f,c
   956  007C92  D7FC               	bra	u437
   957  007C94  F000               	nop	
   958                           
   959                           ;lcd.h: 67: _delay((unsigned long)((5500)*(16000000/4000000.0)));
   960  007C96  0E1D               	movlw	29
   961  007C98  6E39               	movwf	??_Lcd_Init& (0+255),c
   962  007C9A  0E91               	movlw	145
   963  007C9C                     u447:
   964  007C9C  2EE8               	decfsz	wreg,f,c
   965  007C9E  D7FE               	bra	u447
   966  007CA0  2E39               	decfsz	??_Lcd_Init& (0+255),f,c
   967  007CA2  D7FC               	bra	u447
   968  007CA4  F000               	nop	
   969                           
   970                           ;lcd.h: 68: _delay((unsigned long)((5500)*(16000000/4000000.0)));
   971  007CA6  0E1D               	movlw	29
   972  007CA8  6E39               	movwf	??_Lcd_Init& (0+255),c
   973  007CAA  0E91               	movlw	145
   974  007CAC                     u457:
   975  007CAC  2EE8               	decfsz	wreg,f,c
   976  007CAE  D7FE               	bra	u457
   977  007CB0  2E39               	decfsz	??_Lcd_Init& (0+255),f,c
   978  007CB2  D7FC               	bra	u457
   979  007CB4  F000               	nop	
   980                           
   981                           ;lcd.h: 69: _delay((unsigned long)((5500)*(16000000/4000000.0)));
   982  007CB6  0E1D               	movlw	29
   983  007CB8  6E39               	movwf	??_Lcd_Init& (0+255),c
   984  007CBA  0E91               	movlw	145
   985  007CBC                     u467:
   986  007CBC  2EE8               	decfsz	wreg,f,c
   987  007CBE  D7FE               	bra	u467
   988  007CC0  2E39               	decfsz	??_Lcd_Init& (0+255),f,c
   989  007CC2  D7FC               	bra	u467
   990  007CC4  F000               	nop	
   991                           
   992                           ;lcd.h: 70: _delay((unsigned long)((5500)*(16000000/4000000.0)));
   993  007CC6  0E1D               	movlw	29
   994  007CC8  6E39               	movwf	??_Lcd_Init& (0+255),c
   995  007CCA  0E91               	movlw	145
   996  007CCC                     u477:
   997  007CCC  2EE8               	decfsz	wreg,f,c
   998  007CCE  D7FE               	bra	u477
   999  007CD0  2E39               	decfsz	??_Lcd_Init& (0+255),f,c
  1000  007CD2  D7FC               	bra	u477
  1001  007CD4  F000               	nop	
  1002                           
  1003                           ;lcd.h: 71: _delay((unsigned long)((5500)*(16000000/4000000.0)));
  1004  007CD6  0E1D               	movlw	29
  1005  007CD8  6E39               	movwf	??_Lcd_Init& (0+255),c
  1006  007CDA  0E91               	movlw	145
  1007  007CDC                     u487:
  1008  007CDC  2EE8               	decfsz	wreg,f,c
  1009  007CDE  D7FE               	bra	u487
  1010  007CE0  2E39               	decfsz	??_Lcd_Init& (0+255),f,c
  1011  007CE2  D7FC               	bra	u487
  1012  007CE4  F000               	nop	
  1013                           
  1014                           ;lcd.h: 73: for(data = 1; data < 4; data ++)
  1015  007CE6  0E01               	movlw	1
  1016  007CE8  6E3A               	movwf	Lcd_Init@data,c
  1017  007CEA  D020               	goto	L4
  1018  007CEC                     l29:
  1019                           
  1020                           ;lcd.h: 74: {
  1021                           ;lcd.h: 75: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 = 1; 
      +                          PORTDbits.RD0 = 0;
  1022  007CEC  9E83               	bcf	3971,7,c	;volatile
  1023  007CEE  9C83               	bcf	3971,6,c	;volatile
  1024  007CF0  8A83               	bsf	3971,5,c	;volatile
  1025  007CF2  8883               	bsf	3971,4,c	;volatile
  1026  007CF4  9083               	bcf	3971,0,c	;volatile
  1027                           
  1028                           ;lcd.h: 76: PORTDbits.RD1 = 0; PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; 
      +                          PORTDbits.RD4 = 1;
  1029  007CF6  9283               	bcf	3971,1,c	;volatile
  1030  007CF8  9E83               	bcf	3971,7,c	;volatile
  1031  007CFA  9C83               	bcf	3971,6,c	;volatile
  1032  007CFC  8A83               	bsf	3971,5,c	;volatile
  1033  007CFE  8883               	bsf	3971,4,c	;volatile
  1034                           
  1035                           ;lcd.h: 77: PORTDbits.RD0 = 1; PORTDbits.RD1 = 0;
  1036  007D00  8083               	bsf	3971,0,c	;volatile
  1037  007D02  9283               	bcf	3971,1,c	;volatile
  1038                           
  1039                           ;lcd.h: 78: _delay((unsigned long)((5)*(16000000/4000000.0)));
  1040  007D04  0E06               	movlw	6
  1041  007D06                     u497:
  1042  007D06  2EE8               	decfsz	wreg,f,c
  1043  007D08  D7FE               	bra	u497
  1044  007D0A  F000 F000          	nop2	
  1045                           
  1046                           ;lcd.h: 79: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 = 1; 
      +                          PORTDbits.RD0 = 0;
  1047  007D0E  9E83               	bcf	3971,7,c	;volatile
  1048  007D10  9C83               	bcf	3971,6,c	;volatile
  1049  007D12  8A83               	bsf	3971,5,c	;volatile
  1050  007D14  8883               	bsf	3971,4,c	;volatile
  1051  007D16  9083               	bcf	3971,0,c	;volatile
  1052                           
  1053                           ;lcd.h: 80: PORTDbits.RD1 = 0;
  1054  007D18  9283               	bcf	3971,1,c	;volatile
  1055                           
  1056                           ;lcd.h: 81: _delay((unsigned long)((5500)*(16000000/4000000.0)));
  1057  007D1A  0E1D               	movlw	29
  1058  007D1C  6E39               	movwf	??_Lcd_Init& (0+255),c
  1059  007D1E  0E91               	movlw	145
  1060  007D20                     u507:
  1061  007D20  2EE8               	decfsz	wreg,f,c
  1062  007D22  D7FE               	bra	u507
  1063  007D24  2E39               	decfsz	??_Lcd_Init& (0+255),f,c
  1064  007D26  D7FC               	bra	u507
  1065  007D28  F000               	nop	
  1066  007D2A  2A3A               	incf	Lcd_Init@data,f,c
  1067  007D2C                     L4:
  1068  007D2C  0E03               	movlw	3
  1069  007D2E  643A               	cpfsgt	Lcd_Init@data,c
  1070  007D30  D7DD               	goto	l29
  1071                           
  1072                           ;lcd.h: 82: }
  1073                           ;lcd.h: 83: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 = 0; 
      +                          PORTDbits.RD0 = 0; PORTDbits.RD1 = 0;
  1074  007D32  9E83               	bcf	3971,7,c	;volatile
  1075  007D34  9C83               	bcf	3971,6,c	;volatile
  1076  007D36  8A83               	bsf	3971,5,c	;volatile
  1077  007D38  9883               	bcf	3971,4,c	;volatile
  1078  007D3A  9083               	bcf	3971,0,c	;volatile
  1079  007D3C  9283               	bcf	3971,1,c	;volatile
  1080                           
  1081                           ;lcd.h: 84: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 = 0; 
      +                          PORTDbits.RD0 = 1; PORTDbits.RD1 = 0;
  1082  007D3E  9E83               	bcf	3971,7,c	;volatile
  1083  007D40  9C83               	bcf	3971,6,c	;volatile
  1084  007D42  8A83               	bsf	3971,5,c	;volatile
  1085  007D44  9883               	bcf	3971,4,c	;volatile
  1086  007D46  8083               	bsf	3971,0,c	;volatile
  1087  007D48  9283               	bcf	3971,1,c	;volatile
  1088                           
  1089                           ;lcd.h: 85: _delay((unsigned long)((5)*(16000000/4000000.0)));
  1090  007D4A  0E06               	movlw	6
  1091  007D4C                     u517:
  1092  007D4C  2EE8               	decfsz	wreg,f,c
  1093  007D4E  D7FE               	bra	u517
  1094  007D50  F000 F000          	nop2	
  1095                           
  1096                           ;lcd.h: 86: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 = 0; 
      +                          PORTDbits.RD0 = 0; PORTDbits.RD1 = 0;
  1097  007D54  9E83               	bcf	3971,7,c	;volatile
  1098  007D56  9C83               	bcf	3971,6,c	;volatile
  1099  007D58  8A83               	bsf	3971,5,c	;volatile
  1100  007D5A  9883               	bcf	3971,4,c	;volatile
  1101  007D5C  9083               	bcf	3971,0,c	;volatile
  1102  007D5E  9283               	bcf	3971,1,c	;volatile
  1103                           
  1104                           ;lcd.h: 87: _delay((unsigned long)((5500)*(16000000/4000000.0)));
  1105  007D60  0E1D               	movlw	29
  1106  007D62  6E39               	movwf	??_Lcd_Init& (0+255),c
  1107  007D64  0E91               	movlw	145
  1108  007D66                     u527:
  1109  007D66  2EE8               	decfsz	wreg,f,c
  1110  007D68  D7FE               	bra	u527
  1111  007D6A  2E39               	decfsz	??_Lcd_Init& (0+255),f,c
  1112  007D6C  D7FC               	bra	u527
  1113  007D6E  F000               	nop	
  1114                           
  1115                           ;lcd.h: 88: data = 40; Lcd_Cmd(data);
  1116  007D70  0E28               	movlw	40
  1117  007D72  6E3A               	movwf	Lcd_Init@data,c
  1118  007D74  503A               	movf	Lcd_Init@data,w,c
  1119  007D76  ECCD  F03E         	call	_Lcd_Cmd
  1120                           
  1121                           ;lcd.h: 89: data = 16; Lcd_Cmd(data);
  1122  007D7A  0E10               	movlw	16
  1123  007D7C  6E3A               	movwf	Lcd_Init@data,c
  1124  007D7E  503A               	movf	Lcd_Init@data,w,c
  1125  007D80  ECCD  F03E         	call	_Lcd_Cmd
  1126                           
  1127                           ;lcd.h: 90: data = 1; Lcd_Cmd(data);
  1128  007D84  0E01               	movlw	1
  1129  007D86  6E3A               	movwf	Lcd_Init@data,c
  1130  007D88  503A               	movf	Lcd_Init@data,w,c
  1131  007D8A  ECCD  F03E         	call	_Lcd_Cmd
  1132                           
  1133                           ;lcd.h: 91: data = 15; Lcd_Cmd(data);
  1134  007D8E  0E0F               	movlw	15
  1135  007D90  6E3A               	movwf	Lcd_Init@data,c
  1136  007D92  503A               	movf	Lcd_Init@data,w,c
  1137  007D94  ECCD  F03E         	call	_Lcd_Cmd
  1138  007D98  0012               	return		;funcret
  1139  007D9A                     __end_of_Lcd_Init:
  1140                           	opt stack 0
  1141                           tblptru	equ	0xFF8
  1142                           tblptrh	equ	0xFF7
  1143                           tblptrl	equ	0xFF6
  1144                           tablat	equ	0xFF5
  1145                           prodh	equ	0xFF4
  1146                           prodl	equ	0xFF3
  1147                           postinc0	equ	0xFEE
  1148                           wreg	equ	0xFE8
  1149                           postdec1	equ	0xFE5
  1150                           fsr1l	equ	0xFE1
  1151                           indf2	equ	0xFDF
  1152                           fsr2h	equ	0xFDA
  1153                           fsr2l	equ	0xFD9
  1154                           status	equ	0xFD8
  1155                           
  1156 ;; *************** function _Lcd_Cmd *****************
  1157 ;; Defined at:
  1158 ;;		line 150 in file "lcd.h"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;  data            1    wreg     unsigned char 
  1161 ;; Auto vars:     Size  Location     Type
  1162 ;;  data            1    2[COMRAM] unsigned char 
  1163 ;; Return value:  Size  Location     Type
  1164 ;;                  1    wreg      void 
  1165 ;; Registers used:
  1166 ;;		wreg, status,2, status,0
  1167 ;; Tracked objects:
  1168 ;;		On entry : 0/0
  1169 ;;		On exit  : 0/0
  1170 ;;		Unchanged: 0/0
  1171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1172 ;;      Params:         0       0       0       0       0       0       0
  1173 ;;      Locals:         1       0       0       0       0       0       0
  1174 ;;      Temps:          2       0       0       0       0       0       0
  1175 ;;      Totals:         3       0       0       0       0       0       0
  1176 ;;Total ram usage:        3 bytes
  1177 ;; Hardware stack levels used:    1
  1178 ;; This function calls:
  1179 ;;		Nothing
  1180 ;; This function is called by:
  1181 ;;		_Lcd_Init
  1182 ;;		_Lcd_Out
  1183 ;;		_main
  1184 ;;		_Lcd_Out2
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188                           	psect	text5
  1189  007D9A                     __ptext5:
  1190                           	opt stack 0
  1191  007D9A                     _Lcd_Cmd:
  1192                           	opt stack 29
  1193                           
  1194                           ;incstack = 0
  1195                           ;Lcd_Cmd@data stored from wreg
  1196  007D9A  6E38               	movwf	Lcd_Cmd@data,c
  1197                           
  1198                           ;lcd.h: 152: PORTDbits.RD0 = 0; PORTDbits.RD1 = 0;
  1199  007D9C  9083               	bcf	3971,0,c	;volatile
  1200  007D9E  9283               	bcf	3971,1,c	;volatile
  1201                           
  1202                           ;lcd.h: 153: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b01000000)
      +                          >>6;
  1203  007DA0  6A36               	clrf	??_Lcd_Cmd& (0+255),c
  1204  007DA2  AE38               	btfss	Lcd_Cmd@data,7,c
  1205  007DA4  D001               	bra	u185
  1206  007DA6  2A36               	incf	??_Lcd_Cmd& (0+255),f,c
  1207  007DA8                     u185:
  1208  007DA8  0E01               	movlw	1
  1209  007DAA  1636               	andwf	??_Lcd_Cmd,f,c
  1210  007DAC  3236               	rrcf	??_Lcd_Cmd,f,c
  1211  007DAE  3236               	rrcf	??_Lcd_Cmd,f,c
  1212  007DB0  5083               	movf	3971,w,c	;volatile
  1213  007DB2  1836               	xorwf	??_Lcd_Cmd,w,c
  1214  007DB4  0B7F               	andlw	-129
  1215  007DB6  1836               	xorwf	??_Lcd_Cmd,w,c
  1216  007DB8  6E83               	movwf	3971,c	;volatile
  1217  007DBA  C038  F036         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1218  007DBE  0E06               	movlw	6
  1219  007DC0  6E37               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  1220  007DC2                     u195:
  1221  007DC2  90D8               	bcf	status,0,c
  1222  007DC4  3236               	rrcf	??_Lcd_Cmd,f,c
  1223  007DC6  2E37               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  1224  007DC8  D7FC               	goto	u195
  1225  007DCA  0E01               	movlw	1
  1226  007DCC  1636               	andwf	??_Lcd_Cmd,f,c
  1227  007DCE  3A36               	swapf	??_Lcd_Cmd,f,c
  1228  007DD0  4636               	rlncf	??_Lcd_Cmd,f,c
  1229  007DD2  4636               	rlncf	??_Lcd_Cmd,f,c
  1230  007DD4  5083               	movf	3971,w,c	;volatile
  1231  007DD6  1836               	xorwf	??_Lcd_Cmd,w,c
  1232  007DD8  0BBF               	andlw	-65
  1233  007DDA  1836               	xorwf	??_Lcd_Cmd,w,c
  1234  007DDC  6E83               	movwf	3971,c	;volatile
  1235                           
  1236                           ;lcd.h: 154: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b00010000)
      +                          >>4;
  1237  007DDE  C038  F036         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1238  007DE2  0E05               	movlw	5
  1239  007DE4  6E37               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  1240  007DE6                     u205:
  1241  007DE6  90D8               	bcf	status,0,c
  1242  007DE8  3236               	rrcf	??_Lcd_Cmd,f,c
  1243  007DEA  2E37               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  1244  007DEC  D7FC               	goto	u205
  1245  007DEE  0E01               	movlw	1
  1246  007DF0  1636               	andwf	??_Lcd_Cmd,f,c
  1247  007DF2  3A36               	swapf	??_Lcd_Cmd,f,c
  1248  007DF4  4636               	rlncf	??_Lcd_Cmd,f,c
  1249  007DF6  5083               	movf	3971,w,c	;volatile
  1250  007DF8  1836               	xorwf	??_Lcd_Cmd,w,c
  1251  007DFA  0BDF               	andlw	-33
  1252  007DFC  1836               	xorwf	??_Lcd_Cmd,w,c
  1253  007DFE  6E83               	movwf	3971,c	;volatile
  1254  007E00  C038  F036         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1255  007E04  3A36               	swapf	??_Lcd_Cmd,f,c
  1256  007E06  0E0F               	movlw	15
  1257  007E08  1636               	andwf	??_Lcd_Cmd,f,c
  1258  007E0A  0E01               	movlw	1
  1259  007E0C  1636               	andwf	??_Lcd_Cmd,f,c
  1260  007E0E  3A36               	swapf	??_Lcd_Cmd,f,c
  1261  007E10  5083               	movf	3971,w,c	;volatile
  1262  007E12  1836               	xorwf	??_Lcd_Cmd,w,c
  1263  007E14  0BEF               	andlw	-17
  1264  007E16  1836               	xorwf	??_Lcd_Cmd,w,c
  1265  007E18  6E83               	movwf	3971,c	;volatile
  1266                           
  1267                           ;lcd.h: 155: _delay(10);
  1268  007E1A  0E03               	movlw	3
  1269  007E1C                     u537:
  1270  007E1C  2EE8               	decfsz	wreg,f,c
  1271  007E1E  D7FE               	bra	u537
  1272  007E20  F000               	nop	
  1273                           
  1274                           ;lcd.h: 156: PORTDbits.RD0 = 1; _delay((unsigned long)((5)*(16000000/4000000.0))); PORTD
      +                          bits.RD0 = 0;
  1275  007E22  8083               	bsf	3971,0,c	;volatile
  1276  007E24  0E06               	movlw	6
  1277  007E26                     u547:
  1278  007E26  2EE8               	decfsz	wreg,f,c
  1279  007E28  D7FE               	bra	u547
  1280  007E2A  F000 F000          	nop2	
  1281  007E2E  9083               	bcf	3971,0,c	;volatile
  1282                           
  1283                           ;lcd.h: 157: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b00000100)
      +                          >>2;
  1284  007E30  C038  F036         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1285  007E34  90D8               	bcf	status,0,c
  1286  007E36  3236               	rrcf	??_Lcd_Cmd,f,c
  1287  007E38  90D8               	bcf	status,0,c
  1288  007E3A  3236               	rrcf	??_Lcd_Cmd,f,c
  1289  007E3C  90D8               	bcf	status,0,c
  1290  007E3E  3236               	rrcf	??_Lcd_Cmd,f,c
  1291  007E40  0E01               	movlw	1
  1292  007E42  1636               	andwf	??_Lcd_Cmd,f,c
  1293  007E44  3236               	rrcf	??_Lcd_Cmd,f,c
  1294  007E46  3236               	rrcf	??_Lcd_Cmd,f,c
  1295  007E48  5083               	movf	3971,w,c	;volatile
  1296  007E4A  1836               	xorwf	??_Lcd_Cmd,w,c
  1297  007E4C  0B7F               	andlw	-129
  1298  007E4E  1836               	xorwf	??_Lcd_Cmd,w,c
  1299  007E50  6E83               	movwf	3971,c	;volatile
  1300  007E52  C038  F036         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1301  007E56  90D8               	bcf	status,0,c
  1302  007E58  3236               	rrcf	??_Lcd_Cmd,f,c
  1303  007E5A  90D8               	bcf	status,0,c
  1304  007E5C  3236               	rrcf	??_Lcd_Cmd,f,c
  1305  007E5E  0E01               	movlw	1
  1306  007E60  1636               	andwf	??_Lcd_Cmd,f,c
  1307  007E62  3A36               	swapf	??_Lcd_Cmd,f,c
  1308  007E64  4636               	rlncf	??_Lcd_Cmd,f,c
  1309  007E66  4636               	rlncf	??_Lcd_Cmd,f,c
  1310  007E68  5083               	movf	3971,w,c	;volatile
  1311  007E6A  1836               	xorwf	??_Lcd_Cmd,w,c
  1312  007E6C  0BBF               	andlw	-65
  1313  007E6E  1836               	xorwf	??_Lcd_Cmd,w,c
  1314  007E70  6E83               	movwf	3971,c	;volatile
  1315                           
  1316                           ;lcd.h: 158: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b00000001)
      +                          ;
  1317  007E72  C038  F036         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1318  007E76  90D8               	bcf	status,0,c
  1319  007E78  3236               	rrcf	??_Lcd_Cmd,f,c
  1320  007E7A  0E01               	movlw	1
  1321  007E7C  1636               	andwf	??_Lcd_Cmd,f,c
  1322  007E7E  3A36               	swapf	??_Lcd_Cmd,f,c
  1323  007E80  4636               	rlncf	??_Lcd_Cmd,f,c
  1324  007E82  5083               	movf	3971,w,c	;volatile
  1325  007E84  1836               	xorwf	??_Lcd_Cmd,w,c
  1326  007E86  0BDF               	andlw	-33
  1327  007E88  1836               	xorwf	??_Lcd_Cmd,w,c
  1328  007E8A  6E83               	movwf	3971,c	;volatile
  1329  007E8C  C038  F036         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1330  007E90  0E01               	movlw	1
  1331  007E92  1636               	andwf	??_Lcd_Cmd,f,c
  1332  007E94  3A36               	swapf	??_Lcd_Cmd,f,c
  1333  007E96  5083               	movf	3971,w,c	;volatile
  1334  007E98  1836               	xorwf	??_Lcd_Cmd,w,c
  1335  007E9A  0BEF               	andlw	-17
  1336  007E9C  1836               	xorwf	??_Lcd_Cmd,w,c
  1337  007E9E  6E83               	movwf	3971,c	;volatile
  1338                           
  1339                           ;lcd.h: 159: _delay(10);
  1340  007EA0  0E03               	movlw	3
  1341  007EA2                     u557:
  1342  007EA2  2EE8               	decfsz	wreg,f,c
  1343  007EA4  D7FE               	bra	u557
  1344  007EA6  F000               	nop	
  1345                           
  1346                           ;lcd.h: 160: PORTDbits.RD0 = 1; _delay((unsigned long)((5)*(16000000/4000000.0))); PORTD
      +                          bits.RD0 = 0;
  1347  007EA8  8083               	bsf	3971,0,c	;volatile
  1348  007EAA  0E06               	movlw	6
  1349  007EAC                     u567:
  1350  007EAC  2EE8               	decfsz	wreg,f,c
  1351  007EAE  D7FE               	bra	u567
  1352  007EB0  F000 F000          	nop2	
  1353  007EB4  9083               	bcf	3971,0,c	;volatile
  1354                           
  1355                           ;lcd.h: 161: _delay((unsigned long)((5500)*(16000000/4000000.0)));
  1356  007EB6  0E1D               	movlw	29
  1357  007EB8  6E36               	movwf	??_Lcd_Cmd& (0+255),c
  1358  007EBA  0E91               	movlw	145
  1359  007EBC                     u577:
  1360  007EBC  2EE8               	decfsz	wreg,f,c
  1361  007EBE  D7FE               	bra	u577
  1362  007EC0  2E36               	decfsz	??_Lcd_Cmd& (0+255),f,c
  1363  007EC2  D7FC               	bra	u577
  1364  007EC4  F000               	nop	
  1365  007EC6  0012               	return		;funcret
  1366  007EC8                     __end_of_Lcd_Cmd:
  1367                           	opt stack 0
  1368                           tblptru	equ	0xFF8
  1369                           tblptrh	equ	0xFF7
  1370                           tblptrl	equ	0xFF6
  1371                           tablat	equ	0xFF5
  1372                           prodh	equ	0xFF4
  1373                           prodl	equ	0xFF3
  1374                           postinc0	equ	0xFEE
  1375                           wreg	equ	0xFE8
  1376                           postdec1	equ	0xFE5
  1377                           fsr1l	equ	0xFE1
  1378                           indf2	equ	0xFDF
  1379                           fsr2h	equ	0xFDA
  1380                           fsr2l	equ	0xFD9
  1381                           status	equ	0xFD8
  1382                           
  1383 ;; *************** function _GetKey *****************
  1384 ;; Defined at:
  1385 ;;		line 35 in file "KeyPad.h"
  1386 ;; Parameters:    Size  Location     Type
  1387 ;;		None
  1388 ;; Auto vars:     Size  Location     Type
  1389 ;;  Row             1    7[COMRAM] unsigned char 
  1390 ;;  AnsCol          1    6[COMRAM] unsigned char 
  1391 ;;  Cont            1    5[COMRAM] unsigned char 
  1392 ;;  Col             1    4[COMRAM] unsigned char 
  1393 ;; Return value:  Size  Location     Type
  1394 ;;                  1    wreg      unsigned char 
  1395 ;; Registers used:
  1396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1397 ;; Tracked objects:
  1398 ;;		On entry : 0/0
  1399 ;;		On exit  : 0/0
  1400 ;;		Unchanged: 0/0
  1401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1402 ;;      Params:         0       0       0       0       0       0       0
  1403 ;;      Locals:         4       0       0       0       0       0       0
  1404 ;;      Temps:          2       0       0       0       0       0       0
  1405 ;;      Totals:         6       0       0       0       0       0       0
  1406 ;;Total ram usage:        6 bytes
  1407 ;; Hardware stack levels used:    1
  1408 ;; Hardware stack levels required when called:    1
  1409 ;; This function calls:
  1410 ;;		_GetCol
  1411 ;;		_KeyPadSetup
  1412 ;; This function is called by:
  1413 ;;		_main
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417                           	psect	text6
  1418  007B20                     __ptext6:
  1419                           	opt stack 0
  1420  007B20                     _GetKey:
  1421                           	opt stack 29
  1422                           
  1423                           ;KeyPad.h: 37: KeyPadSetup();
  1424                           
  1425                           ;incstack = 0
  1426  007B20  EC0C  F03D         	call	_KeyPadSetup	;wreg free
  1427                           
  1428                           ;KeyPad.h: 38: char Row = 0;
  1429  007B24  0E00               	movlw	0
  1430  007B26  6E3D               	movwf	GetKey@Row,c
  1431                           
  1432                           ;KeyPad.h: 39: char Col = 0;
  1433  007B28  0E00               	movlw	0
  1434  007B2A  6E3A               	movwf	GetKey@Col,c
  1435                           
  1436                           ;KeyPad.h: 40: char AnsCol = 0;
  1437  007B2C  0E00               	movlw	0
  1438  007B2E  6E3C               	movwf	GetKey@AnsCol,c
  1439                           
  1440                           ;KeyPad.h: 41: char Cont = 0;
  1441  007B30  0E00               	movlw	0
  1442  007B32  6E3B               	movwf	GetKey@Cont,c
  1443                           
  1444                           ;KeyPad.h: 44: for(Row = 0; Row < 4; Row++)
  1445  007B34  0E00               	movlw	0
  1446  007B36  6E3D               	movwf	GetKey@Row,c
  1447  007B38                     l1128:
  1448  007B38  0E03               	movlw	3
  1449  007B3A  643D               	cpfsgt	GetKey@Row,c
  1450  007B3C  D001               	goto	l68
  1451  007B3E  D025               	goto	u310
  1452  007B40                     l68:
  1453                           
  1454                           ;KeyPad.h: 45: {
  1455                           ;KeyPad.h: 46: PORTB = ~(1 << Row);
  1456  007B40  C03D  F038         	movff	GetKey@Row,??_GetKey
  1457  007B44  0E01               	movlw	1
  1458  007B46  6E39               	movwf	(??_GetKey+1)& (0+255),c
  1459  007B48  2A38               	incf	??_GetKey,f,c
  1460  007B4A  D002               	goto	u284
  1461  007B4C                     u285:
  1462  007B4C  90D8               	bcf	status,0,c
  1463  007B4E  3639               	rlcf	??_GetKey+1,f,c
  1464  007B50                     u284:
  1465  007B50  2E38               	decfsz	??_GetKey,f,c
  1466  007B52  D7FC               	goto	u285
  1467  007B54  5039               	movf	??_GetKey+1,w,c
  1468  007B56  0AFF               	xorlw	255
  1469  007B58  6E81               	movwf	3969,c	;volatile
  1470                           
  1471                           ;KeyPad.h: 47: _delay((unsigned long)((10)*(16000000/4000.0)));
  1472  007B5A  0E34               	movlw	52
  1473  007B5C  6E38               	movwf	??_GetKey& (0+255),c
  1474  007B5E  0EF2               	movlw	242
  1475  007B60                     u587:
  1476  007B60  2EE8               	decfsz	wreg,f,c
  1477  007B62  D7FE               	bra	u587
  1478  007B64  2E38               	decfsz	??_GetKey& (0+255),f,c
  1479  007B66  D7FC               	bra	u587
  1480                           
  1481                           ;KeyPad.h: 48: AnsCol = PORTB >> 4;
  1482  007B68  3881               	swapf	3969,w,c	;volatile
  1483  007B6A  0B0F               	andlw	15
  1484  007B6C  6E3C               	movwf	GetKey@AnsCol,c
  1485                           
  1486                           ;KeyPad.h: 53: if(AnsCol == 0x0F)
  1487  007B6E  0E0F               	movlw	15
  1488  007B70  183C               	xorwf	GetKey@AnsCol,w,c
  1489  007B72  A4D8               	btfss	status,2,c
  1490  007B74  D00A               	goto	u310
  1491                           
  1492                           ;KeyPad.h: 54: {
  1493                           ;KeyPad.h: 55: Cont += 1;
  1494  007B76  2A3B               	incf	GetKey@Cont,f,c
  1495                           
  1496                           ;KeyPad.h: 56: if(Cont == 4)
  1497  007B78  0E04               	movlw	4
  1498  007B7A  183B               	xorwf	GetKey@Cont,w,c
  1499  007B7C  A4D8               	btfss	status,2,c
  1500  007B7E  D003               	goto	l73
  1501                           
  1502                           ;KeyPad.h: 57: {
  1503                           ;KeyPad.h: 59: Row = 255; Cont = 0;
  1504  007B80  683D               	setf	GetKey@Row,c
  1505  007B82  0E00               	movlw	0
  1506  007B84  6E3B               	movwf	GetKey@Cont,c
  1507  007B86                     l73:
  1508  007B86  2A3D               	incf	GetKey@Row,f,c
  1509  007B88  D7D7               	goto	l1128
  1510  007B8A                     u310:
  1511                           
  1512                           ;KeyPad.h: 66: }
  1513                           ;KeyPad.h: 67: }
  1514                           ;KeyPad.h: 68: Col = GetCol(AnsCol);
  1515  007B8A  503C               	movf	GetKey@AnsCol,w,c
  1516  007B8C  EC2A  F03D         	call	_GetCol
  1517  007B90  6E3A               	movwf	GetKey@Col,c
  1518                           
  1519                           ;KeyPad.h: 69: return Keys[Row][Col];
  1520  007B92  503D               	movf	GetKey@Row,w,c
  1521  007B94  0D04               	mullw	4
  1522  007B96  0E01               	movlw	low _Keys
  1523  007B98  6E38               	movwf	??_GetKey& (0+255),c
  1524  007B9A  0E00               	movlw	high _Keys
  1525  007B9C  6E39               	movwf	(??_GetKey+1)& (0+255),c
  1526  007B9E  50F3               	movf	prodl,w,c
  1527  007BA0  2638               	addwf	??_GetKey,f,c
  1528  007BA2  50F4               	movf	prodh,w,c
  1529  007BA4  2239               	addwfc	??_GetKey+1,f,c
  1530  007BA6  503A               	movf	GetKey@Col,w,c
  1531  007BA8  0D01               	mullw	1
  1532  007BAA  50F3               	movf	prodl,w,c
  1533  007BAC  2438               	addwf	??_GetKey,w,c
  1534  007BAE  6ED9               	movwf	fsr2l,c
  1535  007BB0  50F4               	movf	prodh,w,c
  1536  007BB2  2039               	addwfc	??_GetKey+1,w,c
  1537  007BB4  6EDA               	movwf	fsr2h,c
  1538  007BB6  50DF               	movf	indf2,w,c
  1539  007BB8  0012               	return	
  1540  007BBA                     __end_of_GetKey:
  1541                           	opt stack 0
  1542                           tblptru	equ	0xFF8
  1543                           tblptrh	equ	0xFF7
  1544                           tblptrl	equ	0xFF6
  1545                           tablat	equ	0xFF5
  1546                           prodh	equ	0xFF4
  1547                           prodl	equ	0xFF3
  1548                           postinc0	equ	0xFEE
  1549                           wreg	equ	0xFE8
  1550                           postdec1	equ	0xFE5
  1551                           fsr1l	equ	0xFE1
  1552                           indf2	equ	0xFDF
  1553                           fsr2h	equ	0xFDA
  1554                           fsr2l	equ	0xFD9
  1555                           status	equ	0xFD8
  1556                           
  1557 ;; *************** function _KeyPadSetup *****************
  1558 ;; Defined at:
  1559 ;;		line 73 in file "KeyPad.h"
  1560 ;; Parameters:    Size  Location     Type
  1561 ;;		None
  1562 ;; Auto vars:     Size  Location     Type
  1563 ;;		None
  1564 ;; Return value:  Size  Location     Type
  1565 ;;                  1    wreg      void 
  1566 ;; Registers used:
  1567 ;;		wreg, status,2
  1568 ;; Tracked objects:
  1569 ;;		On entry : 0/0
  1570 ;;		On exit  : 0/0
  1571 ;;		Unchanged: 0/0
  1572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1573 ;;      Params:         0       0       0       0       0       0       0
  1574 ;;      Locals:         0       0       0       0       0       0       0
  1575 ;;      Temps:          0       0       0       0       0       0       0
  1576 ;;      Totals:         0       0       0       0       0       0       0
  1577 ;;Total ram usage:        0 bytes
  1578 ;; Hardware stack levels used:    1
  1579 ;; This function calls:
  1580 ;;		Nothing
  1581 ;; This function is called by:
  1582 ;;		_GetKey
  1583 ;; This function uses a non-reentrant model
  1584 ;;
  1585                           
  1586                           	psect	text7
  1587  007A18                     __ptext7:
  1588                           	opt stack 0
  1589  007A18                     _KeyPadSetup:
  1590                           	opt stack 29
  1591                           
  1592                           ;KeyPad.h: 75: LATB = 0;
  1593                           
  1594                           ;incstack = 0
  1595  007A18  0E00               	movlw	0
  1596  007A1A  6E8A               	movwf	3978,c	;volatile
  1597                           
  1598                           ;KeyPad.h: 76: PORTB = 0;
  1599  007A1C  0E00               	movlw	0
  1600  007A1E  6E81               	movwf	3969,c	;volatile
  1601                           
  1602                           ;KeyPad.h: 79: ANSELHbits.ANS11 = 0;
  1603  007A20  967F               	bcf	3967,3,c	;volatile
  1604                           
  1605                           ;KeyPad.h: 80: TRISB = 0xF0;
  1606  007A22  0EF0               	movlw	240
  1607  007A24  6E93               	movwf	3987,c	;volatile
  1608  007A26  0012               	return		;funcret
  1609  007A28                     __end_of_KeyPadSetup:
  1610                           	opt stack 0
  1611                           tblptru	equ	0xFF8
  1612                           tblptrh	equ	0xFF7
  1613                           tblptrl	equ	0xFF6
  1614                           tablat	equ	0xFF5
  1615                           prodh	equ	0xFF4
  1616                           prodl	equ	0xFF3
  1617                           postinc0	equ	0xFEE
  1618                           wreg	equ	0xFE8
  1619                           postdec1	equ	0xFE5
  1620                           fsr1l	equ	0xFE1
  1621                           indf2	equ	0xFDF
  1622                           fsr2h	equ	0xFDA
  1623                           fsr2l	equ	0xFD9
  1624                           status	equ	0xFD8
  1625                           
  1626 ;; *************** function _GetCol *****************
  1627 ;; Defined at:
  1628 ;;		line 84 in file "KeyPad.h"
  1629 ;; Parameters:    Size  Location     Type
  1630 ;;  ColValue        1    wreg     unsigned char 
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;  ColValue        1    0[COMRAM] unsigned char 
  1633 ;;  Col             1    1[COMRAM] unsigned char 
  1634 ;; Return value:  Size  Location     Type
  1635 ;;                  1    wreg      unsigned char 
  1636 ;; Registers used:
  1637 ;;		wreg, status,2, status,0
  1638 ;; Tracked objects:
  1639 ;;		On entry : 0/0
  1640 ;;		On exit  : 0/0
  1641 ;;		Unchanged: 0/0
  1642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1643 ;;      Params:         0       0       0       0       0       0       0
  1644 ;;      Locals:         2       0       0       0       0       0       0
  1645 ;;      Temps:          0       0       0       0       0       0       0
  1646 ;;      Totals:         2       0       0       0       0       0       0
  1647 ;;Total ram usage:        2 bytes
  1648 ;; Hardware stack levels used:    1
  1649 ;; This function calls:
  1650 ;;		Nothing
  1651 ;; This function is called by:
  1652 ;;		_GetKey
  1653 ;; This function uses a non-reentrant model
  1654 ;;
  1655                           
  1656                           	psect	text8
  1657  007A54                     __ptext8:
  1658                           	opt stack 0
  1659  007A54                     _GetCol:
  1660                           	opt stack 29
  1661                           
  1662                           ;incstack = 0
  1663                           ;GetCol@ColValue stored from wreg
  1664  007A54  6E36               	movwf	GetCol@ColValue,c
  1665                           
  1666                           ;KeyPad.h: 86: char Col;
  1667                           ;KeyPad.h: 88: switch(ColValue)
  1668  007A56  D009               	goto	l80
  1669  007A58                     
  1670                           ;KeyPad.h: 91: Col = 0; break;
  1671  007A58  0E00               	movlw	0
  1672  007A5A  D005               	goto	L7
  1673  007A5C                     
  1674                           ;KeyPad.h: 93: Col = 1; break;
  1675  007A5C  0E01               	movlw	1
  1676  007A5E  D003               	goto	L7
  1677  007A60                     
  1678                           ;KeyPad.h: 95: Col = 2; break;
  1679  007A60  0E02               	movlw	2
  1680  007A62  D001               	goto	L7
  1681  007A64                     
  1682                           ;KeyPad.h: 97: Col = 3; break;
  1683  007A64  0E03               	movlw	3
  1684  007A66                     L7:
  1685  007A66  6E37               	movwf	GetCol@Col,c
  1686                           
  1687                           ;KeyPad.h: 100: }
  1688                           
  1689                           ;KeyPad.h: 99: break;
  1690                           
  1691                           ;KeyPad.h: 98: default:
  1692  007A68  D00D               	goto	l82
  1693  007A6A                     l80:
  1694  007A6A  5036               	movf	GetCol@ColValue,w,c
  1695                           
  1696                           ; Switch size 1, requested type "space"
  1697                           ; Number of cases is 4, Range of values is 7 to 14
  1698                           ; switch strategies available:
  1699                           ; Name         Instructions Cycles
  1700                           ; simple_byte           13     7 (average)
  1701                           ;	Chosen strategy is simple_byte
  1702  007A6C  0A07               	xorlw	7	; case 7
  1703  007A6E  B4D8               	btfsc	status,2,c
  1704  007A70  D7F9               	goto	l85
  1705  007A72  0A0C               	xorlw	12	; case 11
  1706  007A74  B4D8               	btfsc	status,2,c
  1707  007A76  D7F4               	goto	l84
  1708  007A78  0A06               	xorlw	6	; case 13
  1709  007A7A  B4D8               	btfsc	status,2,c
  1710  007A7C  D7EF               	goto	l83
  1711  007A7E  0A03               	xorlw	3	; case 14
  1712  007A80  B4D8               	btfsc	status,2,c
  1713  007A82  D7EA               	goto	l81
  1714  007A84                     l82:
  1715                           
  1716                           ;KeyPad.h: 101: return Col;
  1717  007A84  5037               	movf	GetCol@Col,w,c
  1718  007A86  0012               	return		;funcret
  1719  007A88                     __end_of_GetCol:
  1720                           	opt stack 0
  1721  0000                     tblptru	equ	0xFF8
  1722                           tblptrh	equ	0xFF7
  1723                           tblptrl	equ	0xFF6
  1724                           tablat	equ	0xFF5
  1725                           prodh	equ	0xFF4
  1726                           prodl	equ	0xFF3
  1727                           postinc0	equ	0xFEE
  1728                           wreg	equ	0xFE8
  1729                           postdec1	equ	0xFE5
  1730                           fsr1l	equ	0xFE1
  1731                           indf2	equ	0xFDF
  1732                           fsr2h	equ	0xFDA
  1733                           fsr2l	equ	0xFD9
  1734                           status	equ	0xFD8
  1735                           tblptru	equ	0xFF8
  1736                           tblptrh	equ	0xFF7
  1737                           tblptrl	equ	0xFF6
  1738                           tablat	equ	0xFF5
  1739                           prodh	equ	0xFF4
  1740                           prodl	equ	0xFF3
  1741                           postinc0	equ	0xFEE
  1742                           wreg	equ	0xFE8
  1743                           postdec1	equ	0xFE5
  1744                           fsr1l	equ	0xFE1
  1745                           indf2	equ	0xFDF
  1746                           fsr2h	equ	0xFDA
  1747                           fsr2l	equ	0xFD9
  1748                           status	equ	0xFD8
  1749                           
  1750                           	psect	rparam
  1751  0000                     tblptru	equ	0xFF8
  1752                           tblptrh	equ	0xFF7
  1753                           tblptrl	equ	0xFF6
  1754                           tablat	equ	0xFF5
  1755                           prodh	equ	0xFF4
  1756                           prodl	equ	0xFF3
  1757                           postinc0	equ	0xFEE
  1758                           wreg	equ	0xFE8
  1759                           postdec1	equ	0xFE5
  1760                           fsr1l	equ	0xFE1
  1761                           indf2	equ	0xFDF
  1762                           fsr2h	equ	0xFDA
  1763                           fsr2l	equ	0xFD9
  1764                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        53
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     10      64
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 17
		 -> Mensaje2(COMRAM[16]), Clave(COMRAM[4]), Mensaje1(COMRAM[17]), 


Critical Paths under _main in COMRAM

    _main->_GetKey
    _main->_Lcd_Out
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _GetKey->_GetCol

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1890
                                              8 COMRAM     2     2      0
                             _GetKey
                         _Lcd_Chr_CP
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                              _SetUp
 ---------------------------------------------------------------------------------
 (1) _SetUp                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out                                              5     2      3     989
                                              3 COMRAM     5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _GetKey                                               6     6      0     235
                                              2 COMRAM     6     6      0
                             _GetCol
                        _KeyPadSetup
 ---------------------------------------------------------------------------------
 (2) _KeyPadSetup                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetCol                                               2     2      0      48
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetKey
     _GetCol
     _KeyPadSetup
   _Lcd_Chr_CP
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Lcd_Chr_CP
     _Lcd_Cmd
   _SetUp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      A      40       1       67.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      40      15        0.0%
DATA                 0      0      40       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Apr 27 23:16:14 2018

                     l41 7B10                       l42 7AFE                       l34 7ADC  
                     l35 7AC2                       l36 7AF6                       l29 7CEC  
                     l37 7AC8                       l38 7ACE                       l39 7AD4  
                     l80 7A6A                       l81 7A58                       l73 7B86  
                     l82 7A84                       l83 7A5C                       l84 7A60  
                     l68 7B40                       l85 7A64             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l100 7BEC                      l102 7C6C             __CFG_CPB$OFF 000000  
                    u205 7DE6                      u310 7B8A                      u215 7ED6  
                    u225 7EF0                      u235 7F14                      u340 7C2A  
                    u407 7FDA                      u185 7DA8                      u417 7FE6  
           __CFG_CPD$OFF 000000                      u195 7DC2                      u507 7D20  
                    u427 7FF4                      u284 7B50                      u285 7B4C  
                    u517 7D4C                      u437 7C8C                      u357 7C10  
                    u527 7D66                      u447 7C9C                      u367 7C34  
                    u537 7E1C                      u457 7CAC                      u377 7F4A  
                    u547 7E26                      u467 7CBC                      u387 7F54  
                    u557 7EA2                      u477 7CCC                      u397 7FD0  
                    u567 7EAC                      u487 7CDC                      u577 7EBC  
                    u497 7D06                      u587 7B60            ??_KeyPadSetup 0036  
           __CFG_BORV$18 000000                      prod 000FF3                      wreg 000FE8  
           __CFG_LVP$OFF 000000                     l1128 7B38                     l1196 7BE4  
                   _LATB 000F8A             __CFG_PWRT$ON 000000                     _Keys 0001  
                   _u8_i 0040                     _main 7BBA                     fsr2h 000FDA  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000          __end_of_Lcd_Cmd 7EC8          __end_of_Lcd_Out 7B20  
          __CFG_MCLRE$ON 000000             ___param_bank 000000               _Lcd_Chr_CP 7EC8  
                  ?_main 0036                    _PORTB 000F81                    _TRISB 000F93  
                  _Clave 0032            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
                  _SetUp 7A10           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
    __end_of_KeyPadSetup 7A28                    tablat 000FF5                    status 000FD8  
         __CFG_HFOFST$ON 000000         __end_of_Lcd_Init 7D9A          __initialization 7A28  
           __end_of_main 7C6E                   ??_main 003E            __activetblptr 000002  
                 ?_SetUp 0036           __CFG_WDTEN$OFF 000000                ??_Lcd_Cmd 0036  
              ??_Lcd_Out 003C                   _GetCol 7A54                   _GetKey 7B20  
         __CFG_XINST$OFF 000000              ?_Lcd_Chr_CP 0036           __CFG_STVREN$ON 000000  
           __pdataCOMRAM 0001              _KeyPadSetup 7A18                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0060  
__end_of__initialization 7A4A          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
         __pcstackCOMRAM 0036            __end_of_SetUp 7A18                  ??_SetUp 0036  
              ?_Lcd_Init 0036      __size_of_Lcd_Chr_CP 0138                  ?_GetCol 0036  
                ?_GetKey 0036               ??_Lcd_Init 0039                  _Lcd_Cmd 7D9A  
                _Lcd_Out 7ABE          __size_of_GetCol 0034          __size_of_GetKey 009A  
                __Hparam 0000                  __Lparam 0000                  __pcinit 7A28  
                __ramtop 0600                  __ptext0 7BBA                  __ptext1 7A10  
                __ptext2 7ABE                  __ptext3 7EC8                  __ptext4 7C6E  
                __ptext5 7D9A                  __ptext6 7B20                  __ptext7 7A18  
                __ptext8 7A54     end_of_initialization 7A4A                GetCol@Col 0037  
          __Lmediumconst 0000                GetKey@Col 003A                GetKey@Row 003D  
         GetCol@ColValue 0036             ??_Lcd_Chr_CP 0036                  postdec1 000FE5  
                postinc0 000FEE                _PORTDbits 000F83             ?_KeyPadSetup 0036  
              _TRISDbits 000F95       __end_of_Lcd_Chr_CP 8000           __end_of_GetCol 7A88  
         __end_of_GetKey 7BBA            __pidataCOMRAM 7A89      start_initialization 7A28  
          Lcd_Out@buffer 003A        __size_of_Lcd_Init 012C                 ??_GetCol 0036  
               ??_GetKey 0038         __CFG_LPT1OSC$OFF 000000              __pbssCOMRAM 0040  
               ?_Lcd_Cmd 0036                 ?_Lcd_Out 0039             GetKey@AnsCol 003C  
      __CFG_CCP2MX$PORTC 000000           __size_of_SetUp 0008     __size_of_KeyPadSetup 0010  
               Lcd_Out@x 0039         __CFG_WDTPS$32768 000000                 Lcd_Out@y 003C  
           Lcd_Init@data 003A                 _Lcd_Init 7C6E                copy_data0 7A3C  
               _Mensaje1 0011                 _Mensaje2 0022         __size_of_Lcd_Cmd 012E  
       __size_of_Lcd_Out 0062                 __Hrparam 0000                 __Lrparam 0000  
     __CFG_BOREN$SBORDIS 000000               _ANSELHbits 000F7F           Lcd_Chr_CP@data 0038  
            Lcd_Cmd@data 0038            __size_of_main 00B4              Lcd_Out@data 003D  
             GetKey@Cont 003B               _OSCCONbits 000FD3        __CFG_FOSC$INTIO67 000000  
